#+title: ❄️ Nix station with 🧬 Emacs at its Core
#+author: Dilip

#+begin_html
<p align="center">
<a href="https://github.com/nixos/nixpkgs"><img src="https://img.shields.io/badge/NixOS-24.05-royalblue.svg?style=for-the-badge&logo=nixos&labelColor=black"></a>

<a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-literate%20config-seagreen?style=for-the-badge&logo=org&labelColor=black"></a>

<a href="https://www.gnu.org/software/emacs/emacs.html#Releases"><img src="https://img.shields.io/badge/Emacs-29.1-blueviolet.svg?style=for-the-badge&logo=GNU%20Emacs&labelColor=black"></a>
</p>

<h1 align="center">NixOrgMacs</h1>
#+end_html

- Management of NixOS and Emacs configs in literate org file - [[file:d-setup.org][d-setup.org]].
- Files are tangled to =gdk/= directory, thus making the repo look clean and minimal.
- [[file:.dir-locals.el][.dir-locals.el]] - Helps to set local variable in emacs session for org-mode buffer.
- [[file:.envrc][.envrc]] - For direnv, shell environment based on flake or bash.

--------------
* 🌟 Utilities that are Best!
--------------

|----------------------------+----------------------------|
| Class                      | Name                       |
|----------------------------+----------------------------|
| 🌸 Window Manager          | [[https://hyprland.org/][Hyprland]]                   |
| 💜 Text Editor             | [[https://www.gnu.org/software/emacs/][Emacs]]                      |
| 🎨 Gtk Theme               | [[https://github.com/lassekongo83/adw-gtk3][Adw-gtk3]]                   |
|   Font                    | [[https://github.com/idlip/code-d-font][Recursive font]]             |
| 📔 Pdf Reader              | [[https://github.com/ahrm/sioyek][Sioyek]] (ditch zathura)     |
| 🎬 Media Player            | [[https://mpv.io][MPV!]] (its MVP too)         |
| 🖼️ Image Viewer            | [[https://sr.ht/~exec64/imv/][Imv]]                        |
| 📰 RSS Reader              | [[https://github.com/skeeto/elfeed][Elfeed]] (Again, Emacs)      |
| 🎶 Music Player            | [[https://github.com/ncmpcpp/ncmpcpp][Ncmpcpp]] or [[https://github.com//mingus][Mingus in Emacs]] |
|   Terminal                | [[https://codeberg.org/dnkl/foot][Foot]] via footclient        |
| 🚀 Menu/Launcher           | [[https://github.com/lbonn/rofi][Rofi]]                       |
| 🛎️ Notification            | [[https://github.com/dunst/dunst][Dunst]]                      |
| 🔰 Shell                   | [[https://zsh.org][Zshell]]                     |
| 🍥 Status Bar              | [[https://github.com/Alexays/Waybar][Waybar]]                     |
| 🫰 Favorite Color-Schemes | [[https://github.com/idlip/haki][Haki]] + Modus-Vivendi       |
|----------------------------+----------------------------|

#+begin_quote
Rest all other stuffs I do in Emacs, tbh I could do everything in Emacs lol.
#+end_quote


** Literate config
Back to literate config. I initially started nixos and emacs config in literate org config, but later on moved to modular split config, cause that is what world demands to have file tree hierarchy.
After several months of maintaining it, I wanted to come back to literate org config. The reasons are simple:
- The config has to focus on learning, and literate programming is the way.
- File tree model is dynamic, over time my brain can change and I don't want to burden by thinking where to put or organize them.
- Maintaining in single org file is easy, yes, it might primarily depend on Emacs only or searching capabilities, but that's fine.
- One host, one user, one system; why not one file?
- I can make use of TODO, Fixes, notes, additional resources to refer.
- Learning is the key, forgetting is natural phenomena, so why should I bother about where things are, better off be at one place.
- This really turns out useful when the time of forgetting comes into play.
- One con for maintaining nix config would be that you can repeat an attribute again. (e.g., =home.packages=)
- Other cons like multi host maintenance can be over come by using elisp or org-mode features, or simply with nix conditional statement =if/else=.

- I mean if you are still not getting convinced, think again, why ArchWiki is supreme, why google, apple ecosystem are preferred. It is simple, they provide everything at one stop.
- Same applies here, things are at one well organized place, I don't have to navigate over the dynamic file hierarchy model.

- You can ask me anything by opening an issue, I'd be glad to share or help you with literate org config.

** 🚔 Speculation
  | CPU                | 13th Gen Intel i5-13500H (16) @ 2.600GHz |
  | RAM (startup)      | 600MiB / 16GiB                           |
  | Swap               | 50% (8GB) zram                           |
  | Pkgs               | 1767                                     |
  | Nix current-system | 17 GB                                    |

* 📚 Nix Learning
This repo has bunch of links for learning nix in every possible way.
- https://github.com/humancalico/nix-learning
* 🎖️ Credits

These configs were the inspiration and helped to build this way.

I thank them sincerely.

[[https://github.com/sioodmy/dotfiles][Sioodmy]] [[https://github.com/fufexan/dotfiles][fufexan]]

------------------------------------------------------------------------------------------

#+begin_center
If you have reached here, I think you'd like to read more. I have made a static website, you can catch on some stuffs here ==> [[https://idlip.github.io]]
#+end_center
