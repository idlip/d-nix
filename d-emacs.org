#+TITLE: 🧬 D Emacs Station
#+PROPERTY: header-args:emacs-lisp :tangle ./gdk/i-home/configs/emacs/init.el :tangle-mode (identity #o444) :mkdirp yes
#+TOC: tables


** Todo Stuffs (Feel free to say/add something. I will be glad!
**** 😄 Finally Done.. Ooof
CLOSED: [2023-03-07 Tue 14:27]
:LOGBOOK:
- CLOSING NOTE [2023-03-07 Tue 14:27]
:END:
- [X] Ditch evil-mode, go pure Emacs way!
- [X] No need modeline nor dashboard, go zen-mode with minimal distraction
    PS : Used ~olivetti-mode~ and ~hide-mode-line-mode~
- [X] Clean and minimise unnecessary package/bloat
- [X] No need doom-themes too, use one theme (Either vivendi or Catppuccin)
- [X] Setup robust and extensive use for Rss feeds
- [X] Manage emacs nix-way.
  PS : Just managing packages in nix style. Init file is good enough as such.
    Benefits are :
  + package management becomes easy with just ~nixos-rebuild~
  + You get vterm, which wont build that easily in normal emacs config under nixos
- [X] Make README.org or improve this Config.org so it is informational to all
- [X] Share some cool stuffs with others and explain it very crisp and clearly
- [X] Learn elisp for enhancing some more stuffs

**** 😴 Planning  [1/3]
- [ ] Add daily quotes for ~initial-scratch-message~
- [ ] Learn more stuffs from Experienced and Master Users, like Purcell, bbsatov and others

** ✨ TLDWR - Features
/too long, don't wanna read/

Some of the highlights which you might wanna copy or take from this config :

1. RSS focused, has good workflow to read. You have bionic-reading too!
2. Smoother experience and made for Pure-Gtk, Wayland use
3. Zen, Distraction free text viewing experience (No mode-line)


* 🌅 Early-Init
#+begin_src emacs-lisp :noweb yes :tangle ./gdk/i-home/configs/emacs/early-init.el :tangle-mode (identity #o444) :mkdirp yes
  ;;; early-init.el --- Early initialization file -*- lexical-binding: t; -*-
  ;; ---
  ;; Filename: early-init.el
  ;; Description: Make emacs quicky
  ;; Author: Dilip
  ;; Copyright © 2023 Dilip
  ;; Version: 0.3
  ;; URL: https://github.com/idlip/d-nix
  ;; Keywords: Emacs early-init
  ;; Compatibility: emacs-version >= 29.1
  ;;
  ;; ---
  ;;
    ;;; Commentary:
  ;;
  ;; Emacs27 introduces early-init.el, which is run before init.el,
  ;; before package and UI initialization happens.
  ;;
  ;; ---
  ;;
  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or (at
  ;; your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
  ;;
  ;; ---
  ;;
    ;;; Code:

  

  (unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))

  (setq
   package-enable-at-startup nil ; don't auto-initialize!
   package--init-file-ensured t ; don't add that `custom-set-variables' block to init
   package-quickstart nil ; prevent `package.el' loading packages prior to their init-file
   package-archives nil)

  (setq gc-cons-threshold (expt 2 32)) ; you can remove it

  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 16777216 ; 16mb
                    gc-cons-percentage 0.1)))

  (setq safe-local-variable-values
        '((org-src-preserve-indentation . t)
          (eval add-hook 'after-save-hook
                '(lambda nil
                   (org-babel-tangle))
                nil t)))

  (setq
   use-file-dialog nil
   mode-line-format nil ; don't want a mode line while loading init
   load-prefer-newer nil
   create-lockfiles nil ; disable lockfiles
   make-backup-files nil ; disable backup files
   auto-save-list-file-prefix nil ; disable auto-save
   auto-mode-case-fold nil ; use case-sensitive `auto-mode-alist' for performance
   default-input-method nil
   utf-translate-cjk-mode nil ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
   initial-scratch-message nil ; empty the initial *scratch* buffer.
   command-line-x-option-alist nil ; remove irreleant command line options for faster startup
   vc-follow-symlinks t ; Do not ask about symlink following
   inhibit-default-init t
   inhibit-splash-screen t
   inhibit-startup-screen t 		; do not show the startup message
   inhibit-startup-message t      ; reduce noise at startup
   inhibit-startup-buffer-menu t  ; stop `list-buffers' from showing when opening multiple files
   fast-but-imprecise-scrolling t ; more performant rapid scrolling over unfontified regions
   frame-inhibit-implied-resize t ; do not resize the frame at this early stage
   use-short-answers t
   ffap-machine-p-known 'reject   ; don't ping things that look like domain names
   inhibit-compacting-font-caches t ; Inhibit frame resizing for performance
   read-process-output-max (* 1024 1024) ; Increase how much is read from processes in a single chunk.
   redisplay-skip-fontification-on-input t ; Inhibits it for better scrolling performance.
   idle-update-delay 1.0 ; slow down UI updates down
   select-active-regions 'only ; Emacs hangs when large selections contain mixed line endings
   ad-redefinition-action 'accept ; disable warnings from legacy advice system
   initial-major-mode 'fundamental-mode
   inhibit-startup-echo-area-message user-login-name)

  ;; Maximize the Emacs frame on startup
  (push '(fullscreen . maximized) initial-frame-alist)
  (push '(fullscreen . maximized) default-frame-alist)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Suppress warnings and errors during asynchronous native compilation
  (setq native-comp-async-report-warnings-errors nil)
  (setq native-comp-jit-compilation nil)

  (provide 'early-init)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;; early-init.el ends here
    #+end_src

* 🔰 Start-ify
Manage Font size, Initialize Package setup and sends you startup time (Daemonize 👹 your Emacs)
#+begin_src emacs-lisp
  ;;; init.el --- Initialization file -*- lexical-binding: t; -*-
  ;;
  ;; Filename: init.el
  ;; Description: Initialize Emacs (The GOAT-Editor)
  ;; Author: Dilip
  ;; Copyright © 2023 Dilip
  ;; Version: 0.7
  ;; URL: https://github.com/idlip/d-nix
  ;; Keywords: init emacs
  ;; Compatibility: emacs-version >= 29.1
  ;;
  ;; ---
  ;;
  ;;; Commentary:
  ;;
  ;; This is the init.el file for Pgtk Emacs (wayland)
  ;;
  ;; ---
  ;;
  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or (at
  ;; your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
  ;;
  ;; ---
  ;;
  ;;; Code:

  
  ;; BetterGC
  (defvar better-gc-cons-threshold 134217728 ; 128mb
    "If you experience freezing, decrease this.
  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold better-gc-cons-threshold)
              (makunbound 'file-name-handler-alist-original)))
  ;; -BetterGC

  ;; AutoGC
  (add-hook 'emacs-startup-hook
            (lambda ()
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
              (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

              (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
  ;; -AutoGC

  ;; Initialize package sources
  (require 'package)

  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory)
        package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("elpa" . "https://elpa.gnu.org/packages/"))
        package-quickstart nil)

  (setq package-archive-priorities
        '(("melpa" .  3)
          ("org" . 2)
          ("elpa" . 1)))

  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil) ; To prevent initializing twice
    (package-initialize))

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))

  (require 'use-package)
  (use-package use-package
    :custom
    (use-package-verbose t)
    (use-package-always-ensure t)  ; :ensure t by default
    (use-package-always-defer nil) ; :defer t by default
    (use-package-expand-minimally t)
    (use-package-enable-imenu-support t))

  #+end_src

* 🔤 Fontify
Fonts are crucial to read.
#+begin_src emacs-lisp
    ;; You will most likely need to adjust this font size for your system!

    (defvar default-font-size 170)
    (defvar default-variable-font-size 170)

    ;; Set reusable font name variables
    (defvar d/fixed-width-font "ComicCodeLigatures Nerd Font"
      "The font to use for monospaced (fixed width) text.")

    (defvar d/variable-width-font "ComicCodeLigatures Nerd Font"
      "The font to use for variable-pitch (documents) text.")

    (setq haki-heading-font "Comic Mono")
    (setq haki-sans-font "Iosevka Comfy Motion")
  ;;  (setq haki-code-font "JetBrainsMono Nerd Font")
    (setq haki-title-font "Impress BT")
    (setq haki-link-font "VictorMono Nerd Font")
    (setq haki-code-font "Maple Mono NF")



    (setf use-default-font-for-symbols nil)
    (set-fontset-font t 'unicode "Noto Emoji" nil 'append)

    (defun d/set-font-faces ()
      (message "Setting faces!")
      (set-face-attribute 'default nil :family d/variable-width-font :weight 'medium :height default-font-size)

      ;; Set the fixed pitch face (monospace)
      (set-face-attribute 'fixed-pitch nil :family d/fixed-width-font :height default-font-size)

      ;; Set the variable pitch face (document text)
      (set-face-attribute 'variable-pitch nil :family d/variable-width-font :height default-variable-font-size :weight 'medium)
      (global-font-lock-mode 1)
      (setq font-lock-maximum-decoration t))
#+end_src

* 📑 Cleanliness
Keep folders and backuping files clean!
#+begin_src emacs-lisp
  (use-package no-littering               ; Keep .emacs.d clean
    :custom
    (no-littering-var-directory (expand-file-name "data/" user-emacs-directory))
    (no-littering-etc-directory (expand-file-name "config/" user-emacs-directory))
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    ;; Move this in its own thing
    (setq
     create-lockfiles nil
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)

    (setq
     backup-directory-alist
     `((".*" . ,(no-littering-expand-var-file-name "backup/")))
     auto-save-file-name-transforms
     `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

  (use-package gcmh
    :init (gcmh-mode 1)
    :config
    (setq
     gcmh-idle-delay 'auto ; default is 15s
     gcmh-auto-idle-delay-factor 10
     gcmh-high-cons-threshold (* 16 1024 1024)) ; 16mb
    :delight " Ⓖ")

  (use-package savehist
    :init
    (savehist-mode)
    :custom
    (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)))
#+end_src

* ⌨️ Better Bindings
** Custom functions
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    "Basically to balance and change cursor to split window"
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    "Basically to balance and change cursor to split window"
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (defun d/refresh-buffer ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (defun window-focus-mode ()
    "Make the window focused, it can toggled in and out"
    (interactive)
    (if (= 1 (length (window-list)))
        (jump-to-register '_)
      (progn
        (set-register '_ (list (current-window-configuration)))
        (delete-other-windows))))

  (defun d/edit-src-block ()
    "Makes editing src block focused in its respective major mode"
    (interactive)
    (if (org-src-edit-buffer-p)         (org-edit-src-abort)
    (progn (org-edit-special) (window-focus-mode))))

  (defun d/insert-unicodes (add-unicodes)
    "Inserts unicode character (emoji/icons) from given files"
    (interactive (list add-unicodes))
    (insert
     (let* ((content
             (mapcar #'(lambda (file) (with-temp-buffer (insert-file-contents file) (split-string (buffer-string) "\n" t))) add-unicodes))
            (options (apply #'append content))
            (selected-item (completing-read "Choose Icon 󰨈: " options))
            (fields (split-string selected-item)))
       (car fields))))
  (setq add-unicodes (directory-files "~/d-git/d-bin/treasure/unicodes/" t "i"))

  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))

        #+end_src
** Respected binds
#+begin_src emacs-lisp
  (dolist (keybind '(("M-o" . other-window)

                     ;; Better scrolling (emacs 29)
                     ("M-v" . d/scroll-up)
                     ("C-v" . d/scroll-down)
                     ;; refresh/re-read buffer
                     ("<f5>" . d/refresh-buffer)
                     ;; insert color or nerd icons
                     ("C-c d i" . d/insert-unicodes)
                     ("C-c d c" . d/insert-colors)
                     ;; better splits
                     ("C-x 2" . split-and-follow-horizontally)
                     ("C-x 3" . split-and-follow-vertically)
                     ;; regex replace
                     ("M-%" . query-replace-regexp)
                     ;; quick kill
                     ("C-x C-k" . d/kill-buffer)
                     ("C-x k" . kill-buffer)
                     ("<escape>" . keyboard-escape-quit)
                     ;; handy editing
                     ("M-z" . zap-up-to-char)
                     ("M-u" . upcase-dwim)
                     ("M-l" . downcase-dwim)
                     ("M-c" . capitalize-dwim)))
    (global-set-key (kbd (car keybind)) (cdr keybind)))

  ;; Get rid of annoyance
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "C-z"))

#+end_src
* 🎹 What Key?
Many people know that emacs has lot of keychords, which aren't easy to remember, ~which-key~ is a package which shows cheatsheet for the keychords you press. Mostly will find helpful for ~C-x~ or ~C-c~ or (yours general key/leader key)
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :init
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " )
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

* 🍁 Helpful
Helpful package to even elaborate on describe commands. Decreases many hassles.

#+begin_src emacs-lisp
  (use-package helpful
    :hook (helpful-mode . hide-mode-line-mode)
    :bind
    ("C-h f" . helpful-callable)
    ("C-h v" . helpful-variable)
    ("C-h k" . helpful-key)
    ("C-h x" . helpful-command)
    ("C-c C-d" . helpful-at-point)
    ("C-h F" . helpful-function)
    (:map helpful-mode-map
          ("q" . kill-buffer-and-window)))

#+end_src

* 🎨 Color-ify
Coloured parentheses or hex values are really needed for some usecases, obviously you know it lol.
*Happy Ricing* but use Emacs Everywhere lol
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package rainbow-mode
    :defer t
    :hook (prog-mode . rainbow-mode)
    :bind ("C-c t c" . rainbow-mode))
#+end_src
* 🖱️ Good Mouse use?
Just don't use mouse, try to stay with keyboard, feel like *Pro*!
But if you like clicks, tacks and ticks of you mouse, then go with it. (Mouse is a good invention lol)
#+begin_src emacs-lisp
  (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
  (setq mouse-wheel-scroll-amount nil)
  (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

* 😇 Minad - The Messiah
[[https://github.com/minad][@minad]] is a great guy, It is one of the reason why I love Emacs and Moved here, and use it everywhere as much as Possible.
Just see his git repo issues, he has it all solved, and he will explain and converse with clear and good explanation, I wondered how could a man be so dedicated to Emacs so well with very positive approach. Consider trying his packages and if possible, do Donate to him.
Just Awesome, if it wasn't for his packages, I probably would never have tried Emacs. Now I hate vim/neovim, Idk why.

** ❤️ Vertico - The first
Just check the [[https://github.com/minad/vertico][Vertico github]] repo, you will find great Readme file with rich information and some basic usage codes which is more than enough.
#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map vertico-map
                ("?" . minibuffer-completion-help)
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-d" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word)
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("M-j" . vertico-quick-exit)
                ("'" . vertico-quick-exit)
                ("C-v" . vertico-scroll-up)
                ("M-v" . vertico-scroll-down)
                ("M-q" . d/vertico-toggle)
                ("M-RET" . minibuffer-force-complete-and-exit)
                ("M-TAB" . minibuffer-complete))

    :init
    (vertico-mode)
    (setq vertico-scroll-margin 5)
    (setq vertico-count 10)
    (setq vertico-resize t)
    (setq vertico-cycle t)
    :config
    (setq vertico-buffer-display-action '(display-buffer-in-direction
                                          (direction . right)
                                          (window-width . 0.45)))
    (setq vertico-multiform-categories
        '((file )
          (consult-location buffer)
          (t unobtrusive)))
    (setq vertico-multiform-commands
          '((consult-ripgrep buffer))))

  (defun d/vertico-toggle ()
    "Toggle between vertico-unobtrusive and vertico-mode."
    (interactive)
    (vertico-multiform-vertical 'vertico-unobtrusive-mode))

  (use-package emacs
    :init
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (setq completion-cycle-threshold 3)
    (setq tab-always-indent t)
    (setq enable-recursive-minibuffers t))

#+end_src
** Doctor Consultancy
Another, one which make certain pains of emacs , so good that you will fall in Love with Emacs again!
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ("C-c t t" . consult-theme)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x C-b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-g s" . consult-eglot-symbols)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-ripgrep)
           ("M-s m" . consult-man)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s i" . consult-info)
           ("M-s l" . consult-line)
           ("C-s" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    :hook (completion-list-mode . consult-preview-at-point-mode)

    :init
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)

    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 1.5 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both  and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")
    )

  (defun consult-colors--web-list nil
    "Return list of CSS colors for `d/colors-web'."
    (require 'shr-color)
    (sort (mapcar #'downcase (mapcar #'car shr-color-html-colors-alist)) #'string-lessp))

  (defun d/colors-web (color)
    "Show a list of all CSS colors.\

    You can insert the name (default), or insert or kill the hexadecimal or RGB value of the
    selected color."
    (interactive
     (list (consult--read (consult-colors--web-list)
                          :prompt "Color: "
                          :require-match t
                          :category 'color
                          :history '(:input consult-colors-history)
                          )))
    (insert
     (when-let* ((rgb (color-name-to-rgb color))
                 ;; Sets 2 digits per component.
                 (hex (apply #'color-rgb-to-hex (append rgb '(2)))))
       hex)))

  (defun d/insert-colors (color)
    "Show a list of all supported colors for a particular frame.\

  You can insert the name (default), or insert or kill the hexadecimal or RGB value of the
  selected color."
    (interactive
     (list (consult--read (list-colors-duplicates (defined-colors))
                          :prompt "Emacs color: "
                          :require-match t
                          :category 'color
                          :history '(:input consult-colors-history)
                          )))
    (insert
     (when-let* ((rgb (color-name-to-rgb color))
                 ;; Sets 2 digits per component.
                 (hex (apply #'color-rgb-to-hex (append rgb '(2)))))
       hex)))
#+end_src
** Orderless
This is by Oantlin Orderless to make it more than fuzzy!
#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :config
    (defun +orderless--consult-suffix ()
      "Regexp which matches the end of string with Consult tofu support."
      (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
          (format "[%c-%c]*$"
                  consult--tofu-char
                  (+ consult--tofu-char consult--tofu-range -1))
        "$"))
    ;; Recognizes the following patterns:
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun +orderless-consult-dispatch (word _index _total)
      (cond
       ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" word)
        `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
       ;; File extensions
       ((and (or minibuffer-completing-file-name
                 (derived-mode-p 'eshell-mode))
             (string-match-p "\\`\\.." word))
        `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

    ;; Define orderless style with initialism by default
    (orderless-define-completion-style +orderless-with-initialism
      (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
          completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                          ;; enable initialism by default for symbols
                                          (command (styles +orderless-with-initialism))
                                          (variable (styles +orderless-with-initialism))
                                          (symbol (styles +orderless-with-initialism)))
          orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
          orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                            #'orderless-affix-dispatch)))
#+end_src
** Info = Marginalia
Gives good annotations for vertico and help menu. Good!
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    :init
    (marginalia-mode))
#+end_src
** Embark - Just Bark
Really gets handy for experienced users, maybe difficult to understand for Beginners, but on thing you can try is embark act and export it. I also dont use this much (yea, a Newbie in some areas..)
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
  (use-package embark-consult
    :ensure t 
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src
** Corfu - The Required Love
Completion to next level, works even on terminal
#+begin_src emacs-lisp
  (use-package corfu
    :defer 1
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-preview-current t)    ;; Disable current candidate preview
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-quit-no-match t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-quit-at-boundary 'separator)
    (corfu-popupinfo-resize t)
    (corfu-popupinfo-hide nil)
    (corfu-preview-current 'insert)
    (corfu-popupinfo-delay 1.0)
    (corfu-history 1)
    (corfu-scroll-margin 0)
    :bind (:map corfu-map
                ("M-SPC" . corfu-insert-separator)
                ("TAB" . corfu-insert)
                ("<escape>" . corfu-quit)
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("M-j" . corfu-quick-insert))
    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    :init
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    (corfu-echo-mode)
    (global-corfu-mode))

  (eldoc-add-command #'corfu-insert)
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
  (unless (display-graphic-p)
    (corfu-terminal-mode +1))

#+end_src
*** Extensify - Cape the Hero
Cape for Rescue! Feel the power of Emacs Extensibility
#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
    ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    )

  ;; Add your own file with all words
  (defcustom cape-dict-file "~/.local/share/dict/vocab"
    "Dictionary word list file."
    :type 'string)

  (setq-local corfu-auto t
              corfu-auto-delay 1
              corfu-auto-prefix 0
              completion-category-defaults nil
              completion-category-overrides '((file (styles partial-completion)))
              completion-styles '(orderless))

  (defun corfu-enable-always-in-minibuffer ()
    "Enable corfu in minibuffer, if vertico is not active"
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map))
      (setq-local corfu-auto t
                  corfu-popupinfo-delay nil
                  corfu-auto-delay 0
                  corfu-auto-prefix 0
                  completion-styles '(orderless basic))
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

#+end_src
** Tempel Snip
Another, minimal and DIY snippets for any buffer!
#+begin_src emacs-lisp

  ;; Configure Tempel
  (use-package tempel
    :after corfu
    :hook
    (prog-mode . tempel-abbrev-mode)

    ;; Require trigger prefix before template name when completing.
    :custom
    (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert)))

  (use-package tempel-collection
    :ensure t
    :after tempel
    )
#+end_src
*** Custom templates
Making snippets/templates is so easy with this package.
#+begin_src emacs-lisp :tangle ~/.config/emacs/templates
  ;; Refer: `tempo-define-template' for doc.
  ;;  • (s NAME) Inserts a named field.
  ;;  • (p/r PROMPT <NAME> <NOINSERT>) Insert an optionally named field with a prompt. The PROMPT is
  ;;  displayed directly in the buffer as default value. If NOINSERT is non-nil, no field is inserted.
  ;;  Then the minibuffer is used for prompting and the value is bound to NAME.

  nix-mode

  (gitpackage "{ lib" n ", stdenv" n ", fetchFromGitHub" n ", " (p "inputs") n ", " (p "inputs") n "}:" n n>
              "stdenv.mkDerivation rec {" n> "pname = \"" (p "" pkgn nil) "\";" n> "version = \"" p "\";" n n>
              "src = fetchFromGitHub {" n> "owner = \"" (p "" own) "\";" n> "repo = \"" (s pkgn) "\";" n>
              "rev = \"" "v${version}" "\";" n> "sha256 = \"" "${lib.fakeSha256}" "\";" n> "};" n n>
              "nativeBuildInputs = [ " (p "makeWrapper") " ];" n n> "BuildInputs = [ " (p) " ];" n n>
              "meta = with lib; {" n>
              "homepage = \"" "https://github.com/" (s own) "/" (s pkgn) "\";" n>
              "description = \"" (p) "\";" n>
              "license = licenses." (p (completing-read "License: " '("agpl3" "asl20" "bsd1" "bsd2" "bsd3" "free" "gpl2" "gpl2Only" "gpl2Plus" "gpl3" "gpl3Only" "gpl3Plus" "isc" "lgpl21Only" "lgpl21Plus" "lgpl2Only" "lgpl2Plus" "lgpl3" "lgpl3Only" "mit" "mpl20" "ofl" "unfree"))) ";" n>
              "maintainers = with maintainers; [ " (s own) " ];" n>
              "platforms = platforms." 
              (p (completing-read "Platform: " '("all" "allBut" "arm" "cygwin" "darwin" "freebsd" "gnu" "i686" "illumos" "linux" "mesaPlatforms" "mips" "netbsd" "none" "openbsd" "unix" "x86"))) ";" n> q "};" n> "}"
  )

  org-mode

  (hugosite ":PROPERTIES:"  n ":EXPORT_FILE_NAME: " (p "simple-name") n ":EXPORT_DATE: " (format-time-string "%Y-%m-%d") n ":EXPORT_HUGO_DRAFT: false" n ":END:")
  (readonly ":tangle-mode (identity #o444) :mkdirp yes" n)
  (variablweb "#+name: " (p "noweb-ref") n "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
  (datime (format-time-string "%Y-%m-%d %A %d %B %Y"))
  (gitcollapse  "*** " p n "#+begin_html" n "<details>" n "<summary> " (p "heading")  " </summary>" n "#+end_html" n (p "link or any comments") n n "#+begin_html" n "</details>" n "#+end_html" n n)

  markdown-mode

  (gitcollapse "## " (p "Heading") n n "<details>" n n
               "<summary>" (p "Sub Heading")  "</summary>" n n
               (r "Insert Link or comments") n n "</details>")
  (bolditalics "***" p "***")
  (srcblock (call-interactively #'markdown-insert-gfm-code-block))
  (src "'" p "'")
  (unorderlist "- " (p "First") n> "- " (p "Second") n> "- " (p "Third"))
  (orderlist "1. " (p "First") n> "2. " (p "Second") n> "3. " (p "Third"))
  (insertimage (call-interactively #'markdown-insert-image))
  (insertlink (call-interactively #'markdown-insert-link))
  (hugotitle "+++" n "title = " (p "title") n "date = " (format-time-string "%Y-%m-%d") n "tags = [ " (p "tag1, tag2 ") "]" n "draft = false" n "+++")
  (h1 "# " p " #")
  (h2 "## " p " ##")
  (h3 "### " p " ###")
  (h4 "#### " p " ####")
  (inserttable (call-interactively #'markdown-insert-table))

  nix-mode

  (buildphase > "buildPhase= ''" n (p "Build Instructions") n " '';")
  (checkPhase > "checkPhase= ''" n (p "") n " '';")
  (configurephase > "configurePhase= ''" n (p "") n " '';")
  (fixupphase > "fixupPhase= ''" n (p "") n " '';")
  (distphase > "distPhase= ''" n (p "") n " '';")
  (patchphase > "patchPhase= ''" n (p "") n " '';")
  (unpackphase > "unpackPhase= ''" n (p "") n " '';")
  (installCheckPhasephase > "installCheckPhasePhase= ''" n (p "") n " '';")
  (installphase > "installphase= ''" n p " mkdir -p $out/bin" n> "for f in $(find . -executable -type f);" n> "do" n> "cp $f $out/bin" n> "done}" n> " '';")


  ;; Local Variables:
  ;; mode: lisp-data
  ;; outline-regexp: "[a-z]"
  ;; End:

#+end_src
** Modernize - Organize
You will see org just below this, this package helps make Org-Mode looks eye-candy and how it reached average audience.
#+begin_src emacs-lisp
  (use-package org-modern
    :defer t)
  ;; (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

  ;; (set-face-attribute 'org-modern-symbol nil :family "Iosevka")

  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
   '((right-divider-width . 1)
     (bottom-divider-width . 0)
     (internal-border-width . 5)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   ;;   org-ellipsis "…"

   org-modern-star '("◉" "✤" "◈" "✿" "✤")
   org-modern-hide-stars 'leading
   org-modern-table t
   org-modern-list
   '((?* . "❉")
     (?- . "❖")
     (?+ . "➤"))

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")

  (global-org-modern-mode)

#+end_src
** Jinxed Correction
Jinx is another cool new package for spell corrections
#+begin_src emacs-lisp
  (use-package jinx
    :hook (emacs-startup . global-jinx-mode)
    :bind ("M-$". jinx-correct)
    :config
    (add-to-list 'vertico-multiform-categories
                 '(jinx grid indexed))
    (vertico-multiform-mode 1))
#+end_src

* 🗄️ Organize Life
Life's Good if you Organize is well, don't worry if you feel organizing is not easy, Org for the rescue.
Plain (naked) simple file can help maintain GTD, even hell lot more many people don't know about.
Don't compare Notion or Logseq, Org-mode is on different league. These no match for it yet ( actually from 20 years lol). If you know Org, you know it. If not, go check YT.
** Good Org
#+begin_src emacs-lisp
    (defun org-font-setup ()
      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

        (dolist (face '((org-block . 1.0)
                        (org-block-begin-line . 0.9)
                        (org-document-info . 1.5)
                        (org-document-title . 1.7)
                        (org-level-1 . 1.4)
                        (org-level-2 . 1.3)
                        (org-level-3 . 1.2)
                        (org-level-4 . 1.1)
                        (org-level-5 . 1.1)
                        (org-level-6 . 1.1)
                        (org-code . 1.2)
                        (header-line . 1.0)
                        (org-verbatim . 1.15)
                        (variable-pitch . 1.0)
                        (org-level-7 . 1.1)))
          (set-face-attribute (car face) nil :font d/fixed-width-font :weight 'medium :height (cdr face))))

      ;; Set faces for heading levels

        ;; (set-face-attribute (car face) nil :font d/header-font :weight 'regular :height (cdr face)))


    (defun org-mode-setup ()
      ;; (org-indent-mode 1)
      (org-display-inline-images 1)
      (variable-pitch-mode 1)
      ;; (org-font-setup)
      (setq
       org-startup-indented nil
       org-image-actual-width 300
       org-startup-folded t)
      )

    (use-package org
      :pin org
      :commands (org-capture org-agenda)
      :hook (org-mode . org-mode-setup)
      (org-mode . org-modern-mode)

      :bind (("C-c c c" . org-capture)
             ("C-c c d" . calendar)
             ("C-c t R" . d/bionic-region)
             ("C-c d a" . org-agenda)
             ("C-c t r" . d/bionic-read)
             ("<f6>" . d/edit-src-block)
             :map org-mode-map
             ("C-c o b" . d/edit-src-block))
      :config
      (setq org-ellipsis " ▾")

      (setq org-agenda-start-with-log-mode t)
      ;; (setq org-log-done 'time)
      (setq org-log-done 'note)
      (setq org-log-into-drawer t)

      ;; browser script
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "d-stuff")
      (setq browse-url-secondary-browser-function 'browse-url-generic
            browse-url-generic-program "d-stuff")

      (setq org-agenda-files
            '("~/sync/org/tasks.org"
              "~/d-git/d-site/README.org"))

      ;; (require 'org-habit)
      ;; (add-to-list 'org-modules 'org-habit)
      ;; (setq org-habit-graph-column 60)

      (setq org-todo-keywords
            '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
              (sequence  "PLAN(p)" "REVIEW(v)" "|" "COMPLETED(c)" "CANC(k@)")))

      (setq org-refile-targets
            '(("Archive.org" :maxlevel . 1)
              ("tasks.org" :maxlevel . 1)))

      ;; Save Org buffers after refiling!
      (advice-add 'org-refile :after 'org-save-all-org-buffers)

      (setq org-tag-alist
            '((:startgroup)
              (:endgroup)
              ("@work" . ?W)
              ("agenda" . ?a)
              ("linux" . ?l)
              ("planning" . ?p)
              ("note" . ?n)
              ("idea" . ?i)))


      (setq org-capture-templates
            `(
              ("t" "Task" entry (file+olp "~/sync/org/tasks.org" "One-Timer")
               "* TODO %?\n  SCHEDULED:%U\n  %a\n  %i" :empty-lines 1)
              ("w" "Website Todo" entry (file+headline "~/d-git/d-site/README.org" "Ideas - TODO")
               "* TODO %?\n  SCHEDULED:%T\n " :empty-lines 1)

              ("j" "Journal Entries")
              ("jj" "Journal" entry
               (file+olp+datetree "~/docs/org/journal.org")
               "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
               ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
               :clock-in :clock-resume
               :empty-lines 1))))


           #+end_src
** Handy Org
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (calc . t)
       (latex . t)
       (shell .t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("txt" . "src text"))
    (add-to-list 'org-structure-template-alist '("conf" . "src conf"))
    (add-to-list 'org-structure-template-alist '("nix" . "src nix"))
    (add-to-list 'org-structure-template-alist '("lx" . "src latex"))
    (add-to-list 'org-structure-template-alist '("cal" . "src calc")))


#+end_src
** Spell Org
Lets try ~ispell~ paired with ~aspell~ so its better writing.
#+begin_src emacs-lisp :tangle no
;;  Replaced this with minad's jinx package.

  (use-package ispell
    :no-require t
    :config
    (setq ispell-dictionary "en")
    (setq ispell-highlight-face (quote flyspell-incorrect))
    (setq ispell-silently-savep t))

  (use-package flyspell
    :defer t
    :init
    (progn
      (add-hook 'message-mode-hook 'turn-on-flyspell)
      (add-hook 'org-mode-hook 'flyspell-mode)))

  (use-package powerthesaurus
    :defer t)
#+end_src

** Present Org
How amazing it is to do presentation with power of org? Yes its possible (need olivetti to center)
#+begin_src emacs-lisp

  (use-package org-present
    :defer t
    :after org
    :bind (:map org-present-mode-keymap
                ("<right>" . d/org-present-next-slide)
                ("<left>" . d/org-present-previous-slide)
                ("<up>" . d/org-present-up)
                ("<f5>" . d/org-present-refresh))
    (:map org-mode-map
          ("<f8>" . d/org-present-mode))
    :hook ((org-present-mode . d/org-present-enable-hook)
           (org-present-mode-quit . d/org-present-disable-hook)
           (org-present-after-navigate-functions . d/org-present-prepare-slide)))


  (defvar d/org-present-org-modern-keyword '(("title"       . "")
                                             ("description" . "")
                                             ("subtitle"    . "")
                                             ("date"        . "")
                                             ("author"      . "")
                                             ("email"       . "")
                                             ("language"    . "")
                                             ("options"     . "")
                                             (t . t)))

  (define-minor-mode d/org-present-mode
    "Toggle Presentation Mode."
   :global nil
   :lighter "d/org-present-mode"
    (if d/org-present-mode
        (org-present)
      (org-present-quit)))

  (defun d/org-present-enable-hook ()
    (setq d/org-present--inhibit-message inhibit-message
          d/org-present--echo-keystrokes echo-keystrokes
          d/org-present--visual-line-mode visual-line-mode
          d/org-present--org-ellipsis org-ellipsis
          d/org-present--org-indent-mode org-indent-mode)
    (org-indent-mode 1)

    ;; Disable 'org-modern-mode' to setup adjustment if it's installed
    (if (package-installed-p 'org-modern)
        (org-modern-mode 0))

    (if (package-installed-p 'org-modern)
        (setq-local d/org-present--org-modern-hide-stars org-modern-hide-stars
                    d/org-present--org-modern-keyword org-modern-keyword
                    d/org-present--org-modern-block-fringe org-modern-block-fringe

                    org-modern-hide-stars 'leading
                    org-modern-block-fringe t
                    org-modern-keyword d/org-present-org-modern-keyword))

    (display-line-numbers-mode 0)

    (if (package-installed-p 'org-modern)
        (org-modern-mode 1))

    (setq-local inhibit-message t
                echo-keystrokes nil
                cursor-type t
                org-image-actual-width 300
                header-line-format " "
                org-ellipsis "⤵")

    (dolist (face '((org-block . 1.0)
                    (org-block-begin-line . 0.1)
                    (org-document-info . 2.5)
                    (org-document-title . 2.5)
                    (org-level-1 . 1.6)
                    (org-level-2 . 1.5)
                    (org-level-3 . 1.4)
                    (org-level-4 . 1.3)
                    (org-level-5 . 1.2)
                    (org-level-6 . 1.1)
                    (org-code . 1.4)
                    (header-line . 2.5)
                    (org-verbatim . 1.3)
                    (variable-pitch . 1.2)
                    (org-level-7 . 1.1)))
      (face-remap-add-relative (car face) :height (cdr face)))


    (if (package-installed-p 'hide-mode-line)
        (hide-mode-line-mode 1))

    (org-display-inline-images)
    (read-only-mode 1))

  (defun d/org-present-prepare-slide (buffer-name heading)
    (org-overview)
    (org-show-entry)
    (org-show-children))

  (defun d/org-present-disable-hook ()
    (setq-local header-line-format nil
                face-remapping-alist '((default variable-pitch default))
                org-adapt-indentation nil
                visual-line-mode d/org-present--visual-line-mode
                org-ellipsis d/org-present--org-ellipsis
                inhibit-message d/org-present--inhibit-message
                echo-keystrokes d/org-present--echo-keystrokes)
    (org-present-small)


    (org-indent-mode d/org-present--org-indent-mode)

    (if (package-installed-p 'hide-mode-line)
        (hide-mode-line-mode 0))

    (load-theme 'haki t)
    (org-mode-restart)
    (org-remove-inline-images))

  (defun d/org-present-up ()
    "Go to higher heading from current heading."
    (interactive)
    (widen)
    (org-up-heading-safe)
    (org-present-narrow)
    (org-present-run-after-navigate-functions))


  (defun d/org-present-next-slide ()
    "Go to next sibling."
    (interactive)
    (widen)
    (unless (org-goto-first-child)
      (org-get-next-sibling))
    (org-present-narrow)
    (org-present-run-after-navigate-functions))


  (defun d/org-present--last-child ()
    "Find last child of current heading."
    (when (org-goto-sibling) (d/org-present--last-child))
    (when (org-goto-first-child) (d/org-present--last-child)))


  (defun d/org-present-previous-slide ()
    "Go to previous sibling."
    (interactive)
    (widen)
    (when (org-current-level)
      (org-back-to-heading)
      (if (and (org-get-previous-sibling) (org-current-level))
          (when (org-goto-first-child)
            (d/org-present--last-child))))
    (org-present-narrow)
    (org-present-run-after-navigate-functions))


  (defun d/org-present-refresh ()
    (interactive)
    (d/org-present-mode)
    (d/org-present-mode))


        #+end_src
** Denote
Prot's package which might come handy to take notes and connect them.
TODO : Learn more on this
#+begin_src emacs-lisp
  (use-package denote
    :hook ((find-file-hook . denote-link-buttonize-buffer)

           (dired-mode . denote-dired-mode))
    :bind
    ("C-c n j" . d/my-journal)
    ("C-c n n" . denote)
    ("C-c n N" . denote-type)
    ("C-c n d" . denote-date)
    ("C-c n s" . denote-subdirectory)
    ("C-c n t" . denote-template)
    ("C-c n i" . denote-link)
    ("C-c n I" . denote-link-add-links)
    ("C-c n b" . denote-link-backlinks)
    ("C-c n f f" . denote-link-find-file)
    ("C-c n f b" . denote-link-find-backlink)
    ("C-c n r" . denote-rename-file)
    ("C-c n R" . denote-rename-file-using-front-matter)
    (:map dired-mode-map
          ("C-c C-d C-i" . denote-link-dired-marked-notes)
          ("C-c C-d C-r" . denote-dired-rename-marked-files)
          ("C-c C-d C-R" . denote-dired-rename-marked-files-using-front-matter))

    :config
    (setq
     denote-directory (expand-file-name "~/sync/denote")
     denote-known-keywords '("emacs" "blogs" "article")
     denote-infer-keywords t
     denote-sort-keywords t
     denote-file-type nil ; Org is the default, set others here
     denote-prompts '(title keywords)
     denote-excluded-directories-regexp nil
     denote-excluded-keywords-regexp nil
     denote-date-prompt-use-org-read-date t
     denote-allow-multi-word-keywords t
     denote-date-format nil
     denote-backlinks-show-context t)
    denote-dired-directories
    (list denote-directory
          (thread-last denote-directory (expand-file-name "attachments"))
          (expand-file-name "~/sync/org/books/")))

  (defun d/my-journal ()
    (interactive)
    (let* ((date (org-read-date))
           (time (org-time-string-to-time date))
           (title (format-time-string "%A %d %B %Y" time))
           (initial (denote-sluggify title))
           (target (read-file-name "Select note: " (denote-directory) nil nil initial
                                   (lambda (f)
                                     (or (denote-file-has-identifier-p f)
                                         (file-directory-p f))))))
      (if (file-exists-p target)
          (find-file target)
        (denote title '("journal") denote-file-type nil date))))


  (with-eval-after-load 'org-capture
    (setq denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("n" "New note (with denote.el)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))

#+end_src
* 🍭 Eye Candy Looks
** 🫒 Olive Etiquette
All texts from left is not intuitive, Spoils GUI end of emacs, feels like you are on Terminal all time. Also, the space on right side will be wasted, unless you use split window vertically. Centering content helps focus and make things look tidy.
#+begin_src emacs-lisp
  (use-package olivetti
    :defer t
    :hook ((text-mode         . olivetti-mode)
           ;; (prog-mode         . olivetti-mode)
           (Info-mode         . olivetti-mode)
           (eshell-mode         . olivetti-mode)
           (helpful-mode         . olivetti-mode)
           (Info-mode         . olivetti-mode)
           (org-mode          . olivetti-mode)
           (ement-room-mode   . olivetti-mode)
           (dashboard-mode    . olivetti-mode)
           (eww-mode          . olivetti-mode)
           (sdcv-mode         . olivetti-mode)
           (fundamental-mode  . olivetti-mode)
           (nov-mode          . olivetti-mode)
           (markdown-mode     . olivetti-mode)
           (mu4e-view-mode    . olivetti-mode)
           (elfeed-show-mode  . olivetti-mode)
           (mu4e-compose-mode . olivetti-mode))
    :custom
    (olivetti-body-width 0.8)
    :delight " ⊛")


#+end_src
** Mode line
Mode-line to make stuff easy to use
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    (setq doom-modeline-time-icon nil)
    (setq doom-modeline-bar-width 7)
    (setq doom-modeline-major-mode-icon t)
    (setq inhibit-compacting-font-caches t)
    :custom ((doom-modeline-height 30)
             (doom-modeline-buffer-encoding nil)))

  ;; to hide during presentation and writing
  (use-package hide-mode-line
    :bind
    ("<f9>" . hide-mode-line-mode))


#+end_src
** 😻 Theme
I was using =doom-themes= actually, but they are not that good, tho I like doom-gruvbox alot. modus-vivendi is also well made, dedicatingly for emacs.
After long  usage, you will realize that Modus-themes is a *masterpiece* made by Protesilaos (Prot).
+ Works very well with eww browser too, url bar looks fine.
  Its subjective to you!
+ I have made my own theme now!
      #+begin_src emacs-lisp

        (setq modus-themes-italic-constructs t
              modus-themes-bold-constructs t
              modus-themes-mixed-fonts t
              modus-themes-variable-pitch-ui t
              modus-themes-custom-auto-reload t
              modus-themes-disable-other-themes t
              modus-themes-prompts '(italic bold)
              modus-themes-org-blocks 'gray-background
              modus-themes-completions
              '((matches . (extrabold))
                (selection . (semibold italic text-also)))

              modus-themes-org-blocks 'gray-background

              modus-themes-headings
              '((1 . (variable-pitch 1.1))
                (2 . (1.1))
                (agenda-date . (1.2))
                (agenda-structure . (variable-pitch light 1.8))
                (t . (1.1))))

        ;; My own theme
        (add-to-list 'custom-theme-load-path "~/.config/emacs/var/theme/")
        (load-theme 'haki t)
        (add-hook 'post-command-hook #'haki-meow-mode-line)
        ;; For foot to show colors properly
        (add-to-list 'term-file-aliases '("foot" . "xterm"))


      #+end_src
** Beframe
Managing frames and their buffers handy way. Gets rid of using tab-bar or windows

#+begin_src emacs-lisp :tangle no
  (use-package beframe)
  (setq beframe-global-buffers '("*scratch*"))
  (setq beframe-create-frame-scratch-buffer nil)

  (beframe-mode 1)

  (define-key global-map (kbd "C-x B") #'beframe-switch-buffer)

  (defvar consult-buffer-sources)
  (declare-function consult--buffer-state "consult")

  (with-eval-after-load 'consult
    (defface beframe-buffer
      '((t :inherit font-lock-string-face))
      "Face for `consult' framed buffers.")

    (defvar beframe--consult-source
      `( :name     "Frame-specific buffers (current frame)"
         :narrow   ?F
         :category buffer
         :face     beframe-buffer
         :history  beframe-history
         :items    ,#'beframe--buffer-names
         :action   ,#'switch-to-buffer
         :state    ,#'consult--buffer-state))

    (add-to-list 'consult-buffer-sources 'beframe--consult-source))

#+end_src
** Smooth Scrolling
With emacs 29, we have ~pixel-scroll-precision-mode~
#+begin_src emacs-lisp
  (setq-default scroll-conservatively 10000)
  (setq-default scroll-margin 3)

  (pixel-scroll-precision-mode t)

  (defun d/scroll-down ()
    "Trust me, make scrolling alot smoother. +1 Makes you fall in love with Emacs again!"
    (interactive)
    (pixel-scroll-precision-scroll-down 20))

  (defun d/scroll-up ()
    "Trust me, adds a wonderfull smooth scroll. You can do this by trackpad too (laptop)"
    (interactive)
    (pixel-scroll-precision-scroll-up 20))
#+end_src
* 💻 IDE like Lsp
I'm not a programmer, maybe will be expanded in future..
#+begin_src emacs-lisp
    (use-package nix-mode
      :mode "\\.nix\\'"
      :defer t)

    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    ;;(add-hook 'prog-mode-hook #'eglot-ensure)
    (add-hook 'prog-mode-hook #'flycheck-mode)

    (use-package markdown-mode
      :defer t
      :mode "\\.md\\'"
      :config
      (defun d/set-markdown-header-font-sizes ()
        (dolist (face '((markdown-header-face-1 . 1.3)
                        (markdown-header-face-2 . 1.2)
                        (markdown-header-face-3 . 1.15)
                        (markdown-header-face-4 . 1.1)
                        (markdown-header-face-5 . 1.0)))
          (set-face-attribute (car face) nil :weight 'normal :font d/header-font :height (cdr face))))

      (defun d/markdown-mode-hook ()
        (d/set-markdown-header-font-sizes))

      (add-hook 'markdown-mode-hook 'd/markdown-mode-hook))

    (use-package eglot
      :init
      (setq eglot-sync-connect 1
            eglot-connect-timeout 10
            eglot-autoshutdown t
            eglot-send-changes-idle-time 0.5
            ;; NOTE We disable eglot-auto-display-help-buffer because :select t in
            ;;      its popup rule causes eglot to steal focus too often.
            eglot-auto-display-help-buffer nil)
      :config
      (add-to-list 'eglot-server-programs '(nix-mode . ("nil")))
      (add-to-list 'eglot-server-programs '(bash-ts-mode . ("bash-language-server")))
      (add-to-list 'eglot-server-programs '(markdown-mode . ("marksman"))))

      ;; :hook
      ;; (nix-mode . eglot-ensure)
      ;; (bash-ts-mode . eglot-ensure)
      ;; (markdown-mode-hook . eglot-ensure))

  ;; (use-package eglot-tempel
  ;;   :disabled t
  ;;   :load-path "~/.config/emacs/elpa/eglot-tempel")
#+end_src
** ⚡ Kind Icons
Icons to prettify the corfu popup
#+begin_src emacs-lisp
  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
    (setq kind-icon-default-style '(:padding -0.5 :stroke 0 :margin 0 :radius 0 :height 0.6 :scale 1.0))
    (setq kind-icon-use-icons nil)
    (setq kind-icon-mapping
          `(
            (array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
            (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
            (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
            (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
            (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
            (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
            (constructor ,(nerd-icons-codicon "nf-cod-triangle_right") :face font-lock-function-name-face)
            (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
            (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
            (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
            (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
            (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
            (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
            (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
            (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
            (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
            (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
            (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
            (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
            (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
            (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
            (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
            (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
            (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
            (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
            (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
            (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
            (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
            (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
            (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
            (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
            (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
            (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
            (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
            (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
            (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face))))

#+end_src
*  Git Controrller
Magit the killer beast after org-mode.
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :config
    ;; Show word-granularity differences within diff hunks
    (setq magit-diff-refine-hunk t)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))


#+end_src
* 😸 Modal Meow
Meow, the most definite modal editing experience for Emacs. It is nice ;)
It is one of the package I wish I had soon discovered it.
#+begin_src emacs-lisp
  ;; We need to define setup for keyboard layout

  (require 'meow)

  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (setq meow-use-cursor-position-hack t)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("x" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("s" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (setq meow-replace-state-name-list
        '((normal . "")
          (motion . "")
          (keypad . "")
          (insert . "")
          (beacon . "")))

  ;meow-thing-register THING INNER BOUNDS
  (meow-thing-register 'arrow '(pair ("<") (">")) '(pair ("<") (">")))
  (add-to-list 'meow-char-thing-table '(?a . arrow))

  (meow-setup)
  (meow-global-mode 1)
#+end_src
* 📂 File Manager
Not that intuitive to use as file manager, once you get a hand of emacs. You will thank for this.
#+begin_src emacs-lisp
  (use-package dired
    :init (dirvish-override-dired-mode)
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump)
           ("C-c f f" . window-focus-mode)
           ("C-c f e" . (lambda () (interactive) (find-file (expand-file-name "~/d-git/d-nix/d-emacs.org"))))
           ("C-c f s" . (lambda () (interactive) (find-file (expand-file-name "~/d-git/d-nix/d-setup.org"))))
           ("C-c f m" . (lambda () (interactive) (find-file (expand-file-name "~/d-git/d-nix/README.org"))))
           ("C-x C-d" . dirvish))
    (:map dired-mode-map
          ("q" . kill-buffer-and-window)
          ("j" . dired-next-line)
          ("k" . dired-previous-line)
          ("l" . dired-find-file)
          ("h" . dired-up-directory)
          ("C-x C-k" . dirvish-quit)
          ("b" . d/external-browser))

    :custom ((dired-listing-switches "-agho --group-directories-first")))
  (setq dired-listing-switches "-alt --dired --group-directories-first -h -G")
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))

#+end_src
*  Terminal
Vterm to replace terminal emulator.
#+begin_src emacs-lisp
  (use-package vterm
    :bind
    (("C-c d t" . vterm)
     ("<f12>" . d/vt-toggle))
    (:map vterm-mode-map
          ("<f12>" . d/vt-toggle)
          ("<f9>" . hide-mode-line-mode)
          ("C-q" . vterm-send-next-key))
    :config
    (setq vterm-shell "/etc/profiles/per-user/i/bin/zsh")
    (defun d/vt-toggle ()
    "Minimal hack to toggle vterm."
    (interactive)
    (if (vterm--get-cursor-point)
        (delete-window)
      (progn (vterm-other-window) (if (package-installed-p 'hide-mode-line) (hide-mode-line-mode) nil) (shrink-window 7)))))



  ;; nixos issue for loading mu4e
  ;; (add-to-list 'load-path "/etc/profiles/per-user/i/share/emacs/site-lisp/mu4e/")
#+end_src
* 🧊 Cool Stuffs
Some small codes from good source.
#+begin_src emacs-lisp
  (use-package reddigg
    :defer t
    :bind (("C-c d f" . reddigg-view-frontpage)
           ("C-c d r" . reddigg-view-sub))
    :config
    (setq org-confirm-elisp-link-function nil)
    (setq reddigg-subs '(bangalore india emacs fossdroid piracy aww)))

  (use-package hnreader
    :defer t)

  ;; (use-package howdoyou)
  ;; (use-package undo-fu
  ;;   :bind ("C-M-r" . undo-fu-only-redo)
  ;;   ("C-z" . undo-fu-only-undo)
  ;;   ("C-S-z" . undo-fu-only-redo-all))

  (use-package undo-fu-session
    :init (undo-fu-session-global-mode)
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))

  (use-package vundo
    :bind (("C-x u" . vundo)
           ("C-z" . undo-only)
           ("C-S-z" . undo-redo)
           ("C-M-r" . undo-redo)))

  (use-package flycheck
    :defer t
    :hook (prog-mode . flycheck-mode))
  ;; :init (global-flycheck-mode))

  (use-package mingus
    :defer t
    :bind ("C-c d m" . mingus-browse)
    (:map mingus-browse-mode-map
          ("h" . mingus-browse-top-level)
          ("l" . mingus-down-dir-or-play-song))
    :config
    (advice-add 'mingus-playlist-mode :after #'olivetti-mode)
    (advice-add 'mingus-browse-mode :after #'olivetti-mode))
  ;; (use-package wikinforg)

  (use-package webpaste
    :defer t
    :ensure t
    :bind (("C-c C-p C-b" . webpaste-paste-buffer)
           ("C-c C-p C-r" . webpaste-paste-region)
           ("C-c C-p C-p" . webpaste-paste-buffer-or-region))
    :config
    (setq webpaste-provider-priority '("dpaste.org" "dpaste.com" "paste.mozilla.org"))
    ;; Require confirmation before doing paste
    (setq webpaste-paste-confirmation t))

  (use-package sdcv
    :hook (sdcv-mode . hide-mode-line-mode)
    :config
    (setq sdcv-say-word-p t
          sdcv-dictionary-data-dir "~/d-git/d-bin/treasure/dict/"
          sdcv-dictionary-simple-list
          '("wn" "mw-thesaurus" "enjp")
          sdcv-popup-function 'popup-tip
          sdcv-buffer-name "StarDict")
    :bind (("C-c d w" . sdcv-search-input)
           ("C-c d d" . sdcv-search-input+))
    (:map sdcv-mode-map
          ("q" . kill-buffer-and-window)
          ("n" . sdcv-next-dictionary)
          ("TAB" . hide-entry)
          ("<backtab>" . show-entry)
          ("p" . sdcv-previous-dictionary)))


#+end_src
* ✨ Apps
** 📚 Epub - Nov
Nov is one of the gem which really makes epub reading more sense in emacs; Embrace the Text!
You dont have to learn another software or ask for features, get it in emacs-way.
#+begin_src emacs-lisp
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    (setq nov-text-width t))
#+end_src

** </> Shrface - Orgify
To make eww and shr elements org-like and make emacs even more Unified!
#+begin_src emacs-lisp
  (defun shrface-default-keybindings ()
    (interactive)
    "Sets up the default keybindings for `shrface-mode'."
    (define-key shrface-mode-map (kbd "TAB") 'shrface-outline-cycle)
    (define-key shrface-mode-map (kbd "<backtab>") 'shrface-outline-cycle-buffer)
    (define-key shrface-mode-map (kbd "C-t") 'shrface-toggle-bullets)
    (define-key shrface-mode-map (kbd "C-j") 'shrface-next-headline)
    (define-key shrface-mode-map (kbd "C-k") 'shrface-previous-headline)
    (define-key shrface-mode-map (kbd "M-l") 'shrface-links-consult)
    (define-key shrface-mode-map (kbd "M-h") 'shrface-headline-consult))

  (use-package shrface
    :defer t
    :init
    (setq shrface-item-bullet 8226)
    :bind (:map shrface-mode-map
                ("<tab>" . shrface-outline-cycle)
                ("<backtab>" . shrface-outline-cycle-buffer)
                ("M-l" . shrface-links-consult)
                ("M-h" . shrface-headline-consult)
                ("C-j" . shrface-next-headline)
                ("C-k" . shrface-previous-headline))
    :config
    (shrface-basic)
    (shrface-trial)
    (setq shrface-bullets-bullet-list org-modern-star)
    (setq shrface-href-versatile t))

  (use-package eww
    :defer t
    :init
    (add-hook 'eww-after-render-hook #'shrface-mode))

  (use-package nov
    :defer t
    :init
    (add-hook 'nov-mode-hook #'shrface-mode)
    :config
    (setq nov-shr-rendering-functions '((img . nov-render-img) (title . nov-render-title)))
    (setq nov-shr-rendering-functions (append nov-shr-rendering-functions shr-external-rendering-functions)))

  ;; To highligh src blocks in eww
  (use-package shr-tag-pre-highlight
    :ensure t
    :after shr
    :config

  (defun shrface-shr-tag-pre-highlight (pre)
      "Highlighting code in PRE."
      (let* ((shr-folding-mode 'none)
             (shr-current-font 'default)
             (code (with-temp-buffer
                     (shr-generic pre)
                     ;; (indent-rigidly (point-min) (point-max) 2)
                     (buffer-string)))
             (lang (or (shr-tag-pre-highlight-guess-language-attr pre)
                       (let ((sym (language-detection-string code)))
                         (and sym (symbol-name sym)))))
             (mode (and lang
                        (shr-tag-pre-highlight--get-lang-mode lang))))
        (shr-ensure-newline)
        (shr-ensure-newline)
        (setq start (point))
        (insert
         (propertize (concat "#+BEGIN_SRC " lang "\n") 'face 'org-block-begin-line)
         (or (and (fboundp mode)
                  (with-demoted-errors "Error while fontifying: %S"
                    (shr-tag-pre-highlight-fontify code mode)))
             code)
         (propertize "#+END_SRC" 'face 'org-block-end-line ))
        (shr-ensure-newline)
        (setq end (point))
        (if light
            (add-face-text-property start end '(:background "#D8DEE9" :extend t))
          (add-face-text-property start end '(:background "#292b2e" :extend t)))
        (shr-ensure-newline)
        (insert "\n")))

    (add-to-list 'shr-external-rendering-functions
                 '(pre . shr-tag-pre-highlight))
    (when (version< emacs-version "26")
      (with-eval-after-load 'eww
        (advice-add 'eww-display-html :around
                    'eww-display-html--override-shr-external-rendering-functions))))



#+end_src

** 📎 Document - The PDF
Pdf-tools is another great addition if you want to integrate well with Emacs.
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :init
    (pdf-tools-install)
    :bind (:map pdf-view-mode-map
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation)
                ("D" . pdf-annot-delete)
                ("i" . pdf-view-midnight-minor-mode)
                ("Q" . d/kill-buffer))

    :config
    (setq pdf-tools-enabled-modes         ; simplified from the defaults
          '(pdf-history-minor-mode
            pdf-isearch-minor-mode
            pdf-links-minor-mode
            pdf-outline-minor-mode
            pdf-misc-size-indication-minor-mode
            pdf-occur-global-minor-mode))
    (setq pdf-view-display-size 'fit-page) ;;fit-height
    (setq pdf-view-continuous t)
    (setq pdf-cache-image-limit 3)
    (setq large-file-warning-threshold 700000000)
    (setq pdf-cache-prefetch-delay 0.5)
    (setq image-cache-eviction-delay 3)
    (setq pdf-annot-activate-created-annotations t)
    (setq pdf-view-use-dedicated-register nil)
    (setq pdf-view-max-image-width 2000)
    (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "M-g g") 'pdf-view-goto-page)
    (setq pdf-outline-imenu-use-flat-menus t)
    (setq pdf-view-resize-factor 1.1))


  (defun d/kill-buffer ()
    "Clear the image cache (to release memory) after killing a pdf buffer."
    (interactive)
    (if (one-window-p) (kill-this-buffer)
      (kill-buffer-and-window))
    (clear-image-cache t)
    (pdf-cache-clear-data))

  (define-key image-mode-map (kbd "q") 'd/kill-buffer)

  ;; For Comic Manga
  (add-hook 'image-mode-hook (lambda ()
                               (olivetti-mode)
                               (setq olivetti-body-width 0.45)))

  (use-package man
    :bind (("C-c m" . consult-man)
           :map Man-mode-map
           ("q" . kill-buffer-and-window)))

#+end_src
* 🏅 Functions Mania
Some more functions copied and adapted well to my flow. You will also find it well.
#+begin_src emacs-lisp
  (defun config-reload ()
    "Uncle dev created a function to reload Emacs config."
    (interactive)
    (load-file (expand-file-name "~/.config/emacs/init.el")))

  ;; Bionic Reading

  (defvar bionic-reading-face nil "a face for `d/bionic-region'.")
  (setq bionic-reading-face 'bold)
  ;; try
  ;; 'bold
  ;; 'error
  ;; 'warning
  ;; 'highlight
  ;; or any value of M-x list-faces-display

  (defun d/bionic-read ()
    "Bold the first few chars of every word in current buffer.
        Version 2022-05-21"
    (interactive)
    (read-only-mode -1)
    (d/bionic-region (point-min) (point-max))
    (read-only-mode 1)
    (beginning-of-buffer))

  (defun d/bionic-region (Begin End)
    "Bold the first few chars of every word in region.
        Version 2022-05-21"
    (interactive "r")
    (let (xBounds xWordBegin xWordEnd  )
      (save-restriction
        (narrow-to-region Begin End)
        (goto-char (point-min))
        (while (forward-word)
          ;; bold the first half of the word to the left of cursor
          (setq xBounds (bounds-of-thing-at-point 'word))
          (setq xWordBegin (car xBounds))
          (setq xWordEnd (cdr xBounds))
          (setq xBoldEndPos (+ xWordBegin (1+ (/ (- xWordEnd xWordBegin) 2))))
          (put-text-property xWordBegin xBoldEndPos
                             'font-lock-face bionic-reading-face)))))

  ;; From kathink. It repeats the seq without modifier
  (defun repeated-prefix-help-command ()
    (interactive)
    (when-let* ((keys (this-command-keys-vector))
                (prefix (seq-take keys (1- (length keys))))
                (orig-keymap (key-binding prefix 'accept-default))
                (keymap (copy-keymap orig-keymap))
                (exit-func (set-transient-map keymap t #'which-key-abort)))
      (define-key keymap [remap keyboard-quit]
        (lambda () (interactive) (funcall exit-func)))
      (which-key--create-buffer-and-show nil keymap)))

  (setq prefix-help-command #'repeated-prefix-help-command)

  ;; This is for managing nixos config
  (defun get-named-src-block-contents (name &optional trim)
  "Return the contents of the named Org source block."
  (let* ((block (org-element-map (org-element-parse-buffer) 'src-block
                  (lambda (src-block)
                    (when (string= name (org-element-property :name src-block))
                        src-block))
                  nil t))
         (source (org-element-property :value block)))
    (if trim
        (string-trim source)
      source)))

#+end_src

* 📰 Rss - Better Web
Use RSS, just switch to it, and save your time for other productive things. If you wanna follow lazy people and hit that 'like, share and subscribe button, and /ding/ the bell icon' and what not, go on.
#+begin_src emacs-lisp
    (use-package elfeed
      :defer t
      :hook (elfeed-show-mode . d/elfeed-ui)
      :bind ("C-c d e" . elfeed)
      ("C-c d b" . d/external-browser)
      (:map elfeed-show-mode-map
            ("e" . elfeed-open-in-eww)
            ("i" . d/bionic-read)
            ("r" . elfeed-open-in-reddit)
            ("m" . elfeed-toggle-show-star)
            ("b" . d/external-browser))
      (:map elfeed-search-mode-map
            ("m" . elfeed-toggle-star)
            ("U" . elfeed-update)
            ("u" . elfeed-update-feed))
      :config
      ;; (setq-default elfeed-search-filter "@1-week-ago--1-day-ago +unread -news +")
      (setq-default elfeed-search-filter "+unread +")
      (setq elfeed-search-date-format `("%m-%d 📰" 7 :left))
      (setq elfeed-search-title-max-width 90
            elfeed-search-trailing-width 0)
      (defalias 'elfeed-toggle-show-star
        (elfeed-expose #'elfeed-show-tag 'star))
      (defalias 'elfeed-toggle-star
        (elfeed-expose #'elfeed-search-toggle-all 'star))

      (defun d/elfeed-ui ()
        (interactive)
        (setq-local header-line-format " "))


      ;; face for starred articles
      (defface elfeed-search-star-title-face
        '((t :foreground "#f77"))
        "Marks a starred Elfeed entry.")

      (push '(star elfeed-search-star-title-face) elfeed-search-face-alist))

    (use-package link-hint
      :defer t
      :ensure t
      :bind
      ("C-c l o" . link-hint-open-link)
      ("C-c l c" . link-hint-copy-link))

    (use-package avy
      :defer t
      :bind
      ("M-j" . avy-goto-char-timer)
      ("M-K" . avy-kill-region)
      ("C-S-k" . avy-kill-whole-line)
      :config
      (setq avy-background t))

    (use-package elfeed-org
      :after elfeed
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org")))

    (defun readable-article ()
      (interactive)
      (eww-readable)
      ;; (d/bionic-read)
      (beginning-of-buffer)
      (d/eww-rename-buffer))

    (defun elfeed-open-in-eww ()
      "open in eww"
      (interactive)
      (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
        (eww (elfeed-entry-link entry))
        (add-hook 'eww-after-render-hook 'readable-article)))

    (defun elfeed-open-in-reddit ()
      "open in reddit"
      (interactive)
      (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
        (reddigg-view-comments (elfeed-entry-link entry))))

  (use-package eww
    :bind (:map eww-mode-map
                ("e" . readable-article)
                ("Q" . d/kill-buffer)
                ("M-v" . d/scroll-up)
                ("C-v" . d/scroll-down)
                ("F" . d/visit-urls)
                ("b" . d/external-browser))
    :config
    (setq shr-bullet "• "
          shr-folding-mode t
          url-privacy-level '(email agent cookies lastloc))

    (defvar consult--source-eww
      (list
       :name     "Eww"
       :narrow   ?e
       :action   (lambda (bm)
                   (eww-browse-url (get-text-property 0 'url bm)))
       :items    (lambda ()
                   (eww-read-bookmarks)
                   (mapcar (lambda (bm)
                             (propertize
                              (format "%s (%s)"
                                      (plist-get bm :url)
                                      (plist-get bm :title))
                              'url (plist-get bm :url)))
                           eww-bookmarks))))
  (add-to-list 'consult-buffer-sources 'consult--source-eww 'append))

  (use-package gnutls
    :defer t
    :custom
    (gnutls-verify-error t))


  (with-eval-after-load "shr"
      (defun shr-put-image (spec alt &optional flags)
        "Insert image SPEC with a string ALT.  Return image.
  SPEC is either an image data blob, or a list where the first
  element is the data blob and the second element is the content-type.
  Hack to use `insert-sliced-image' to avoid jerky image scrolling."
        (if (display-graphic-p)
            (let* ((size (cdr (assq 'size flags)))
                   (data (if (consp spec)
                             (car spec)
                           spec))
                   (content-type (and (consp spec)
                                      (cadr spec)))
                   (start (point))
                   (image (cond
                           ((eq size 'original)
                            (create-image data nil t :ascent 100
                                          :format content-type))
                           ((eq content-type 'image/svg+xml)
                            (create-image data 'svg t :ascent 100))
                           ((eq size 'full)
                            (ignore-errors
                              (shr-rescale-image data content-type
                                                 (plist-get flags :width)
                                                 (plist-get flags :height))))
                           (t
                            (ignore-errors
                              (shr-rescale-image data content-type
                                                 (plist-get flags :width)
                                                 (plist-get flags :height)))))))
              (when image
                (let* ((image-pixel-cons (image-size image t))
                       (image-pixel-width (car image-pixel-cons))
                       (image-pixel-height (cdr image-pixel-cons))
                       (image-scroll-rows (round (/ image-pixel-height (default-font-height)))))
                  ;; When inserting big-ish pictures, put them at the
                  ;; beginning of the line.
                  (when (and (> (current-column) 0)
                             (> (car (image-size image t)) 400))
                    (insert "\n"))

                  (insert-sliced-image image (or alt "*") nil image-scroll-rows 1)
                  ;; (if (eq size 'original)
                  ;;     (insert-sliced-image image (or alt "*") nil image-scroll-rows 1)
                  ;;   (insert-image image (or alt "*")))

                  (put-text-property start (point) 'image-size size)
                  (when (and shr-image-animate
                             (cond ((fboundp 'image-multi-frame-p)
                                    ;; Only animate multi-frame things that specify a
                                    ;; delay; eg animated gifs as opposed to
                                    ;; multi-page tiffs.  FIXME?
                                    (cdr (image-multi-frame-p image)))
                                   ((fboundp 'image-animated-p)
                                    (image-animated-p image))))
                    (image-animate image nil 60))))
              image)
          (insert (or alt "")))))


#+end_src

** Enhanced Rss experience
Make lot of betterment with reading workflow. Again, you save more time.
Congratulations, if you are already using Rss, if not, don't worry, you can get started with some good info.
#+begin_src emacs-lisp
  (defun d/external-browser ()
    (interactive)
    (if (or (thing-at-point 'url t) (thing-at-point 'filename t) (shr-url-at-point nil) (image-at-point-p))
        (link-hint-copy-link-at-point)
      (link-hint-copy-link))
    (let ((url (current-kill 0)))
      (browse-url-generic url)))

  (defun d/eww-rename-buffer ()
    "Rename EWW buffer using page title or URL.
      To be used by `eww-after-render-hook'."
    (let ((name (if (eq "" (plist-get eww-data :title))
                    (plist-get eww-data :url)
                  (plist-get eww-data :title))))
      (rename-buffer (substring (format "*%s # eww*" name)0 32) t)))

  (add-hook 'eww-after-render-hook #'d/eww-rename-buffer)
  (advice-add 'eww-back-url :after #'d/eww-rename-buffer)
  (advice-add 'eww-forward-url :after #'d/eww-rename-buffer)
  ;; (advice-add 'eww-readable :after #'d/bionic-read)

#+end_src

* 🐲 Matrix
Just to use matrix for some hacky nerds community
#+begin_src emacs-lisp
    (use-package ement
      :hook (ement-room-compose . ement-room-compose-org)
      :bind (:map ement-room-minibuffer-map
                  ("<f6>" . ement-room-compose-from-minibuffer))
      (:map ement-room-mode-map
            ("M-<" . ement-room-scroll-down-command))
      :config
      (setq ement-room-send-message-filter 'ement-room-send-org-filter)
      (setq ement-room-message-format-spec "%S> %L%B%r%R%t")
      (setq ement-room-list-avatars nil))

#+end_src
* 🌐 Good Site
Use ox-hugo to manage static site in Hugo.
#+begin_src emacs-lisp
    (use-package ox-hugo
      :after ox)
#+end_src

* 💜 Lots of things, No need to talk
Idk why, but i guess these all should be the sane defaults.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (setq set-fringe-style "default")        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; (setq-default mode-line-format nil)

  ;; (server-start)

  (global-visual-line-mode 1)

  ;; Display messages when idle, without prompting
  (setq help-at-pt-display-when-idle t)
  (setopt read-quoted-char-radix 16)
  (setq use-dialog-box nil)
  (setopt set-mark-command-repeat-pop t)
  (setq sentence-end-double-space nil)
  (setq sentence-end "[.?!] ")
  (setq-default indent-tabs-mode nil)
  (setq save-interprogram-paste-before-kill t)
  (setq kill-do-not-save-duplicates t)
  (setq initial-scratch-message
        ";; Type to your Will !\n\n")

  (setq frame-inhibit-implied-resize t)
  ;;(global-prettify-symbols-mode t)

  ;; tabs
  (setq tab-bar-new-tab-choice "*scratch")
  (setq tab-bar-close-button-show nil
        tab-bar-new-button-show nil)

  (setq vc-follow-symlinks t)

  ;; Set up the visible bell
  (setq visible-bell nil)

  ;; Wayland
  (setq x-select-request-type 'text/plain\;charset=utf-8)

  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)

  (electric-pair-mode t)
  (setq electric-pair-inhibit-predicate 'ignore)
  (setq electric-pair-skip-self t)

  (setq recenter-positions '(top middle bottom))
  (global-display-line-numbers-mode t)
  (setq  display-line-numbers-type 'relative)
  (setq text-scale-mode-step 1.1)
  (setq frame-resize-pixelwise t)
  (global-hl-line-mode 1)
  (column-number-mode -1)
  (line-number-mode 1)
  (delete-selection-mode +1)
  (save-place-mode t)

  ;;(display-battery-mode t)
  ;;(setq display-time;5;9~-default-load-average nil)
  ;;(setq display-time-24hr-format t)
  ;;(setq display-time-format "%H:%M")
  ;;(display-time-mode t)
  ;;(toggle-truncate-lines t)

  (setq
   shr-use-fonts  t                          ; No special fonts
   shr-use-colors t                          ; No colours
   shr-indentation 4                           ; Left-side margin
   shr-max-width fill-column
   shr-max-image-proportion 0.2
   shr-width 100                                ; Fold text to 70 columns
   eww-search-prefix "https://lite.duckduckgo.com/lite/?q=")

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha-background 90)
  (add-to-list 'default-frame-alist `(alpha-background . 90))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  vterm-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  olivetti-mode-hook
                  treemacs-mode-hook
                  pdf-view-mode-hook
                  archive-mode-hook
                  image-mode-hook
                  elfeed-show-mode-hook
                  elfeed-search-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (blink-cursor-mode -1)

  ;; Don't blink the paren matching the one at point, it's too distracting.
  (setq blink-matching-paren nil)

  ;; A simple frame title
  (setq frame-title-format '("%b")
        icon-title-format frame-title-format)

  ;; Don't resize the frames in steps; it looks weird, especially in tiling window
  ;; managers, where it can leave unseemly gaps.
  (setq frame-resize-pixelwise t)
  (setq pixel-dead-time 10000)
  (setq confirm-kill-emacs #'yes-or-no-p)
  (setq window-resize-pixelwise t)
  (setq frame-resize-pixelwise t)

  (setq fill-column 100)

#+end_src

* 🏍️ Run Always, and be Everywhere
Run emacs as daemon and thank yourself for blazing fast clients of emacs.
#+begin_src emacs-lisp

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (d/set-font-faces))))
      (d/set-font-faces))
  (setq doom-modeline-icon t)
   (put 'narrow-to-region 'disabled nil)

#+end_src
