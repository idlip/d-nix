#+STARTUP: overview showall
#+OPTIONS: num:nil author:nil toc:3
#+PROPERTY: header-args :noweb yes :results silent :tangle-mode (identity #o444) :mkdirp yes
#+TITLE: Nix Organized with Emacs!
#+AUTHOR: iDlip

#+begin_html
<p align="center">
<a href="https://github.com/nixos/nixpkgs"><img src="https://img.shields.io/badge/NixOS-24.05-royalblue.svg?style=for-the-badge&logo=nixos&labelColor=black"></a>

<a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-literate%20config-seagreen?style=for-the-badge&logo=org&labelColor=black"></a>

<a href="https://www.gnu.org/software/emacs/emacs.html#Releases"><img src="https://img.shields.io/badge/Emacs-29.1-blueviolet.svg?style=for-the-badge&logo=GNU%20Emacs&labelColor=black"></a>
</p>

<h1 align="center">NixOrgMacs</h1>
#+end_html

* Intro
This is a literate configuration for NixOS with HomeManager configs, and consists of Emacs (elisp) configs in tandem with particular category.
Although category does not matter, having certain similar one's together is useful.
** Concept
The concept I have used is to write several chunk of src/code blocks in some big pictorial category, and give a header name. Namely there main ones which are repeated several times;
  1. =nixos-core= - Goes for core nixos modules
  2. =hm-config= - Applies for Home modules/Configs (=dotfiles/.config=)
  3. =orgmacs= - To babel for Emacs.
The idea was obtained from https://github.com/rasendubi/dotfiles, credits to him for creating elisp function for babeling repeating header names into a code block, with =noweb= support. Refer [[Orgmacs][Orgmacs-heading]] for elisp function for it.

+*Q*: Why not tangle src blocks?
*→* Its a bit redundant to tangle each block, and also I found that org babel with =noweb= is pretty quicker than tangling 100++ +src blocks.+
*Edit:* I changed back to using tangle on each block. Since headings can be =COMMENT= out, also I did not understand using el-patch and just wanted to simplify.

Learning is the key here, its easy for me (maybe you?) to forget, and I don't want to visit each wiki page for each tool for what it does, or why did I write them.
It is as simple if I just record what it does, with proper link to rich resource, and done. It would be snappy for me to remember and understand whatever I wrote after long time.

* Table of Contents
:PROPERTIES:
:TOC:      :include siblings :depth 2
:END:

:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#review-plans][Review plans]]
- [[#flake][Flake]]
  - [[#nixos][NixOS]]
  - [[#home-manager][Home-manager]]
- [[#bootloader][Bootloader]]
  - [[#harware-config][harware config]]
- [[#specs][Specs]]
  - [[#console-and-locale][console and locale]]
  - [[#time-zone][time zone]]
  - [[#useradd][useradd]]
  - [[#zramswap][zramswap]]
  - [[#sleep][sleep]]
- [[#networking][Networking]]
  - [[#networking-services][networking-services]]
  - [[#systemd-nm][systemd-nm]]
  - [[#tramp][tramp]]
- [[#security][Security]]
- [[#services][Services]]
  - [[#android-file-transfer][android file transfer]]
  - [[#logind][logind]]
  - [[#fingerprint][Fingerprint]]
  - [[#thermal][thermal]]
  - [[#powermanagement][powerManagement]]
  - [[#drive-access][drive access]]
  - [[#seatd][seatd]]
  - [[#gpg-agent][gpg-agent]]
  - [[#wlsunset][wlsunset]]
  - [[#syncthing][Syncthing]]
  - [[#kdeconnect][kdeConnect]]
- [[#environment][Environment]]
  - [[#env-vars][Env-Vars]]
  - [[#xdg-portal][xdg portal]]
  - [[#nix][Nix]]
- [[#emacsos][EmacsOS]]
  - [[#early-init][Early-Init]]
  - [[#init][Init]]
- [[#development][Development]]
  - [[#documentation][Documentation]]
  - [[#git][Git]]
  - [[#direnv][Direnv]]
  - [[#terminal][Terminal]]
  - [[#editor][Editor]]
  - [[#languages][Languages]]
  - [[#devmacs][devMacs]]
- [[#reading][Reading]]
  - [[#pdf-reader][Pdf Reader]]
  - [[#novel][Novel]]
  - [[#texinfo][Texinfo]]
  - [[#rss][Rss]]
  - [[#dictionary][Dictionary]]
- [[#media][Media]]
  - [[#browser][Browser]]
  - [[#musicvideo][Music/Video]]
  - [[#image-viewer][Image viewer]]
  - [[#application][Application]]
  - [[#bluetooth][bluetooth]]
- [[#appearance][Appearance]]
  - [[#wayland][Wayland]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#olivetti][Olivetti]]
  - [[#status-barmode-line][Status bar/Mode-line]]
  - [[#dashboard][Dashboard]]
- [[#shell][Shell]]
  - [[#cli][CLI]]
  - [[#zsh][Zsh]]
  - [[#cli-packages][cli-packages]]
  - [[#starship][starship]]
- [[#programs][Programs]]
  - [[#downloadmanager][DownloadManager]]
  - [[#notifications][Notifications]]
  - [[#games][games]]
  - [[#launcher][Launcher]]
  - [[#home-pkgs][home-pkgs]]
- [[#note-taking][Note taking]]
  - [[#org][Org]]
  - [[#markdown][Markdown]]
  - [[#spell][Spell]]
  - [[#denote][Denote]]
:END:

* Review Plans [2/4]
- [ ] Try =nbfc-linux= to control fan (=thermald= is controlling thermals well tho).
- [ ] Revisit and add more doc for forgotten once.
- [X] Manage =tempel= templates with =:noweb= reference?
  - Like include all mode specific templates in single =custom.eld= file.
  - Split and maintain it as language specific emacs-lisp data files.
- [X] Why use =el-patches= and all?
  - Simply split the block and tangle to each file, so you have it as modular config as well.
  - Best of both world!
  - Not as modular config for now, no use too.
* Flake
+ Nobody can give correct explanation on flakes, in simple way its a nix way to pin the version/revision of channel or VC and working with it.
+ Could be future, but things are not sorted out that well.
+ I use four inputs:
  1. Nixpkgs - Ocean of packages and modules.
  2. Hosts - To block various domains.
  3. Nix-index - To extract nixpkgs db, and locate package/path.
  4. Home-Manager - to manager user/home modules.
+ A good resource to refer: https://nixos-and-flakes.thiscute.world/nixos-with-flakes/nixos-with-flakes-enabled
#+begin_src nix :tangle flake.nix
#
# This file is auto-generated from "README.org"
#

{
  description = "Nix Organized with Emacs";

  inputs = {

    # Change it to stable, if you want stable channel (23.05)
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

    # For Adblocking and making internet usable
    hosts.url = "github:StevenBlack/hosts";

    # nix index to locate package/path
    nix-index-db = {
      url = "github:nix-community/nix-index-database";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Home to manage all user configs
    # You can you use normal config files,
    # just use an org heading and create block and tangle it directly to ~/.config/tool/file path.
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

  };

  outputs = {nixpkgs, ...}@inputs:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.x86_64-linux;

      vars = {
        username = "idlip";
        editor = "emacs";
      };

    in {

      devShells.x86_64-linux.default = pkgs.mkShell {
        packages = with pkgs; [
          alejandra deadnix git statix
        ];
        name = "dots";
        DIRENV_LOG_FORMAT = "";
      };

      nixosConfigurations = {
        gdk = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules =
            [
              ./gdk/core.nix
              inputs.hosts.nixosModule
              inputs.home-manager.nixosModules.home-manager
              <<nixos-hm>>
            ];
          specialArgs = {
            inherit inputs;
            inherit vars system pkgs;
          };
        };
      };
    };
}
#+end_src
** NixOS
- Main os level system configuration, a.k.a I'd like to call it as =nixos-core=
#+begin_src nix :tangle gdk/core.nix
{ config, lib, pkgs, inputs, modulesPath, vars, ...}:
{
  # WARNING : This file was generated by d-setup.org
  # DO NOT MODIFY THIS FILE!
  # Any changes made here will be overwritten.

  imports = [

#+end_src
** Home-manager
- HM as nixos module, so ~nixos-rebuild~ incorporates HM config as well.
#+name: nixos-hm
#+begin_src nix
{
  home-manager = {
    useUserPackages = true;
    useGlobalPkgs = true;
    extraSpecialArgs = {
      inherit inputs vars;
    };
    users.${vars.username} = import ./gdk/home.nix;
  };
}
#+end_src

- HomeManager configuration gets written over here with help of org-babel =noweb=
#+begin_src nix :tangle gdk/home.nix
{pkgs, lib, config, vars, inputs, ...}:
{
  # WARNING : This file was generated by d-setup.org
  # DO NOT MODIFY THIS FILE!
  # Any changes made here will be overwritten.

  imports = [

#+end_src
* Bootloader
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  boot = {
    # Uses bleeding edge latest kernel.
    kernelPackages = pkgs.linuxPackages_latest;
    # kernelModules = [ "tcp_bbr" "acpi_call" ];

    kernel.sysctl = {
      # The Magic SysRq key is a key combo that allows users connected to the
      # system console of a Linux kernel to perform some low-level commands.
      # Disable it, since we don't need it, and is a potential security concern.
      "kernel.sysrq" = 0;

      ## TCP hardening
      # Prevent bogus ICMP errors from filling up logs.
      "net.ipv4.icmp_ignore_bogus_error_responses" = 1;
      # Reverse path filtering causes the kernel to do source validation of
      # packets received from all interfaces. This can mitigate IP spoofing.
      "net.ipv4.conf.default.rp_filter" = 1;
      "net.ipv4.conf.all.rp_filter" = 1;
      # Do not accept IP source route packets (we're not a router)
      "net.ipv4.conf.all.accept_source_route" = 0;
      "net.ipv6.conf.all.accept_source_route" = 0;
      # Don't send ICMP redirects (again, we're on a router)
      "net.ipv4.conf.all.send_redirects" = 0;
      "net.ipv4.conf.default.send_redirects" = 0;
      # Refuse ICMP redirects (MITM mitigations)
      "net.ipv4.conf.all.accept_redirects" = 0;
      "net.ipv4.conf.default.accept_redirects" = 0;
      "net.ipv4.conf.all.secure_redirects" = 0;
      "net.ipv4.conf.default.secure_redirects" = 0;
      "net.ipv6.conf.all.accept_redirects" = 0;
      "net.ipv6.conf.default.accept_redirects" = 0;
      # Protects against SYN flood attacks
      "net.ipv4.tcp_syncookies" = 1;
      # Incomplete protection again TIME-WAIT assassination
      "net.ipv4.tcp_rfc1337" = 1;

      ## TCP optimization
      # TCP Fast Open is a TCP extension that reduces network latency by packing
      # data in the sender’s initial TCP SYN. Setting 3 = enable TCP Fast Open for
      # both incoming and outgoing connections:
      "net.ipv4.tcp_fastopen" = 3;
      # Bufferbloat mitigations + slight improvement in throughput & latency
      "net.ipv4.tcp_congestion_control" = "bbr";
      "net.core.default_qdisc" = "cake";
    };

    loader = {
      # FIXME change first line if you want to use Grub
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
      timeout = 1;
    };

    supportedFilesystems = [ "ntfs" ];
    tmp.cleanOnBoot = true;
    binfmt.emulatedSystems = ["aarch64-linux"];
  };
}
#+end_src
** harware config
- certain hardware config, mostly autogenerated via ~nixos-generate-config~
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "vmd" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.kernelParams = [ "i915.force_probe=a7a0"  ];
# "intel_pstate=disable"

  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/af0bbf7a-ca6f-4823-b548-cc25c63c3d5e";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/68E2-CF64";
      fsType = "vfat";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

#+end_src

* Specs
*** console and locale
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  i18n = {
    defaultLocale = "en_US.UTF-8";
    # saves space
    supportedLocales = [
      "en_US.UTF-8/UTF-8"
      "ja_JP.UTF-8/UTF-8"
      "ro_RO.UTF-8/UTF-8"
    ];
  };

  # Sets big font for bootloader, as I have small laptop.
  # You can remove font and packages line to have default font kernel chooses.
  console = {
    earlySetup = true;
    font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
    packages = with pkgs; [ terminus_font ];
    keyMap = "us";
  };
}
#+end_src
*** time zone
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # obviously your timezone here. Have a nice day or good night sleep ;)
  # Don't waste more time on nixos lol, be healthy and have some sleep. Stay healthy!
  time = {
    timeZone = "Asia/Kolkata";
    hardwareClockInLocalTime = true;
  };
}
#+end_src
- display time in mode-line
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package time
  :ensure nil
  :defer t
  :hook
  (after-init . display-time)
  :custom
  (display-time-default-load-average nil)
  (display-time-24hr-format t)
  (display-time-format "%H:%M"))
#+end_src
*** useradd
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  users.users.${vars.username} = {
    isNormalUser = true;
    shell = pkgs.zsh;
    extraGroups = ["adbusers" "input" "libvirtd" "networkmanager" "plugdev" "transmission" "video" "wheel"];
  };
}
#+end_src
*** zramswap
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # compresses half the ram for use as swap
  zramSwap = {
    enable = true;
    memoryPercent = 50;
    algorithm = "zstd";
  };
}
#+end_src
*** sleep
- for laptop hibernation.
- Note: Hibernation wont be enabled with zramSwap.
#+name: nixos-core
#+begin_src nix :tangle no
{
  systemd.sleep.extraConfig = ''
   AllowSuspendThenHibernate=yes
   HibernateDelaySec=3600
   AllowHibernation=yes
   '';
}
#+end_src
* Networking
- block hosts from stevenBlackHosts
- setup some dns oriented settings, and enable networkManager.
- firewall with certain rules to let syncthing and kdeconnect operate as expected.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  networking = {

    # Killer feature, Its a must these days.
    # Adblocker!! It uses steven black hosts.
    stevenBlackHosts = {
      enable = true;
      blockFakenews = true;
      blockGambling = true;
      blockPorn = true;
      blockSocial = false;
    };

    # dns
    # mullvad dns
    nameservers = [ "194.242.2.5" "194.242.2.9" ];
    dhcpcd = {
      wait = "background";
      extraConfig = "noarp";
    };

    # NetworkManager replaces wpa_supplicant
    wireless.enable = false;

    networkmanager = {
      enable = true;
      unmanaged = ["docker0" "rndis0" "interface-name:ve-*" ];
      wifi.macAddress = "random";
      dns = "systemd-resolved";
      wifi.powersave = true;
    };

    # Firewall uses iptables underthehood
    # Rules are for syncthing
    firewall = rec {
      enable = true;
      # For syncthing & kdeconnect
      allowedTCPPortRanges = [ { from = 1714; to = 1764; } ];
      allowedUDPPortRanges = allowedTCPPortRanges;
      allowedTCPPorts = [8384 22000];
      allowedUDPPorts = [22000 21027];
      allowPing = false;
      logReversePathDrops = true;
    };

    nat = { # for container or vm
      enable = false;
      internalInterfaces = ["ve-+"];
      externalInterface = "wlp0s20f3";
      # Lazy IPv6 connectivity for the container
      enableIPv6 = true;
    };

  };
}
#+end_src
*** networking-services
- networking oriented services.
- enable openssh for ssh access
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  services = {
    # network discovery, mDNS
    avahi = {
      enable = true;
      nssmdns = true;
      publish = {
        enable = true;
        domain = true;
        userServices = true;
      };
    };

    openssh = {
      enable = true;
      settings.UseDns = true;
    };

    # DNS resolver
    resolved = {
      enable = true;
      dnssec = "false";
      fallbackDns = [ "194.242.2.5" "194.242.2.9" ];
    };

    dnscrypt-proxy2 = {
      enable = true;
      settings = {
        ipv6_servers = true;
        require_dnssec = true;

        sources.public-resolvers = {
          urls = [
            "https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md"
            "https://download.dnscrypt.info/resolvers-list/v3/public-resolvers.md"
          ];
          cache_file = "/var/lib/dnscrypt-proxy2/public-resolvers.md";
          minisign_key = "RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3";
        };
      };
    };

  };

}
#+end_src
*** systemd-nm
- systemd need not wait for network to check online.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # Don't wait for network startup
  systemd = {
    services = {
      # speed up boot
      NetworkManager-wait-online.enable = false;
    };
  };
}
#+end_src
*** tramp
- Transparent remote (file) access, multiple protocol
- some of the configs are suggestions from =drivish= readme.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package tramp
  :ensure nil
  :defer t
  :config
  (put 'temporary-file-directory 'standard-value `(,temporary-file-directory))
  :custom
  (tramp-backup-directory-alist backup-directory-alist)
  (tramp-default-method "ssh")
  (tramp-default-proxies-alist nil)

  ;; Enable full-featured Dirvish over TRAMP on certain connections
  ;; https://www.gnu.org/software/tramp/#Improving-performance-of-asynchronous-remote-processes-1.
  (add-to-list 'tramp-connection-properties
	           (list (regexp-quote "/ssh:YOUR_HOSTNAME:")
		             "direct-async-process" t))

  (tramp-verbose 0)
  (tramp-chunksize 2000)
  (tramp-use-ssh-controlmaster-options nil))
#+end_src
* Security
- some security copied from others config.
- =doas= is minimal replacement for sudo, to be very minimal, just give me root access that's it.
- TODO notes on this.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # this makes our system more secure
  # note that it might break some stuff, eg webcam

  security = {
    protectKernelImage = true;
    lockKernelModules = false;
    rtkit.enable = true;
    polkit.enable = true;

    # required for lockscreens
    # also for finger print
    pam = {
      services.gtklock = {
        text = "auth include login";
      };
    };

    doas = {
      enable = true;
      extraRules = [{
        users = [ "${vars.username}" ];
        keepEnv = true;
        persist = true;
      }];
    };

    sudo.enable = false;
  };
}
#+end_src
* Services
- Utilities that run as service.
- Might include systemd service as well.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  services = {

    dbus = {
      packages = with pkgs; [dconf gcr udisks2];
      enable = true;
    };

    # for minimal journal logs
    journald.extraConfig = ''
      SystemMaxUse=50M
      RuntimeMaxUse=10M
    '';

    # This makes the user to autologin in all tty
    # Depends on you if you want login manager or prefer entering password manually
    # getty.autologinUser = "${vars.username}";

    atd.enable = true; # reminder tool, like @ 2:30 exec this
    fstrim.enable = true; # file system trim
    upower.enable = true; # power utility
  };
}
#+end_src
*** android file transfer
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # For android file transfer via usb, or better could use KDE connect
  services.gvfs.enable = true;
}
#+end_src
*** logind
- Suspends with press on power button. (default was to poweroff; why??)
- note: hibernation does not work with zramswap
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # For Laptop, make lid close and power buttom click to suspend
  services.logind = {
    lidSwitch = "suspend-then-hibernate";
    lidSwitchExternalPower = "lock";
    extraConfig = ''
        HandlePowerKey=suspend-then-hibernate
        HibernateDelaySec=3600
      '';
  };
}
#+end_src

*** Fingerprint
- Support for fingerprint work legit on my machine. Just these 2 lines, and yes I login by TTY with my FP.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # for fingerprint
  services.fprintd = {
    enable = true;
    package = pkgs.fprintd;
  };

}
#+end_src
*** thermal
- Helps to control Intel cpu thermal very well!
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # for intel cpu to control temp
  services.thermald.enable = true;
}
#+end_src
*** powerManagement
- laptop efficient power management
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  powerManagement = {
    enable = true;
    powertop.enable = true;
  };
}
#+end_src
**** tlp
- works like charm for 13th gen, better than =autocpu-freq=.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  services = {
    tlp = {
      enable = true;
      settings = {
        CPU_SCALING_GOVERNOR_ON_AC = "balance_performance";
        CPU_SCALING_GOVERNOR_ON_BAT = "powersave";

        CPU_ENERGY_PERF_POLICY_ON_BAT = "balance_power";
        CPU_ENERGY_PERF_POLICY_ON_AC = "balance_performance";

        USB_AUTOSUSPEND = 1;
        DEVICES_TO_DISABLE_ON_STARTUP = "bluetooth";
        DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE = "bluetooth";

        CPU_BOOST_ON_AC = 0;
        CPU_BOOST_ON_BAT = 0;
        CPU_HWP_DYN_BOOST_ON_AC = 1;
        CPU_HWP_DYN_BOOST_ON_BAT = 0;

        CPU_MIN_PERF_ON_AC = 0;
        CPU_MAX_PERF_ON_AC = 70;
        CPU_MIN_PERF_ON_BAT = 0;
        CPU_MAX_PERF_ON_BAT = 30;
      };
    };
  };
}
#+end_src
- Display battery in emacs
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package battery
  :ensure nil
  :hook
  (after-init . display-battery-mode)
  :custom
  ;; better to keep charge between 40-80
  (battery-load-low '40)
  (battery-load-critical '29))
#+end_src

*** drive access
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  services = {
    # To mount drives with `udiskctl` command
    udisks2.enable = true;
    printing.enable = true;
  };
}
#+end_src
*** seatd
- idk what it does, maybe wayland needs it?
#+name: nixos-core
#+begin_src nix :tangle no
{
  systemd.services = {
    seatd = {
      enable = true;
      description = "Seat management daemon";
      script = "${pkgs.seatd}/bin/seatd -g wheel";
      serviceConfig = {
        Type = "simple";
        Restart = "always";
        RestartSec = "1";
      };
      wantedBy = ["multi-user.target"];
    };
  };

}
#+end_src
*** gpg-agent
- gpg agent for polkit, and pinentry?
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  services = {
    gpg-agent = {
      enable = true;
      enableSshSupport = true;
      enableZshIntegration = true;
      pinentryFlavor = "gnome3";
    };
  };
}
#+end_src

*** wlsunset
- replacing redshift for wayland. protecting from blue light during evenings
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  services= {
    wlsunset = {
      enable = true;
      latitude = "19.0";
      longitude = "72.0";
      temperature.day = 6500;
      temperature.night = 4000;
      systemdTarget = "graphical-session.target";
    };
  };
}
#+end_src

*** Syncthing
- very handy to sync in local network.
- Mainly use it for syncing important docs, notes, and elfeed (rss reading).
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  services.syncthing = {
    enable = true;
    user = "${vars.username}";
    configDir = "/home/${vars.username}/.config/syncthing";
    dataDir = "/home/${vars.username}/.local/share/syncthing";
    overrideDevices = true;     # overrides any devices added or deleted through the WebUI
    overrideFolders = true;     # overrides any folders added or deleted through the WebUI
    settings = {
      devices = {
        "realme" = { id = "CEV3U3M-EJFLUJ3-UXFBEPG-KHX5EVK-3MSYH2W-BRNZEDH-TVJ4QWZ-X3G2CAW"; };
        #"device2" = { id = "DEVICE-ID-GOES-HERE"; };
      };
      folders = {
        "sync" = {
	        path = "~/d-sync";
	        devices = [ "realme" ];
        };
        "emacs" = {
	        path = "~/d-git/d-nix";
	        devices = [ "realme" ];
        };
        "theme" = {
	        path = "~/d-git/d-theme";
	        devices = [ "realme" ];
        };
        "site" = {
	        path = "~/d-git/d-site";
	        devices = [ "realme" ];
        };
      };
    };
  };
}
#+end_src
*** kdeConnect
- Handy to have, but syncthing can do the job as well.
- Note: Remote input does not work on wayland (wlr) yet. Sending files, sms, phone ring works.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  services.kdeconnect.enable = true;
}
#+end_src
* Environment
** Env-Vars
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # enable zsh autocompletion for system packages (systemd, etc)
  environment = {
    pathsToLink = ["/share/zsh"];
    variables = {
      EDITOR = "emacsclient -nw -a nvim";
      BROWSER = "d-stuff";
      NIXOS_OZONE_WL = "1";
    };
    systemPackages = with pkgs; [
      gitFull
      (writeScriptBin "sudo" ''exec doas "$@"'')
    ];
  };
}
#+end_src

** xdg portal
- To use hyprland xdg portal for screen sharing and other fixes on wayland.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  xdg.portal = {
    enable = true;
    extraPortals = [ pkgs.xdg-desktop-portal-gtk pkgs.xdg-desktop-portal-hyprland ];
    configPackages = [ pkgs.xdg-desktop-portal-hyprland ]; # needed from 23.11
  };
}
#+end_src

*** xdg user config
- xdg standard to maintain desktop.
- The directories, and support.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  xdg = {
    enable = true;
    cacheHome = config.home.homeDirectory + "/.local/cache";

    mimeApps = let
      browser = ["d-stuff.desktop"];
    in {
      enable = true;

      defaultApplications = {
        "application/x-extension-htm" = browser;
        "application/x-extension-html" = browser;
        "application/x-extension-shtml" = browser;
        "application/x-extension-xht" = browser;
        "application/x-extension-xhtml" = browser;
        "application/xhtml+xml" = browser;
        "text/html" = browser;
        "x-scheme-handler/about" = browser;
        "x-scheme-handler/chrome" = ["chromium-browser.desktop"];
        "x-scheme-handler/ftp" = browser;
        "x-scheme-handler/http" = browser;
        "x-scheme-handler/https" = browser;
        "x-scheme-handler/unknown" = browser;

        "audio/*" = ["mpv.desktop"];
        "video/*" = ["mpv.dekstop"];
        "image/*" = ["imv.desktop"];
        "application/json" = browser;
        "application/pdf" = ["sioyek.desktop"];
        "x-scheme-handler/magnet" = ["d-stuff.desktop"];
        "application/epub+zip" = ["sioyek.desktop"];
        "application/zip" = ["sioyek.desktop"];
        "application/x.bittorrent" = ["d-stuff.desktop"];
      };

      associations.added = {
        "x-scheme-handler/magnet" = ["d-stuff.desktop"];
      };
    };

    userDirs = {
      enable = true;
      createDirectories = false;
      documents =  "${config.home.homeDirectory}/docs";
      download = "${config.home.homeDirectory}/dloads";
      videos = "${config.home.homeDirectory}/vids";
      music = "${config.home.homeDirectory}/music";
      pictures = "${config.home.homeDirectory}/pics";
      extraConfig = {
        xdg_screenshots_dir = "${config.xdg.userDirs.pictures}/sshots";
      };
    };

  };

  xdg.dataFile."applications/d-stuff.desktop".text = ''
  [desktop entry]
  type=application
  name=stuff handler
  exec=d-stuff %u
  '';

}
#+end_src
** Nix
*** flake-channel
- to inherit the flake-channels from out built config only.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  environment = {
    # set channels (backwards compatibility)
    etc = {
      "nix/flake-channels/nixpkgs".source = inputs.nixpkgs;
      "nix/flake-channels/home-manager".source = inputs.home-manager;
    };
  };
}
#+end_src
*** nixpkgs tweaks
- if needed for Unfree pkgs like fonts.
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  nixpkgs = {
    config = {
      allowUnfree = false;
      allowBroken = false;
    };
  };
}
#+end_src
*** nix conf
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # Collect garbage and delete generation every 7 day. Will help to get some storage space.
  # Better to atleast keep it for few days, as you do major update (unstable), if something breaks you can roll back.
  nix = {
    optimise.automatic = true;
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };

    # Make builds run with low priority so my system stays responsive
    daemonCPUSchedPolicy = "idle";
    daemonIOSchedClass = "idle";

    # pin the registry to avoid downloading and evaling a new nixpkgs version every time
    registry = lib.mapAttrs (_: value: { flake = value; }) inputs;

    # This will additionally add your inputs to the system's legacy channels
    # Making legacy nix commands consistent as well, awesome!
    nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;

    settings = {
      flake-registry = "/etc/nix/registry.json";
      auto-optimise-store = true;
      builders-use-substitutes = true;
      # allow sudo users to mark the following values as trusted
      allowed-users = ["@wheel"];
      # only allow sudo users to manage the nix store
      trusted-users = ["@wheel" "root"];
      keep-outputs = true;
      warn-dirty = false;
      keep-derivations = true;
      sandbox = true;
      max-jobs = "auto";
      # continue building derivations if one fails
      keep-going = true;
      log-lines = 20;
      extra-experimental-features = ["flakes" "nix-command" ];

      # use binary cache, its not gentoo
      substituters = [
        "https://nix-community.cachix.org"
      ];

      trusted-public-keys = [
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
      ];
    };
  };
}
#+end_src
- system upgrade: to disable autoupgrading system
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  system.autoUpgrade.enable = false;
}
#+end_src

*** nix-index
- to locate packages and path from massive nixpkgs index.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  imports = [
    inputs.nix-index-db.hmModules.nix-index
  ];
  programs.nix-index.enable = true;
}
#+end_src
* EmacsOS
- The ever growing environment, ecosystem that is tailored to the user's needs.
- Power bestowed for the best, and to make the user the best!
** Early-Init
- Emacs 27.0 introduced an early-init file. It allows customization before package and UI initialization.
- Something to initiate early before anything.
- =lexical= is like local scope ig, using ~let~ keyword.
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/early-init.el
;;; early-init.el --- Emacs 27+ pre-initialisation config -*- lexical-binding: t; -*-

;;; Commentary:

;; Emacs 27+ loads this file before (normally) calling
;; `package-initialize'.  We use this file to suppress that automatic
;; behaviour so that startup is consistent across Emacs versions.

;; Tangled File, no need to edit !!!

;;; Code:

#+end_src
+ Minimize warning from native-comp
#+name: early-init
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/early-init.el
(custom-set-variables
 '(native-comp-async-report-warnings-errors nil)
 '(native-comp-jit-compilation nil))
#+end_src
+ remove tool-bar, menu-bar, scroll-bar. Although menu-bar is very helpful.
#+name: early-init
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/early-init.el
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq frame-inhibit-implied-resize t)
#+end_src
+ Constant variable to check if on Android.
+ Yes, Emacs official App works very well on android. I use it regularly, and this config is compatible with it.
+ In some blocks I use ~if~ and ~unless~ condition for specific choices, for explicit andoid variables see [[android][Android]]
+ For un/Offical builds: [[https://sourceforge.net/projects/android-ports-for-gnu-emacs/]]
#+name: early-init
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/early-init.el
(defconst d/on-droid (eq system-type 'android))
#+end_src
+ Andoird, Gets termux path for executing tools and installing packages.
+ It links termux directory to emacs, thus we can leverage the power of unix on android.
#+name: early-init
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/early-init.el
;; Emacs (gui app) is also amazing in android
;; https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/termux/
(when d/on-droid
  (setenv "PATH" (format "%s:%s" "/data/data/com.termux/files/usr/bin"
		                 (getenv "PATH")))
  (setenv "LD_LIBRARY_PATH" (format "%s:%s"
				                    "/data/data/com.termux/files/usr/lib"
				                    (getenv "LD_LIBRARY_PATH")))
  (push "/data/data/com.termux/files/usr/bin" exec-path))

#+end_src
+ EOF of early-init
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/early-init.el
(provide 'early-init)
;;; early-init.el ends here
#+end_src
** Init
- To initialize the environment.
#+begin_src emacs-lisp :tangle no
;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
;;; Commentary:

;; This file loads the Tangled org file.
;; Dont mind the order, or no newlines.
;; You can read the d-setup.org literate config file.

;;; Code:

;; (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

;; Bootstrap config

<<orgmacs>>

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:

(provide 'init)
;;; init.el ends here
#+end_src
- Set a file for custom variables.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(setq custom-file (locate-user-emacs-file "custom.el"))
(setq nixos-treesit-path treesit-extra-load-path) ;; FIXME remove after next update
#+end_src
*** use-package
- setup =package.el=
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; Initialize package sources
(require 'package)

(add-to-list 'package-archives '( "melpa" . "https://melpa.org/packages/"))

(unless (bound-and-true-p package--initialized)
  (customize-set-variable 'package-enable-at-startup nil)
  (package-initialize))

(unless package-archive-contents
  (package-refresh-contents))
#+end_src
- Use-package macro for the tidy and better emacs configuration.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(eval-and-compile
  (customize-set-variable 'use-package-verbose (not (bound-and-true-p byte-compile-current-file))))

(put 'use-package 'lisp-indent-function 1)

(use-package use-package
  :ensure nil
  :custom
  (use-package-verbose nil)
  (use-package-always-ensure nil)
  (use-package-always-defer t)
  (use-package-expand-minimally t)
  (use-package-enable-imenu-support t))
#+end_src
*** Core-Tweaks
+ Sane default, to make vanilla experience suitable for me, for betterment.
+ Some of the tweak should be self-explanatory, or else just hop on it and do =C-h o=.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package emacs
  :ensure nil
  :bind
  ("C-z" . nil)
  ("C-x C-z" . nil)
  ;; panes
  ("M-o" . other-window)
  ("C-<tab>" . other-window)
  ("C-x C-k" . d/kill-buffer)
  ("C-x n n" . d/narrow-or-widen-dwim)

  (:map mode-specific-map
        ("C-g" . minibuffer-keyboard-quit))

  :init
  (put 'narrow-to-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (fset 'x-popup-menu #'ignore)
  :custom
  (scroll-step 1)
  (inhibit-x-resources t)
  (inhibit-startup-screen t "Don't show splash screen")
  (inhibit-startup-buffer-menu t)

  (initial-major-mode 'org-mode)
  (initial-scratch-message
   "#+title: Scratch Buffer\n\nFor random thoughts.\n\n")

  (use-short-answers t)
  (use-dialog-box t "Disable dialog boxes")
  (x-gtk-use-system-tooltips nil)
  (use-file-dialog nil)
  (enable-recursive-minibuffers t "Allow minibuffer commands in the minibuffer")
  (indent-tabs-mode nil "Spaces!")
  (tab-always-indent 'complete)
  (tab-width 4)
  (reb-re-syntax 'string)
  (debug-on-quit nil)

  (history-delete-duplicates t)
  ;; window/pane
  (recenter-positions '(top middle bottom))
  ;; pane
  (frame-resize-pixelwise t)
  (frame-inhibit-implied-resize t)

  (sentence-end-double-space nil)
  (sentence-end "[.?!] ")

  ;; select
  (selection-coding-system 'utf-8)
  (x-select-request-type 'text/plain\;charset=utf-8)
  (select-enable-clipboard t "Use the clipboard")

  :config
  (delete-selection-mode)

  ;; Terminal emacs doesn't have it
  (when (fboundp 'set-fontset-font)
    ;; a workaround for old charsets
    (set-fontset-font t 'unicode "Noto Color Emoji" nil 'append)
    )

  (with-current-buffer "*scratch*"
	(emacs-lock-mode 'kill))
  (prefer-coding-system 'utf-8)
  ;; Uppercase is same as lowercase
  (define-coding-system-alias 'UTF-8 'utf-8)
  (modify-all-frames-parameters '((alpha-background . 90)))

  ;; balance windows when split (https://zck.org/balance-emacs-windows)
  (seq-doseq (fn (list #'split-window #'delete-window))
    (advice-add fn :after #'(lambda (&rest args) (balance-windows))))
  )
#+end_src
- Functions to enhance core default behavior
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun window-focus-mode ()
  "Make the window focused, it can toggle in and out."
  (interactive)
  (if (= 1 (length (window-list)))
	  (jump-to-register '_)
    (progn
	  (set-register '_ (list (current-window-configuration)))
	  (delete-other-windows))))
#+end_src
- To toggle narrow or widen region or heading in DWIM way.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/narrow-or-widen-dwim ()
  "If the buffer is narrowed, it widens. Otherwise,
it narrows to region, or Org subtree."
  (interactive)
  (cond ((buffer-narrowed-p) (widen))
        ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
        ((eq major-mode 'org-mode) (org-narrow-to-subtree))
        (t (error "Please select a region to narrow to"))))
#+end_src
- Kill buffer and window, also clear cache if quitting doc-view or pdf-view
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/kill-buffer ()
  "Clear the image cache (to release memory) after killing a pdf buffer."
  (interactive)
  (if (one-window-p) (kill-this-buffer)
    (kill-buffer-and-window))
  (when (derived-mode-p 'doc-view-mode) (progn (clear-image-cache) (doc-view-clear-cache)))
  (when (derived-mode-p 'pdf-view-mode) (progn ((clear-image-cache) (pdf-cache-clear-data)))))
#+end_src
- Clipboard support in wayland using ~wl-clipboard~, especially for terminal use case.
  - Credits to @yorichvP for github gist.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; credit: yorickvP on Github
(setq wl-copy-process nil)

(defun wl-copy (text)
  (setq wl-copy-process (make-process :name "wl-copy"
                                      :buffer nil
                                      :command '("wl-copy" "-f" "-n")
                                      :connection-type 'pipe))
  (process-send-string wl-copy-process text)
  (process-send-eof wl-copy-process))

(defun wl-paste ()
  (if (and wl-copy-process (process-live-p wl-copy-process))
      nil ; should return nil if we're the current paste owner
    (shell-command-to-string "wl-paste -n | tr -d \r")))

(unless d/on-droid
  (setq interprogram-cut-function 'wl-copy)
  (setq interprogram-paste-function 'wl-paste))

#+end_src
*** Simple
- Bag of simple basic commands, to enhance.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package saveplace
  :ensure nil
  :hook
  (after-init . save-place-mode))

(use-package simple
  :ensure nil
  :defer 0.1
  :bind
  ("<f7>" . scratch-buffer)
  ("<escape>" . keyboard-quit)
  ("M-^" . d/join-lines)
  ("M-z" . zap-up-to-char)

  ("M-%" . query-replace-regexp)

  ("M-c" . d/flex)
  ("M-l" . downcase-dwim)

  ("M-@" . d/mark-word)
  ("M-h" . d/mark-paragraph)

  :custom
  (kill-ring-max 30000)
  (column-number-mode 1)
  (kill-do-not-save-duplicates t)

  :config
  (global-visual-line-mode 1))
#+end_src
- DWIM way of joining lines with prefix argument.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/join-lines (specify-separator)
  "Join lines in the active region by a separator, by default a comma.
Specify the separator by typing C-u before executing this command."
  (interactive "P")
  (require 's)
  (unless (region-active-p)
    (message "select a region of lines first."))
  (let*
      ((separator (if (not specify-separator) ","
                    (read-string "Separator: ")))
       (text (buffer-substring-no-properties
              (region-beginning)
              (region-end)))
       (lines (split-string text "\n"))
       (result (s-join separator lines)))
    (delete-region (region-beginning) (region-end))
    (insert result)))
#+end_src
- Function to increment number at point.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; taken from an planet emacs rss feed post
;; Stolen from the wiki somewhere
(defun increment-number-at-point ()
  "Increment the number at point."
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
#+end_src
- DWIM like to increment, upcase, flex.
- Credits to a emacs post from planets emacs.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/flex ()
  "Perform smart flexing at point.

E.g. capitalize or decapitalize the next word, increment number at point."
  (interactive)
  (let ((case-fold-search nil))
    (call-interactively
     (cond
      ((looking-at "[[:space:]]") (forward-char 1) (d/flex))
      ((looking-at "[0-9]+") #'increment-number-at-point)
      ((looking-at "[[:lower:]]") #'capitalize-word)
      ((looking-at "==") (delete-char 1) (insert "!") (forward-char 2))
      ((looking-at "!=") (delete-char 1) (insert "=") (forward-char 2))
      ((looking-at "+") (delete-char 1) (insert "-") (forward-char 1))
      ((looking-at "-") (delete-char 1) (insert "+") (forward-char 1))
      ((looking-at "<=") (delete-char 2) (insert ">=") (forward-char 2))
      ((looking-at ">=") (delete-char 2) (insert "<=") (forward-char 2))
      ((looking-at "<") (delete-char 1) (insert ">") (forward-char 1))
      ((looking-at ">") (delete-char 1) (insert "<") (forward-char 1))
      (t #'downcase-word)))))
#+end_src
- Display line numbers for prog-mode, in relative numbering.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package display-line-numbers
  :ensure nil
  :hook (prog-mode)
  :custom
  (display-line-numbers-type 'relative))
#+end_src
- Function to improve marking paragraph and word as expected.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; credits to
;; https://emacs.dyerdwelling.family/emacs/20231209092556-emacs--redefining-mark-paragraph-and-mark-word/
(defun d/mark-paragraph ()
  "redefinition of mark-paragraph"
  (interactive)
  (forward-char)
  (backward-paragraph)
  (push-mark)
  (forward-paragraph)
  (setq mark-active t))

(defun d/mark-word ()
  "redefinition of mark-word"
  (interactive)
  (if (not (looking-at "\\<"))
      (backward-word))
  (push-mark)
  (forward-word)
  (setq mark-active t))
#+end_src
*** File
**** Tidy files
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package files
  :ensure nil
  :hook
  (before-save . delete-trailing-whitespace)
  :bind ("<f5>" . d/refresh-buffer)
  :custom
  (require-final-newline t)
  (save-silently t)
  (confirm-kill-emacs 'yes-or-no-p)
  ;; backup settings
  (backup-by-copying t)
  (custom-file (expand-file-name "custom.el" user-emacs-directory))
  (backup-directory-alist
   `((".*" . ,(no-littering-expand-var-file-name "backup/"))))
  (auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (delete-old-versions t)
  (kept-new-versions 6)
  (kept-old-versions 2)
  (version-control t)
  (create-lockfiles nil))
#+end_src
- Refresh or revert the buffer without asking for confirmation.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/refresh-buffer ()
  "Revert buffer without confirmation."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))
#+end_src
**** Undo
- Another good part is having persistent undo with full extensibility.
- undo-fu-session write undo states to file, so persist across sessions.
- vundo is to visualize undo nodes in a horizontal tree.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package undo-fu-session
  :ensure nil
  :functions (undo-fu-session-global-mode)
  :defines (undo-fu-session-incompatible-files)

  :init (undo-fu-session-global-mode)
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))

(use-package vundo
  :ensure nil
  :defer t
  :bind
  ("C-x u" . vundo)
  ("C-z" . undo-only)
  ("C-S-z" . undo-redo)
  ("C-M-r" . undo-redo)

  :custom
  (vundo-compact-display t)
  (vundo-glyph-alist vundo-unicode-symbols)
  (vundo-window-max-height 5))
#+end_src
**** backup
- =vc-backup= is such a necessary tool, that diff the states of previous save to current save.
- It acts on both VC files and as well as file under no VC.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package vc-backup
  ;; to have auto VC track of files without in git
  ;; C-x v =
  :demand t
  :custom
  (vc-make-backup-files t)
  (vc-follow-symlinks t))
#+end_src
**** File History
- savehist of minibuffer candidates
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package savehist
  :ensure nil
  :defer 2
  :init
  (savehist-mode)
  :custom
  (savehist-additional-variables '(kill-ring search-ring regexp-search-ring)))
#+end_src
- to record recently opened files. Useful to jump in quick
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package recentf
  :ensure nil
  :demand t
  :custom
  (recentf-auto-cleanup 30)
  :config
  (recentf-mode)
  (run-with-idle-timer 30 t 'recentf-save-list))
#+end_src
**** no-littering
- To keep the emacs user directory clean and with less noise.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package no-littering
  :demand t
  :ensure t
  :functions (recentf-expand-file-name)

  :defines
  (no-littering-var-directory
   no-littering-etc-directory)
  :custom
  (no-littering-etc-directory (expand-file-name "config/" user-emacs-directory))
  (no-littering-var-directory (expand-file-name "data/" user-emacs-directory))
  :config
  ;; remove it after next rolling update
  ;; due to treesit var
  (setq treesit-extra-load-path nixos-treesit-path)
  (add-to-list 'recentf-exclude
               (recentf-expand-file-name no-littering-var-directory))
  (add-to-list 'recentf-exclude
               (recentf-expand-file-name no-littering-etc-directory)))
#+end_src
**** Dired
- The directory editor
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package dired
  :defer t
  :init (file-name-shadow-mode 1)
  :ensure nil
  :hook
  (dired-mode . dired-hide-details-mode)
  (dired-mode . dired-omit-mode)
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump)
         ("C-c f f" . window-focus-mode)
         ("C-c f e" . (lambda () (interactive) (find-file "~/.config/emacs/lisp/")))
         ("C-c f s" . (lambda () (interactive) (find-file "~/d-git/d-nix/")))
         ("C-c f m" . (lambda () (interactive) (find-file "~/d-git/d-nix/README.org"))))
  (:map dired-mode-map
        ("q" . kill-buffer-and-window)
        ("j" . dired-next-line)
        ("k" . dired-previous-line)
        ("l" . dired-find-file)
        ("h" . dired-up-directory)
        ("b" . embark-act))

  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (delete-by-moving-to-trash t)
  (dired-dwim-target t))
#+end_src
- dired-x for some more functionality.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package dired-x
  :ensure nil
  :custom
  ;; Make dired-omit-mode hide all "dotfiles"
  (dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|^\\..*$"))
#+end_src
***** Async
- For asynchronous dired operations. To not jam emacs session for copy pasting files, and etc.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package async
  :unless d/on-droid
  :demand t
  :config
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1)
  (async-bytecomp-package-mode 1))
#+end_src
**** Dirvish
- Batteries packed for dired.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package dirvish
  :unless d/on-droid
  :functions
  (dirvish-override-dired-mode
   dirvish-subtree-toggle-or-open
   dired-mouse-drag-files
   dired-mouse-find-file
   dired-mouse-find-file-other-window)
  :defines (dirvish-mode-map)

  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries
   '(("h" "~/"                          "Home")
     ("d" "~/dloads/"                "Downloads")
     ;; ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))

  ;; (dirvish-peek-mode) ; Preview files in minibuffer
  ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
  (dirvish-mode-line-format
   '(:left (sort symlink) :right (omit yank index)))
  (dirvish-attributes
   '(file-time file-size collapse subtree-state vc-state git-msg))
  (delete-by-moving-to-trash t)
  (dired-listing-switches
   "-l --almost-all --human-readable --group-directories-first --no-group")
  (dirvish-hide-cursor nil)

  (dirvish-use-header-line nil)
  (dirvish-use-mode-line nil)

  ;; with emacs29
  (dired-mouse-drag-files t)
  (mouse-drag-and-drop-region-cross-program t)
  (mouse-1-click-follows-link nil)

  :bind
  (("C-c f d" . dirvish-fd)
   ("C-x C-d" . dirvish)
   ("C-c f t" . dirvish-side)
   :map dirvish-mode-map
   ("<mouse-1>" . 'dirvish-subtree-toggle-or-open)
   ("<mouse-2>" . 'dired-mouse-find-file-other-window)
   ("<mouse-3>" . 'dired-mouse-find-file)
   ("a"   . dirvish-quick-access)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("h"   . dirvish-history-jump) ; remapped `describe-mode'
   ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
   ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
   ("K"   . dired-do-kill-lines)
   ("TAB" . dirvish-subtree-toggle)
   ("M-f" . dirvish-history-go-forward)
   ("M-b" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-t" . dirvish-layout-toggle)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src
*** Completions
+ the best part of enjoying emacs, is getting the desired way of completing a text.
+ completions everywhere, that make you use emacs for everything.
**** Dabbrev
- dynamic abbrev expansion.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package dabbrev
  :ensure nil
  :commands (dabbrev-expand dabbrev-completion)
  :custom
  (dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
  (dabbrev-abbrev-skip-leading-regexp "\\$\\|\\*\\|/\\|=")
  (dabbrev-backward-only nil)
  (dabbrev-case-distinction nil)
  (dabbrev-case-fold-search t)
  (dabbrev-case-replace nil)
  (dabbrev-check-other-buffers t)
  (dabbrev-eliminate-newlines nil)
  (dabbrev-upcase-means-case-search t)
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
	     ("C-M-/" . dabbrev-expand))
  ;; Other useful Dabbrev configurations.
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

(use-package hippie-exp
  :ensure nil
  :bind
  ("M-/" . hippie-expand))
#+end_src
**** Vertico
- the flagship of minad.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package vertico
  :defines
  (vertico-map)
  :functions
  (vertico-mode )

  :bind
  (:map vertico-map
	    ("<return>" . vertico-directory-enter)
	    ("DEL" . vertico-directory-delete-char)
	    ("M-DEL" . vertico-directory-delete-word)
	    ("M-j" . vertico-quick-exit)
	    ("C-v" . vertico-scroll-up)
	    ("M-v" . vertico-scroll-down)
	    ("M-q" . d/vertico-toggle)
	    ("M-RET" . minibuffer-force-complete-and-exit)
	    ("M-TAB" . minibuffer-complete)
        ("C->"     . embark-become)
        ("C-<tab>"   . embark-act-with-completing-read)
        ("C-o"     . embark-minimal-act)
        ("C-*"     . embark-act-all)
        ("M-*"      . embark-act-all)
        ("C-c C-o" . embark-export))

  :init
  (vertico-mode)

  :custom
  (vertico-scroll-margin 5)
  (vertico-count 5)
  (vertico-resize nil)
  (vertico-cycle t)
  (completion-in-region-function
   (lambda (&rest args)
     (apply (if vertico-mode
		        #'consult-completion-in-region
	          #'completion--in-region)
	        args))))
#+end_src
- vertico-multiform: To have some forms of vertico UI. Grid, one-liner, indexed...
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package vertico-multiform
  :commands (vertico-multiform-mode)

  :init
  (vertico-multiform-mode)

  :custom
  (vertico-multiform-commands
   '(("\\`execute-extended-command" unobtrusive
      (vertico-flat-annotate . t)
      (marginalia-annotator-registry (command marginalia-annotate-command marginalia-annotate-binding builtin none)))
     (jinx-correct reverse)
     (tab-bookmark-open reverse)
     (dired-goto-file unobtrusive)
     (load-theme grid reverse)
     (org-refile reverse)
     (org-agenda-refile reverse)
     (org-capture-refile reverse)
     (consult-find reverse)
     (dired-goto-file flat)
     (consult-dir-maybe reverse)
     (consult-dir reverse)
     (consult-flymake reverse)
     (consult-history reverse)
     (consult-completion-in-region reverse)
     (consult-recoll buffer)
     (completion-at-point reverse)
     (embark-completing-read-prompter reverse)
     (embark-act-with-completing-read reverse)
     (embark-prefix-help-command reverse)
     (embark-bindings reverse)
     (consult-org-heading reverse)
     (consult-dff unobtrusive)
     (embark-find-definition reverse)
     (xref-find-definitions reverse)))

  (vertico-multiform-categories
   '((file grid reverse)
     (consult-grep buffer)
     (jinx grid (vertico-grid-annotate . 20))
     (kill-ring reverse)
     (buffer flat (vertico-cycle . t)))))
#+end_src
- mouse support in vertico
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package vertico-mouse
  :unless d/on-droid
  :init
  (vertico-mouse-mode))
#+end_src
**** Consult
- wonderful preview UI for completion popup.
- like doctor diagnosis the candidate for completion
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package consult
  :functions
  (consult-register-window
   eww-read-bookmarks
   consult--read
   consult-colors--web-list
   color-rgb-to-hex
   list-colors-duplicates)

  :defines
  (consult-buffer-sources
   eww-bookmarks
   add-unicodes
   shr-color-html-colors-alist
   d/on-droid)

  :bind
  (
   ("C-c d i" . d/insert-unicodes)
   ("C-c d c" . d/insert-colors)

   ;; C-c bindings (mode-specific-map)
   ("C-c h" . consult-history)
   ("C-c M-x" . consult-mode-command)
   ("C-c k" . consult-kmacro)
   ("C-c t t" . consult-theme)
   ;; C-x bindings (ctl-x-map)
   ("C-x M-:" . consult-complex-command)
   ("C-x M-x" . consult-mode-command)
   ("C-x b" . consult-buffer)
   ("C-x C-b" . consult-buffer)
   ("C-x 4 b" . consult-buffer-other-window)
   ("C-x 5 b" . consult-buffer-other-frame)
   ("C-x r b" . consult-bookmark)
   ("C-x p b" . consult-project-buffer)
   ;; Custom M-# bindings for fast register access
   ("M-#" . consult-register-load)
   ("M-'" . consult-register-store)
   ("C-M-#" . consult-register)
   ;; Other custom bindings
   ("M-y" . consult-yank-pop)
   ;; M-g bindings (goto-map)
   ("M-g e" . consult-compile-error)
   ("M-g f" . consult-flycheck)
   ("M-g g" . consult-goto-line)
   ("M-g M-g" . consult-goto-line)
   ("M-g o" . consult-outline)
   ("M-g m" . consult-mark)
   ("M-g k" . consult-global-mark)
   ("M-g i" . consult-imenu)
   ("M-g I" . consult-imenu-multi)
   ("M-g s" . consult-eglot-symbols)
   ;; M-s bindings (search-map)
   ("M-s d" . consult-fd)
   ("M-s D" . consult-locate)
   ("M-s g" . consult-ripgrep)
   ("M-s m" . consult-man)
   ("M-s G" . consult-git-grep)
   ("M-s r" . consult-ripgrep)
   ("M-s i" . consult-info)
   ("M-s l" . consult-line)
   ("C-s" . consult-line)
   ("M-s L" . consult-line-multi)
   ("M-s k" . consult-keep-lines)
   ("M-s u" . consult-focus-lines)
   ;; Isearch integration
   ("M-s e" . consult-isearch-history)
   :map isearch-mode-map
   ("M-e" . consult-isearch-history)
   ("M-s e" . consult-isearch-history)
   ("M-s l" . consult-line)
   ("M-s L" . consult-line-multi)
   ;; Minibuffer history
   :map minibuffer-local-map
   ("M-s" . consult-history)
   ("M-r" . consult-history))

  :hook (completion-list-mode . consult-preview-at-point-mode)

  :custom
  (register-preview-delay 0.5)
  (register-preview-function #'consult-register-format)
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
  (consult-narrow-key "<")
  (consult-ripgrep-args "rg --follow --null --line-buffered --no-ignore --color=never --max-columns=1000 --path-separator /   --smart-case --no-heading --with-filename --line-number --search-zip")

  (consult-customize
   consult-theme :preview-key '(:debounce 1.5 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  :config
  (advice-add #'register-preview :override #'consult-register-window)
  (add-to-list 'consult-buffer-sources 'consult--source-eww 'append))
#+end_src
- Function to insert and get colors list. Although built-in way of ~M-x read-color~ satisfies replacing this function.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun consult-colors--web-list nil
  "Return list of CSS colors for `d/colors-web'."
  (require 'shr-color)
  (sort (mapcar #'downcase (mapcar #'car shr-color-html-colors-alist)) #'string-lessp))

(defun d/colors-web (color)
  "Show a list of all CSS colors.\

  You can insert the name (default), or insert or kill the hexadecimal,
or RGB value of the selected color."
  (interactive
   (list (consult--read (consult-colors--web-list)
                        :prompt "Color: "
                        :require-match t
                        :category 'color
                        :history '(:input consult-colors-history)
                        )))
  (insert
   (when-let* ((rgb (color-name-to-rgb color))
               ;; Sets 2 digits per component.
               (hex (apply #'color-rgb-to-hex (append rgb '(2)))))
     hex)))
#+end_src
- function to insert emacs color list in hex value
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/insert-colors (color)
  "Show a list of all supported colors for a particular frame.\

You can insert the name (default), or insert or kill the hexadecimal
 or RGB value of the selected color."
  (interactive
   (list (consult--read (list-colors-duplicates (defined-colors))
                        :prompt "Emacs color: "
                        :require-match t
                        :category 'color
                        :history '(:input consult-colors-history)
                        )))
  (insert
   (when-let* ((rgb (color-name-to-rgb color))
               ;; Sets 2 digits per component.
               (hex (apply #'color-rgb-to-hex (append rgb '(2)))))
     hex)))
#+end_src
- function to convert color name to hex value (for web defined colors names)
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun color-name-to-hex (NAME)
  "Return hexadecimal value of color with NAME.
Return nil if NAME does not designate a valid color."
  (insert
   (when-let*
       ((rgb (color-name-to-rgb NAME))
        ;; Sets 2 digits per component.
        (hex (apply #'color-rgb-to-hex (append rgb '(2)))))
     hex)))
#+end_src
- function to insert unicodes from a file. Can be replaced by ~M-x nerd-icons-insert~
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/insert-unicodes (add-unicodes)
  "Insert unicode character (emoji/icons) from given files."
  (interactive (list add-unicodes))
  (insert
   (let* ((content
           (mapcar #'(lambda (file) (with-temp-buffer (insert-file-contents file) (split-string (buffer-string) "\n" t))) add-unicodes))
          (options (apply #'append content))
          (selected-item (completing-read "Choose Icon 󰨈: " options))
          (fields (split-string selected-item)))
     (car fields))))

(setq add-unicodes (unless d/on-droid (directory-files "~/d-git/d-bin/treasure/unicodes/" t "i")))
#+end_src
- Integrate =eww-bookmarks= into consult buffer sources.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(with-eval-after-load 'eww
  (defvar consult--source-eww
    (list
     :name     "Eww"
     :narrow   ?e
     :action   (lambda (bm)
                 (eww-browse-url (get-text-property 0 'url bm)))
     :items    (lambda ()
                 (eww-read-bookmarks)
                 (mapcar (lambda (bm)
                           (propertize
                            (format "%s (%s)"
                                    (plist-get bm :url)
                                    (plist-get bm :title))
                            'url (plist-get bm :url)))
                         eww-bookmarks)))))
#+end_src
**** Orderless
+ nice way of filtering results and candidates.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package orderless
  :demand t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles orderless basic partial-completion)))))
#+end_src
**** Embark
- For DWIM minibuffer actions. An masterpiece by @Oantolin
- Pretty OP and dope package, one of my most used and favorite package.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package embark
  :defer t

  :functions
  (embark-prefix-help-command
   embark-eldoc-first-target)

  :bind
  (("C-." . embark-act)
   ("C-;" . embark-act-all)
   ("M-." . embark-dwim)
   ("C-h B" . embark-bindings)
   (:map embark-identifier-map
         ("d" . sdcv-search-input)
         ("ch" . color-name-to-hex)
         ("cr" . color-name-to-rgb))
   (:map embark-url-map
         ("b" . browse-url-generic)
         ("e" . eww-open-in-new-buffer)
         ("h" . hnreader-comment)
         ("r" . reddigg-view-comments))
   (:map embark-file-map
         ("b" . browse-url-of-dired-file))
   (:map embark-region-map
         ("U" . webpaste-paste-buffer-or-region)))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src
- Function to open a file as =sudo= from embark action. Credits to @karthinks for code
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; credits to karthinks
(with-eval-after-load 'embark
  (defun sudo-find-file (file)
    "Open FILE as root."
    (interactive "FOpen file as root: ")
    (when (file-writable-p file)
      (find-file file)
      (user-error "File is user writeable, opening as user"))
    (find-file (if (file-remote-p file)
                   (concat "/" (file-remote-p file 'method) ":"
                           (file-remote-p file 'user) "@" (file-remote-p file 'host)
                           "|doas:root@"
                           (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                 (concat "/doas:root@localhost:" file))))
  (define-key embark-file-map (kbd "S") 'sudo-find-file))
#+end_src
- Use consult commands with embark as well.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package embark-consult
  :defer t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

**** marginalia
+ rich annotation of information for candidates.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package marginalia
  :functions
  (marginalia-mode)

  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+end_src
**** corfu
+ overlay popup
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package corfu
  :defer 1

  :defines
  (corfu-map)

  :functions
  (global-corfu-mode
   corfu-mode)

  :custom
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-cycle t)
  ;; (corfu-preview-current t)    ;; Disable current candidate preview
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-quit-no-match t)
  (corfu-auto-prefix 3)
  (corfu-auto-delay 0.4)
  (corfu-quit-at-boundary 'separator)
  (corfu-popupinfo-resize t)
  (corfu-popupinfo-hide nil)
  (corfu-preview-current 'insert)
  (corfu-popupinfo-delay 1.0)
  (corfu-history 1)
  (corfu-scroll-margin 0)

  :bind (:map corfu-map
	          ("M-SPC" . corfu-insert-separator)
	          ("TAB" . corfu-insert)
	          ("<escape>" . corfu-quit)
	          ("C-j" . corfu-next)
	          ("C-k" . corfu-previous)
	          ("M-j" . corfu-quick-insert))
  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  :init
  (global-corfu-mode))
#+end_src
+ corfu history: for corfu to remember history of selection
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package corfu-history
  :disabled
  :init
  (corfu-history-mode))
#+end_src
+ corfu popupinfo: show help or info of variable and symbols of candidate.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package corfu-popupinfo
  :unless d/on-droid
  :after corfu
  :init
  (corfu-popupinfo-mode))
#+end_src
+ corfu echo: echo mini help in echo area
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package corfu-echo
  :unless d/on-droid
  :after corfu
  :init
  (corfu-echo-mode))
(eldoc-add-command #'corfu-insert)

#+end_src
+ corfu in terminal
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(unless (display-graphic-p)
  (corfu-terminal-mode +1))
#+end_src
+ corfu in minibuffer
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun corfu-enable-always-in-minibuffer ()
  "Enable corfu in minibuffer, if vertico is not active."
  (unless (or (bound-and-true-p vertico--input)
		      (eq (current-local-map) read-passwd-map))
    (setq-local corfu-auto t
		        corfu-popupinfo-delay nil
		        corfu-auto-delay 0
		        corfu-auto-prefix 0
		        completion-styles '(orderless basic))
    (corfu-mode 1)))
;; (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

#+end_src
**** cape
+ an extension for corfu
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; Add extensions
(use-package cape
  :after corfu

  :functions
  (cape-wrap-silent
   cape-wrap-purify)
  :defines
  (cape-dict-file)

  :bind
  ("C-c p p" . completion-at-point)
  ("C-c p t" . complete-tag)
  ("C-c p d" . cape-dabbrev)
  ("C-c p h" . cape-history)
  ("C-c p f" . cape-file)
  ("C-c p k" . cape-keyword)
  ("C-c p s" . cape-elisp-symbol)
  ("C-c p e" . cape-elisp-block)
  ("C-c p a" . cape-abbrev)
  ("C-c p i" . cape-ispell)
  ("C-c p l" . cape-line)
  ("C-c p w" . cape-dict)
  ("C-c p \\" . cape-tex)
  ("C-c p _" . cape-tex)
  ("C-c p ^" . cape-tex)
  ("C-c p &" . cape-sgml)
  ("C-c p r" . cape-rfc1345)

  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;; (add-to-list 'completion-at-point-functions #'cape-tex)
  ;; (add-to-list 'completion-at-point-functions #'cape-sgml)
  ;; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; (add-to-list 'completion-at-point-functions #'cape-line)
  :config

  ;; Silence the pcomplete capf, no errors or messages!
  ;; Important for corfu
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))

#+end_src
**** tempel
+ snippet template in elisp way
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package tempel
  :after corfu
  :hook
  (prog-mode . tempel-abbrev-mode)

  ;; Require trigger prefix before template name when completing.
  :custom
  (tempel-trigger-prefix "<")
  (tempel-path "~/.config/emacs/templates/*")

  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
	     ("M-*" . tempel-insert)))
#+end_src
+ tempel-collection: collection for some snippets
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package tempel-collection
  :after tempel)
#+end_src
***** templates
- handy templates to use for quick running thought process.
#+name: template
#+begin_src emacs-lisp :tangle ~/.config/emacs/templates/nix.eld
;; Refer: `tempo-define-template' for doc.
;;  • (s NAME) Inserts a named field.
;;  • (p/r PROMPT <NAME> <NOINSERT>) Insert an optionally named field with a prompt. The PROMPT is
;;  displayed directly in the buffer as default value. If NOINSERT is non-nil, no field is inserted.
;;  Then the minibuffer is used for prompting and the value is bound to NAME.

nix-mode

(buildphase > "buildPhase= ''" n (p "Build Instructions") n " '';")
(checkPhase > "checkPhase= ''" n (p "") n " '';")
(configurephase > "configurePhase= ''" n (p "") n " '';")
(fixupphase > "fixupPhase= ''" n (p "") n " '';")
(distphase > "distPhase= ''" n (p "") n " '';")
(patchphase > "patchPhase= ''" n (p "") n " '';")
(unpackphase > "unpackPhase= ''" n (p "") n " '';")
(installCheckPhasephase > "installCheckPhasePhase= ''" n (p "") n " '';")
(installphase > "installphase= ''" n p " mkdir -p $out/bin" n> "for f in $(find . -executable -type f);" n> "do" n> "cp $f $out/bin" n> "done}" n> " '';")

(hmpkgs "{" n> "home.packages = with pkgs; [" n> (r "pkgnames") n> n> "];" n> "}")

(gitpackage "{ lib" n ", stdenv" n ", fetchFromGitHub" n ", " (p "inputs") n ", " (p "inputs") n "}:" n n>
            "stdenv.mkDerivation rec {" n> "pname = \"" (p "" pkgn nil) "\";" n> "version = \"" p "\";" n n>
      "src = fetchFromGitHub {" n> "owner = \"" (p "" own) "\";" n> "repo = \"" (s pkgn) "\";" n>
      "rev = \"" "v${version}" "\";" n> "sha256 = \"" "${lib.fakeSha256}" "\";" n> "};" n n>
      "nativeBuildInputs = [ " (p "makeWrapper") " ];" n n> "BuildInputs = [ " (p) " ];" n n>
      "meta = with lib; {" n>
      "homepage = \"" "https://github.com/" (s own) "/" (s pkgn) "\";" n>
      "description = \"" (p) "\";" n>
      "license = licenses." (p (completing-read "License: " '("agpl3" "asl20" "bsd1" "bsd2" "bsd3" "free" "gpl2" "gpl2Only" "gpl2Plus" "gpl3" "gpl3Only" "gpl3Plus" "isc" "lgpl21Only" "lgpl21Plus" "lgpl2Only" "lgpl2Plus" "lgpl3" "lgpl3Only" "mit" "mpl20" "ofl" "unfree"))) ";" n>
      "maintainers = with maintainers; [ " (s own) " ];" n>
      "platforms = platforms."
      (p (completing-read "Platform: " '("all" "allBut" "arm" "cygwin" "darwin" "freebsd" "gnu" "i686" "illumos" "linux" "mesaPlatforms" "mips" "netbsd" "none" "openbsd" "unix" "x86"))) ";" n> q "};" n> "}"
      )

#+end_src
***** org-templates
#+begin_src emacs-lisp :tangle ~/.config/emacs/templates/org.eld
org-mode

(hugosite ":PROPERTIES:"  n ":EXPORT_FILE_NAME: " (p "simple-name") n ":EXPORT_DATE: " (format-time-string "%Y-%m-%d") n ":EXPORT_HUGO_DRAFT: false" n ":END:")
(readonly ":tangle-mode (identity #o444) :mkdirp yes" n)
(variablweb "#+name: " (p "noweb-ref") n "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
(datime (format-time-string "%Y-%m-%d %A %d %B %Y"))
(gitcollapse  "*** " p n "#+begin_html" n "<details>" n "<summary> " (p "heading")  " </summary>" n "#+end_html" n (p "link or any comments") n n "#+begin_html" n "</details>" n "#+end_html" n n)

(eval n "#+name: " (p "name" fname) n "#+begin_src " (p "C++" lang) " results output drawer :tangle ./codes/" (s fname) n> r> n> "#+end_src" :post (org-edit-src-code))

(pyeval n "#+name: " (p "name" fname) n "#+begin_src python :tangle ./codes/python/"
        (s fname) ".py " n> r> n> "#+end_src" :post (org-edit-src-code))

(reval n "#+name: " (p "name" fname) n "#+begin_src R :tangle ./codes/rstats/"
       (s fname) ".R " n> r> n> "#+end_src" :post (org-edit-src-code))

(jleval n "#+name: " (p "name" fname) n "#+begin_src julia :tangle ./codes/"
        (s fname) ".jl " n> r> n> "#+end_src" :post (org-edit-src-code))

(labmanual "* " p n
           "** Pre-requisites" n p n
           "** Aim" n n
           "** Tools" n n
           "** Introduction" n n
           "** Methodology" n n
           "** Results" n n
           "** Conclusion" n n
           )

(latimg n "#+CAPTION: " p n
        "#+ATTR_LATEX: :height :center t" n
        :post (org-insert-link))

(nixorg "#+name: nixos-core" n "#+begin_src nix" n
        n "#+end_src" :post (org-edit-src-code))

(hmorg "#+name: hm-config" n "#+begin_src nix" n
       n "#+end_src" :post (org-edit-src-code))


(elisp "#+name: " (p "name") n "#+begin_src emacs-lisp" n n "#+end_src" :post (org-edit-src-code))
(orgmacs "#+name: orgmacs" n "#+begin_src emacs-lisp" n n "#+end_src" :post (org-edit-src-code))

(blogorg "#+title: " (p "title") n
         "#+date: [" (format-time-string "%Y-%m-%d %a") "]")

(captcontact
 (p "Person Name") n
 ":PROPERTIES: " n
 ":EMAIL: " p n
 ":URL: " p n
 ":MOBILE: " p n
 ":WORKPHONE: " n
 ":COMPANY: " n
 ":CITY: " p n
 ":BORN: " p n
 ":ITOLDTHEM_EMAIL: " n
 ":ITOLDTHEM_ADDRESS: " n
 ":ITOLDTHEM_PHONE: " n
 ":CREATED: " (format-time-string "[%Y-%m-%d %a %H:%M]") n
 ":END:" n
 )
#+end_src
***** markdown-templates
#+begin_src emacs-lisp :tangle ~/.config/emacs/templates/markdown.eld
markdown-mode

(gitcollapse "## " (p "Heading") n n "<details>" n n
       "<summary>" (p "Sub Heading")  "</summary>" n n
       (r "Insert Link or comments") n n "</details>")
(bolditalics "***" p "***")

(androidfoss "* [**" (p "pname") "**](" (p "Git") ") <sup>**[[F-Droid](" (p "Fdroid") ")]**</sup>")

(srcblock (call-interactively #'markdown-insert-gfm-code-block))
(src "'" p "'")
(unorderlist "- " (p "First") n> "- " (p "Second") n> "- " (p "Third"))
(orderlist "1. " (p "First") n> "2. " (p "Second") n> "3. " (p "Third"))
(insertimage (call-interactively #'markdown-insert-image))
(insertlink (call-interactively #'markdown-insert-link))
(hugotitle "+++" n "title = " (p "title") n "date = " (format-time-string "%Y-%m-%d") n "tags = [ " (p "tag1, tag2 ") "]" n "draft = false" n "+++")
(h1 "# " p " #")
(h2 "## " p " ##")
(h3 "### " p " ###")
(h4 "#### " p " ####")
(inserttable (call-interactively #'markdown-insert-table))

#+end_src
***** elisp-templates
#+begin_src emacs-lisp :tangle ~/.config/emacs/templates/elisp.eld
emacs-lisp-mode

(modconfig ";;; " (c-get-current-file) ".el --- " (p "description") " -*- lexical-binding: t -*-" n
           ";;; Commentary:" n n ";;; Code:" n n n r> n n "(provide '" (c-get-current-file) ".el)" n ";;; " (c-get-current-file) ".el ends here" )
(autoload ";;;###autoload")
(lambda "(lambda (" p ")" n> r> ")")
(defvar "(defvar " p "\n  \"" p "\")")
(defvar-local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(defface "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(defgroup "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(defmacro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(defalias "(defalias '" p " '" p ")")
(defun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(defcustom "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(if-let "(if-let (" p ")" n> r> ")")
(when-let "(when-let (" p ")" n> r> ")")
(if-let* "(if-let* (" p ")" n> r> ")")
(when-let* "(when-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " p n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(obsolete-fun "(define-obsolete-function-alias" n> p n> p n> "\"" p "\")")
(obsolete-var "(define-obsolete-function-alias" n> p n> p n> "\"" p "\")")


#+end_src
***** css-templates
#+begin_src emacs-lisp :tangle ~/.config/emacs/templates/css.eld
css-mode css-ts-mode

(var "var(--" p ")")
#+end_src
*** Enhancements
**** Mouse
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package mwheel
  :ensure nil
  :bind
  ([mouse-9] . [prior]) ;; binds mouse fwd button to page up
  ([mouse-8] . [next]) ;; mouse bwd button to page down
  :custom
  ;; (mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))))
  (mouse-wheel-progressive-speed nil)
  (scroll-margin 4)
  (scroll-conservatively 101))

(use-package disable-mouse
  :unless d/on-droid
  :bind
  ([f10] . disable-mouse-mode))
#+end_src
**** pixel scroll
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package pixel-scroll
  :ensure nil
  :commands
  (pixel-scroll-precision-scroll-down pixel-scroll-precision-scroll-up)
  :bind
  ("C-v" . pixel-scroll-interpolate-down)
  ("M-v" . pixel-scroll-interpolate-up)
  :custom
  (pixel-scroll-precision-interpolate-page t)
  :init
  (pixel-scroll-precision-mode 1))
#+end_src
+ Function to smooth scroll up and down. Note: works only for Pgtk build.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/scroll-down ()
  "Trust me, make scrolling alot smoother.
+1 Makes you fall in love with Emacs again!"
  (interactive)
  (pixel-scroll-precision-scroll-down 20))

(defun d/scroll-up ()
  "Trust me, adds a wonderfull smooth scroll.
You can do this by trackpad too (laptop)"
  (interactive)
  (pixel-scroll-precision-scroll-up 20))
#+end_src
+ Function to use pixel-scroll for recenter.
+ Credits to [[https://github.com/KaratasFurkan/.emacs.d/tree/emacs-29#pixel-scroll][KaratasFurkan]]. Having some issues, does not stay with point?
#+name: orgmacs
#+begin_src emacs-lisp
(defun d/pixel-recenter-top-bottom ()
  "Similar to `recenter-top-bottom' but with pixel scrolling."
  (interactive)
  (let* ((current-row (cdr (nth 6 (posn-at-point))))
         (target-row (save-window-excursion
                       (recenter-top-bottom)
                       (cdr (nth 6 (posn-at-point)))))
         (distance-in-pixels (* (- target-row current-row) (line-pixel-height))))
    (pixel-scroll-precision-interpolate distance-in-pixels)))
#+end_src
**** winner
- to capture window/panes states.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package winner
  :ensure nil
  :hook after-init
  :bind
  ("C-c w n" . winner-undo)
  ("C-c w p" . winner-redo)
  :commands (winner-undo winnner-redo))
#+end_src
**** time break
- to take break timely with some stats.
- Credits to [[https://github.com/gopar][@gopar]]
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; Taken from gopar's config (via Yt video)
;; https://github.com/gopar/.emacs.d
(use-package type-break
  :disabled
  :ensure nil
  :hook (after-init)

  :custom
  ;; Setting interval of that of a pomodoro session
  (type-break-interval (* 25 60)) ;; 25 mins
  (type-break-good-rest-interval (* 9 60)) ;; 9 mins
  (type-break-good-break-interval (* 5 60)) ;; 5 mins
  (type-break-query-mode t)
  (type-break-keystroke-threshold '(nil . 2625))
  (type-break-demo-boring-stats t)
  (type-break-demo-functions '(type-break-demo-agenda)))
#+end_src
- Function to bring agenda while on break time.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun type-break-demo-agenda ()
  "Display the Org Agenda in read-only mode. Cease the demo as soon as a key is pressed."
  (let ((buffer-name "*Typing Break Org Agenda*")
        lines)
    (condition-case ()
        (progn
          (org-agenda-list)
          (setq buffer-name (buffer-name))
          ;; Set the buffer to read-only
          (with-current-buffer buffer-name
            (read-only-mode 1))
          ;; Message to be displayed at the bottom
          (let ((msg (if type-break-terse-messages
                         ""
                       "Press any key to resume from typing break")))
            ;; Loop until key is pressed
            (while (not (input-pending-p))
              (sit-for 60))
            ;; Clean up after key is pressed
            (read-event)
            (type-break-catch-up-event)
            (kill-buffer buffer-name)))
      (quit
       (and (get-buffer buffer-name)
            (kill-buffer buffer-name))))))
#+end_src
- Function to go =zone= if afk or idle
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/afk-mode ()
  (interactive)
  (zone)
  (zone-when-idle 80))
#+end_src
* Development
*** Documentation
- Documentation matters!
- Enables man pages with cache (apropos), info pages, dev pages and also nixos configuration.nix
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # TODOTHIS: Got some error on docbook,
  # see-> https://github.com/NixOS/nixpkgs/blob/nixos-unstable/nixos/modules/misc/documentation.nix

  # faster rebuilding
  documentation = {
    enable = true;
    nixos.enable = true;
    doc.enable = true;
    info.enable = true;
    man = {
      enable = true;
      generateCaches = true; # will take little time
    };
    dev.enable = true;
  };
}
#+end_src
- To generate man pages apropos for user profile. Might take little time to generate caches, but worth it for offline quick reading.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.man = {
    enable = true;
    generateCaches = true; # will take little time
  };
}
#+end_src
**** Manual pages
- view man pages in emacs! ~M-x man~
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package man
  :ensure nil
  :defer t
  :custom
  (Man-notify-method 'pushy "show manpage HERE")
  :custom-face
  (Man-overstrike ((t (:inherit font-lock-type-face :bold t))))
  (Man-underline ((t (:inherit font-lock-keyword-face :underline t))))

  :bind
  (("C-c m" . consult-man)
   :map Man-mode-map
   ("q" . kill-buffer-and-window)))
#+end_src
- For not depending on =man= program.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package woman
  :ensure nil
  :defer t
  :custom-face
  (woman-bold ((t (:inherit font-lock-type-face :bold t))))
  (woman-italic ((t (:inherit font-lock-keyword-face :underline t)))))
#+end_src
**** Helpful
- enhanced help page =describe-=  for emacs.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package helpful
  :defines (helpful-mode-map)
  :hook (helpful-mode . toggle-mode-line)
  :bind
  ("C-h f" . helpful-callable)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key)
  ("C-h x" . helpful-command)
  ("C-c C-d" . helpful-at-point)
  ("C-h o" . helpful-symbol)
  ("C-h F" . helpful-function)
  (:map helpful-mode-map
        ("q" . kill-buffer-and-window)))
#+end_src
**** TLDR
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs = {

    gpg = {
      enable = true;
      homedir = "${config.xdg.dataHome}/gnupg";
      # to solve issue with emacs
      # package = pkgs.gnupg.overrideAttrs (orig: {
      #   version = "2.4.0";
      #   src = pkgs.fetchurl {
      #     url = "mirror://gnupg/gnupg/gnupg-2.4.0.tar.bz2";
      #     hash = "sha256-HXkVjdAdmSQx3S4/rLif2slxJ/iXhOosthDGAPsMFIM=";
      #   };
      # });
    };

    tealdeer = {
      enable = true;
      settings = {
        display = {
	        compact = false;
	        use_pager = true;
        };
        updates = {
	        auto_update = true;
        };
      };
    };
  };
}
#+end_src

*** Git
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.git = {
    enable = true;
    package = pkgs.gitFull;

    delta = {
      enable = true;
      # TODOTHIS
      # options.map-styles = "bold purple => syntax ${default.xcolors.mauve}, bold cyan => syntax ${default.xcolors.blue}";
    };

    extraConfig = {
      diff.colorMoved = "default";
      merge.conflictstyle = "diff3";
    };

    aliases = {
      a = "add";
      b = "branch";
      c = "commit";
      ca = "commit --amend";
      cm = "commit -m";
      cho = "checkout";
      d = "diff";
      ds = "diff --staged";
      p = "push";
      pf = "push --force-with-lease";
      pl = "pull";
      l = "log";
      r = "rebase";
      s = "status --short";
      ss = "status";
      forgor = "commit --amend --no-edit";
      graph = "log --all --decorate --graph --oneline";
      logrep = "log --decorate --oneline --grep=";
      oops = "checkout --";
    };

    ignores = ["*~" "*.swp" "*result*" ".direnv" "node_modules"];

    # signing = {
    #   key = "";
    #   signByDefault = true;
    # };

    userEmail = "igoldlip@gmail.com";
    userName = "Dilip";
    # editor = "";
  };

}
#+end_src
**** magit
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package magit
  :defer t
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  (magit-diff-refine-hunk t))
#+end_src
**** ediff
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package ediff
  :ensure nil
  :custom
  (ediff-keep-variants nil)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
*** Direnv
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;
    enableZshIntegration = true;
  };
}
#+end_src
- envrc for emacs to ensure direcory environment is set for those specific buffers
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package envrc
  :defer 2
  :config
  (envrc-global-mode))
#+end_src
*** Terminal
**** foot
- foot is decent, but emacs tho has got it covered too!
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.foot = {
    enable = true;

    # doesnt work properly; Enable it in hyprland or sway config
    server.enable = false;

    settings = {
      main = {
        term = "xterm-256color";
        font = "Code D OnePiece:size=12, Noto Color Emoji:size=15";
        font-bold = "Code D Lip:size=12, Noto Color Emoji:size=15";
        letter-spacing = "1";
        box-drawings-uses-font-glyphs = "no";
        pad = "0x0center";
        notify = "notify-send -a \${app-id} -i \${app-id} \${title} \${body}";
        selection-target = "clipboard";
	      dpi-aware = "true";
      };

      scrollback = {
        lines = 10000;
        multiplier = 3;
      };

      url = {
        launch = "d-stuff \${url}";
        label-letters = "sadfjklewcmpgh";
        osc8-underline = "url-mode";
        protocols = "http, https, ftp, ftps, file";
        uri-characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.,~:;/?#@!$&%*+=\"'()[]";
      };

      key-bindings = {
        clipboard-copy = "Control+Shift+c";
        clipboard-paste = "Control+Shift+v Control+y";
        primary-paste = "Shift+Insert";

      };

      colors = {
        background = "050505";
        foreground = "ffffff";
        regular0 = "030303";
        regular1 = "ff8059";
        regular2 = "44bc44";
        regular3 = "d0bc00";
        regular4 = "2fafff";
        regular5 = "feacd0";
        regular6 = "00d3d0";
        regular7 = "bfbfbf";
        bright0 = "595959";
        bright1 = "ef8b50";
        bright2 = "70b900";
        bright3 = "c0c530";
        bright4 = "79a8ff";
        bright5 = "b6a0ff";
        bright6 = "6ae4b9";
        bright7 = "ffffff";
        alpha = "0.9";
      };

      mouse = {
        hide-when-typing = "yes";
      };

    };
  };
}
#+end_src
**** Zellij
- Its a decent multiplexer
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.zellij = {
    enable = true;
    settings = {

    };
  };
}
#+end_src
**** eshell
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package esh-mode
  :ensure nil
  :defines
  (eshell-prompt-regexp)
  :commands
  (eshell-send-input eshell/clear)
  :hook
  (eshell-mode . toggle-mode-line)
  (eshell-mode . electric-pair-local-mode)
  (eshell-mode . (lambda () (setq outline-regexp eshell-prompt-regexp)
                   (setq-local corfu-auto nil)
                   (setq-local scroll-margin 0)
                   (corfu-mode)))
  :bind
  ("<f12>" . d/eshell-toggle)
  ("C-c d s" . eshell)
  (:map eshell-mode-map
        ("C-S-l" . d/clear-eshell))

  :custom
  (eshell-scroll-to-bottom-on-input t)
  (eshell-directory-name (expand-file-name "eshell" user-emacs-directory))
  (eshell-aliases-file (expand-file-name "alias" eshell-directory-name))
  (eshell-highlight-prompt t)
  (eshell-hist-ignoredups t)
  (eshell-cd-on-directory t)
  (eshell-visual-command nil)
  (eshell-pushd-dunique t)
  (eshell-last-dir-unique t)
  (eshell-last-dir-ring-size 32)
  (eshell-list-files-after-cd nil)
  (eshell-cd-shows-directory t)
  (eshell-prefer-lisp-functions nil)

  (eshell-prompt-function
   (lambda nil
     (concat
      "\n"
      (propertize " ◉ " 'face '(:inherit region))
      " "
      (propertize (replace-regexp-in-string "~" " " (eshell/pwd)) 'face '(:foreground "lightblue1"))
      (when (package-installed-p 'magit) (propertize (if (magit-get-current-branch) (concat "   " (magit-get-current-branch)) "") 'face '(:foreground "orangered1")))
      (when (package-installed-p 'envrc) (propertize (if (string= envrc--status 'none) "" "   ") 'face '(:foreground "mediumspringgreen")))
      (propertize (concat "   " (format-time-string "%H:%M" (current-time))) 'face '(:foreground "lightcyan1"))
      (propertize "\n 𝝺 " 'face '(:foreground "palegreen"))
      )))
  (eshell-prompt-regexp "^ 𝝺 "))
#+end_src
- eshell function to toggle and clear buffer
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/clear-eshell ()
  (interactive)
  (eshell-send-input (eshell/clear t)))

(defun d/eshell-toggle ()
  "Minimal hack to toggle eshell."
  (interactive)
  (cond
   ((derived-mode-p 'eshell-mode) (if (one-window-p) (switch-to-prev-buffer) (delete-window)))
   ((one-window-p) (progn (select-window (split-window-below)) (shrink-window 7) (eshell)))
   (t (progn (other-window 1)
             (if (derived-mode-p 'eshell-mode) (delete-window)
               (progn (other-window -1) (select-window (split-window-below)) (shrink-window 7) (eshell)))))))
#+end_src
- eshell history
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package em-hist
  :ensure nil
  :bind
  (:map eshell-hist-mode-map
        ("M-s" . nil)
        ("M-s r" . consult-ripgrep)
        ("M-s s" . consult-history))
  :custom
  (eshell-buffer-maximum-lines 10000)
  (eshell-history-size 10000))

(use-package em-smart
  :ensure nil
  :custom
  (eshell-where-to-jump 'begin)
  (eshell-review-quick-commands nil)
  (eshell-smart-space-goes-to-end t))
#+end_src
**** eat
- emulate a terminal
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package eat
  :defines
  (d/on-droid
   eat-mode-map
   eat-semi-char-mode-map
   eat-char-mode-map
   eat--semi-char-mode)
  :functions
  (eat
   eat-emacs-mode
   eat-semi-char-mode)

  :unless d/on-droid
  :commands (eshell d/eshell-toggle d/eat-toggle)
  :hook
  (eshell-load . eat-eshell-mode)
  (eat-mode . toggle-mode-line)
  :bind
  ("C-c d t" . d/eat-toggle)
  ("S-<f12>" . d/eat-toggle)
  (:map eat-mode-map
        ("C-x C-q" . d/eat-read-write)
        ("<f12>" . d/eat-toggle)
        ("<f9>" . toggle-mode-line))
  (:map eat-semi-char-mode-map
        ("M-o" . nil)
        ("M-s" . nil)))
#+end_src
- function to toggle and set binding state in eat
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/eat-read-write ()
  (interactive)
  (if eat--semi-char-mode (eat-emacs-mode) (eat-semi-char-mode))
  )

(defun d/eat-toggle ()
  "Minimal hack to toggle eat."
  (interactive)
  (cond
   ((derived-mode-p 'eat-mode) (if (one-window-p) (switch-to-prev-buffer) (delete-window)))
   ((one-window-p) (progn (split-window-below) (other-window 1) (eat)
                          (shrink-window 7)))
   (t (progn (other-window 1)
             (if (derived-mode-p 'eat-mode) (delete-window)
               (progn (other-window -1) (split-window-below) (other-window 1) (eat) (shrink-window 7)))))))
#+end_src
*** Editor
**** Emacs
- The GOAT-Editor.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  # does not read local path properly. so ~/.local/bin does not work
  # services.emacs = {
  #   enable = true;
  #   socketactivation.enable = true;
  # };

  programs.emacs = {
    enable = true;
    package = pkgs.emacs29-pgtk;
    extraPackages = (epkgs: (with epkgs; [
      treesit-grammars.with-all-grammars
      eat vundo undo-fu-session flycheck helpful flycheck-languagetool
      no-littering rainbow-delimiters rainbow-mode
      vertico orderless consult marginalia embark org-modern corfu cape corfu-terminal
      org olivetti nerd-icons nerd-icons-completion nerd-icons-dired async dirvish
      embark-consult consult-eglot consult-flycheck markdown-mode nix-mode
      reddigg hnreader howdoyou mingus magit webpaste org-present
      shrface shr-tag-pre-highlight nov devdocs-browser reformatter
      beframe denote tempel tempel-collection avy
      sdcv elfeed elfeed-org powerthesaurus jinx meow
      doom-modeline el-fetch ox-hugo envrc dashboard
      ement kind-icon speed-type vc-backup aria2
      ess org-re-reveal auctex julia-mode webfeeder
      toc-org el-patch disable-mouse org-ql org-alert
    ])
    );
  };

  xdg.configFile."emacs/init.el".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/d-emacs/init.el";

  xdg.configFile."emacs/early-init.el".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/d-emacs/early-init.el";

}
#+end_src
**** neovim
- just to be there, why use vim when emacs can do everything.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;
    vimdiffAlias = true;
  };
}
#+end_src

**** helix
- just to test the cool editor out there.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.helix = {
    enable = true;

    settings = {
      theme = "gruvbox_dark_hard";

      keys.normal = {
        "{" = "goto_prev_paragraph";
        "}" = "goto_next_paragraph";
        "X" = "extend_line_above";
        "esc" = ["collapse_selection" "keep_primary_selection"];
        space.space = "file_picker";
        space.w = ":w";
        space.q = ":bc";
        "C-q" = ":xa";
        space.u = {
          f = ":format"; # format using LSP formatter
          w = ":set whitespace.render all";
          W = ":set whitespace.render none";
        };
      };

      keys.insert = {
        A-x = "normal_mode";
        j = { k = "normal_mode"; };
      };

      keys.select = {
        "%" = "match_brackets";
      };

      editor = {
        line-number = "relative";
        cursorline = true;
        auto-completion = true;
        auto-format = true;
        mouse = true;
        color-modes = true;
        idle-timeout = 1;
        scrolloff = 5;
        bufferline = "always";
        true-color = true;
        rulers = [80];
        indent-guides = {
          render = true;
        };
        gutters = ["diagnostics" "line-numbers" "spacer" "diff"];

        statusline = {
          separator = "";
          left = ["mode" "selections" "spinner" "file-name" "total-line-numbers"];
          center = [];
          right = ["diagnostics" "file-encoding" "file-line-ending" "file-type" "position-percentage" "position"];
          mode = {
            normal = "NORMAL";
            insert = "INSERT";
            select = "SELECT";
          };
        };

        whitespace.characters = {
          space = "·";
          nbsp = "⍽";
          tab = "→";
          newline = "⤶";
        };

        cursor-shape = {
          insert = "bar";
          normal = "block";
          select = "block";
        };

        auto-pairs = {
          "(" = ")";
          "{" = "}";
          "[" = "]";
          "\"" = "\"";
          "`" = "`";
          "<" = ">";
        };

        lsp = {
          enable = true;
          display-messages = true;
          display-inlay-hints = true;
          snippets = true;
        };

      };
    };

  };
}
#+end_src

*** Languages
- better to maintain via development shells
**** shell
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    # better to manage it via development shell

    ##### shell #####
    nodePackages.bash-language-server shellcheck

    ##### core comp ####
    gcc gnumake tree-sitter
    parallel
  ];
}
#+end_src
**** python
- [ ] check on =ruff-lsp=
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    ### python
    # python311packages.python-lsp-server
    # nodePackages.pyright
    ruff
    (python311.withPackages(ps: with ps; [
      python-lsp-server
      biopython
      python-lsp-black
      python-lsp-ruff
    ]))
  ];
}
#+end_src
- python in emacs, or emacs in python?
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; taken from Robb Enzmann
(defun d/pyrightconfig-write (virtualenv)
  "Write a `pyrightconfig.json' file at the Git root of a project,
with `venvPath' and `venv' set to the absolute path of
`virtualenv'.  When run interactively, prompts for a directory to select."
  (interactive "DEnv: ")
  ;; Naming convention for venvPath matches the field for pyrightconfig.json
  (let* ((venv-dir (tramp-file-local-name (file-truename virtualenv)))
         (venv-file-name (directory-file-name venv-dir))
         (venvPath (file-name-directory venv-file-name))
         (venv (file-name-base venv-file-name))
         (base-dir (vc-git-root default-directory))
         (out-file (expand-file-name "pyrightconfig.json" base-dir))
         (out-contents (json-encode (list :venvPath venvPath :venv venv))))
    (with-temp-file out-file (insert out-contents))
    (message (concat "Configured `" out-file "` to use environment `" venv-dir))))

(use-package python
  :ensure nil
  :hook ((python-mode . (lambda ()
                          (setq-local completion-at-point-functions
                                      '(cape-file python-completion-at-point cape-dabbrev)
                                      devdocs-browser-active-docs
                                      '("Python")))))

  :bind
  (:map python-mode-map
        ("C-c C-d" . devdocs-browser-open))
  :custom
  (python-shell-dedicated 'project)
  (python-shell-interpreter "python")
  (python-shell-interpreter-args "-i")
  ;; (python-forward-sexp-function nil)
  (python-indent-guess-indent-offset-verbose nil)
  (python-shell-completion-native-disabled-interpreters '("pypy")))
#+end_src
**** R
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    # r
    (rWrapper.override {
      packages = with rPackages; [
        ggplot2
        # dplyr
        # tidyverse # set of 9 packages
        languageserver
        lintr
        styler
        # stringr
        BiocManager
        # httr
        # ggvis
        # shiny
        # rio
        # rmarkdown
      ]; })
  ];
}
#+end_src
- Emacs speak statistics
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package ess
  :defer t

  :custom
  (ess-use-company nil)
  (ess-eval-visibly nil)
  (ess-ask-for-ess-directory t)

  (ess-use-eldoc t)
  (ess-eldoc-show-on-symbol t)

  (ess-R-font-lock-keywords
   '((ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:constants . t)
     (ess-R-fl-keyword:modifiers . t)
     (ess-R-fl-keyword:fun-defs . t)
     (ess-R-fl-keyword:assign-ops . t)
     (ess-R-fl-keyword:%op% . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers . t)
     (ess-fl-keyword:operators . t)
     (ess-fl-keyword:delimiters . t)
     (ess-fl-keyword:= . t)
     (ess-R-fl-keyword:F&T . t)))

  (inferior-R-font-lock-keywords
   '((ess-S-fl-keyword:prompt . t)
     (ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:constants . t)
     (ess-R-fl-keyword:modifiers . t)
     (ess-R-fl-keyword:messages . t)
     (ess-R-fl-keyword:fun-defs . t)
     (ess-R-fl-keyword:assign-ops . t)
     (ess-fl-keyword:matrix-labels . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers . t)
     (ess-fl-keyword:operators . t)
     (ess-fl-keyword:delimiters . t)
     (ess-fl-keyword:= . t)
     (ess-R-fl-keyword:F&T . t)))

  )

(use-package ess-r-mode
  ;; :hook (ess-r-mode . (lambda () (flycheck-mode 0)))
  :bind
  (:map ess-mode-map
        ("C-;" . ess-insert-assign))
  (:map inferior-ess-r-mode-map
        ("C-;" . ess-insert-assign))

  :custom
  (ess-indent-with-fancy-comments nil))
#+end_src
**** nix
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package nix-mode
  :mode ("\\.nix\\'" "\\.nix.in\\'")
  :defines (nix-mode-map)
  :functions
  (comint-send-input)
  :bind (:map nix-mode-map
              ("C-c C-e" . nix-eval-line)))
(defun nix-eval-dwim ()
  (interactive)
  (let* ((start (line-beginning-position))
         (end (line-end-position))
         (region-string (buffer-substring (region-beginning) (region-end)))
         (msg (format "%s" (if (use-region-p) region-string (buffer-substring start end)))))
    (pop-to-buffer "*Nix-REPL*")
    (insert msg)
    (comint-send-input)
    (other-window 1)))

(use-package nix-drv-mode
  :ensure nix-mode
  :mode "\\.drv\\'")

(use-package nix-shell
  :ensure nix-mode
  :commands (nix-shell-unpack nix-shell-configure nix-shell-build))

(use-package nix-repl
  :ensure nix-mode
  :commands (nix-repl))
#+end_src
**** stack
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    # basic stack
    # nodepackages.vscode-langservers-extracted
    hugo monolith
  ];
}
#+end_src
**** science
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    ##### science ####
    # blast ncbi sra_toolkit
    julia
  ];
}
#+end_src
- learning julia
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package ess-julia
  :hook (ess-julia-mode . (lambda () (setq-local devdocs-browser-active-docs '("Julia"))))
  :bind
  (:map ess-julia-mode-map
        ("C-c C-d" . devdocs-browser-open))
  :custom
  (inferior-julia-args "--color=yes" "You get color in julia inferior process"))

(use-package julia-mode)
#+end_src
**** tex writing
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    texlive.combined.scheme-full
  ];
}
#+end_src
*** devMacs
**** executable
- makes =*.sh= files executable by save
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package executable
  :ensure nil
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src
**** Linter
- To lint and check for good practices in code.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package flycheck
  :defer t
  :hook (prog-mode . flycheck-mode)
  :custom
  (flycheck-check-syntax-automatically '(save idle-change mode-enabled))
  (flycheck-idle-change-delay 3)
  ;; more form doom
  (flycheck-emacs-lisp-load-path 'inherit)
  (flycheck-buffer-switch-check-intermediate-buffers t)
  (flycheck-display-errors-delay 0.25))
#+end_src
- Add flycheck support for =ruff= fast python linter.
- changed =source-original= to ~source-inplace~ to work on org-edit-special too.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(with-eval-after-load 'flycheck
  (add-to-list 'flycheck-checkers 'python-ruff)

  (flycheck-def-config-file-var flycheck-python-ruff-config python-ruff
                                '("pyproject.toml" "ruff.toml" ".ruff.toml"))

  (flycheck-define-checker python-ruff
    "A Python syntax and style checker using the ruff.
To override the path to the ruff executable, set
`flycheck-python-ruff-executable'.

See URL `https://beta.ruff.rs/docs/'."
    :command ("ruff"
              "check"
              (config-file "--config" flycheck-python-ruff-config)
              "--output-format=text"
              "--stdin-filename" source-inplace
              "-")
    :standard-input t
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes (python-mode python-ts-mode)
    :next-checkers ((warning . python-mypy)))
  )
#+end_src
**** formatter
- Legit, best made design for formatter package.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package reformatter
  :hook
  (python-ts-mode . ruff-format-on-save-mode)
  (nix-mode . alejandra-format-on-save-mode)
  :config
  (reformatter-define ruff-format
    :program "ruff"
    :args (list "format" "--stdin-filename" input-file "-"))

  (reformatter-define alejandra-format
    :program "alejandra"
    :group 'nix-mode
    :lighter " AL"))
#+end_src
**** eglot
- the lsp gifted in emacs
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package eglot
  :defer t
  :ensure nil
  :defines
  (d/on-droid)

  :unless d/on-droid
  :commands (eglot eglot-format eglot-managed-p eglot--major-mode)
  ;; (((web-mode rust-mode python-mode sh-mode c-mode c++-mode nix-mode) .
  ;; eglot-ensure)
  ;; :hook
  ;; (nix-mode . eglot-ensure)
  :custom
  (eglot-sync-connect 1)
  (eglot-connect-timeout 5)
  (eglot-autoshutdown t)
  (eglot-send-changes-idle-time 45)
  (eglot-auto-display-help-buffer nil)

  :bind
  (:map eglot-mode-map
        ("C-c l r" . eglot-rename)
        ("C-c C-d" . eldoc)
        ("C-c l a" . eglot-code-actions)
        ("C-c l i" . consult-eglot-symbols))
  :config
  (add-to-list 'eglot-server-programs '(nix-mode . ("nixd")))
  ;;   (add-to-list 'eglot-server-programs '(bash-ts-mode . ("bash-language-server")))
  ;;   (add-to-list 'eglot-server-programs '(markdown-mode . ("marksman")))
  )
#+end_src
**** xref
- paired up with eglot, or ctags to reference symbols.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package xref
  :ensure nil
  :custom
  (xref-search-program 'ripgrep))
#+end_src
**** emacs-lisp
- no words, without elisp, this whole file would not exist.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package elisp-mode
  :ensure nil
  :bind
  (:map emacs-lisp-mode-map
        ("C-c C-d C-d" . describe-function)
        ("C-c C-d d" . describe-function)
        ("C-c C-k" . eval-buffer)))
#+end_src
**** treesit
- not full fledge =tree-sitter= experience in emacs, but does the job for now.
- could try =combobulate= package.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package treesit
  :ensure nil
  :mode
  ("\\.yaml\\'" . yaml-ts-mode)
  ("\\.toml\\'" . toml-ts-mode)
  ("\\.jsonrc\\'" . json-ts-mode)

  :custom
  (treesit-font-lock-level 4)
  (treesit-font-lock-feature-list t)
  (major-mode-remap-alist
   '((c-mode . c-ts-mode)
     (c++-mode . c++-ts-mode)
     (csharp-mode . csharp-ts-mode)
     (css-mode . css-ts-mode)
     (java-mode . java-ts-mode)
     (js-mode . js-ts-mode)
     (js-json-mode . json-ts-mode)
     ;; (org-mode . org-ts-mode) ;; not mature yet
     (python-mode . python-ts-mode)
     (julia-mode . ess-julia-mode)
     (typescript-mode . typescript-ts-mode)
     (sh-mode . bash-ts-mode)
     (ruby-mode . ruby-ts-mode)
     (rust-mode . rust-ts-mode)
     (toml-mode . toml-ts-mode)
     (yaml-mode . yaml-ts-mode))))
#+end_src
**** devdocs
- devdocs in offline mode, for most decent documentation on language.
- mostly it inherits official doc, maybe little spiced up ;).
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package devdocs-browser
  :bind
  ("C-c d v" . devdocs-browser-open-in)
  :hook
  (devdocs-browser-eww-mode . shrface-mode)
  :custom
  (devdocs-browser-major-mode-docs-alist
   '((c++-ts-mode "cpp")
     (c-ts-mode "c")
     (go-ts-mode "go")
     (python-ts-mode "Python")
     (emacs-lisp-mode "elisp")
     (rust-ts-mode "rust")
     (cmake-mode "CMake")))

  (devdocs-browser-highlight-lang-mode-alist
   '(("c" . c-ts-mode)
     ("cpp" . c++-ts-mode)
     ("py" . python-ts-mode)
     ("bash" . bash-ts-mode)
     ("shell" . bash-ts-mode)
     ("python" . python-ts-mode))))
#+end_src
**** electric-pair
- to enclose pairs or delimiters
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package elec-pair
  :ensure nil
  :hook
  (prog-mode . electric-pair-local-mode)
  :custom
  (electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
  (electric-pair-preserve-balance t)
  (electric-pair-pairs
   '((8216 . 8217)
     (8220 . 8221)
     (171 . 187)))
  (electric-pair-skip-self 'electric-pair-default-skip-self)
  (electric-pair-skip-whitespace nil)
  (electric-pair-skip-whitespace-chars '(9 10 32)))

(use-package electric
  :custom
  (electric-quote-context-sensitive t)
  (electric-quote-paragraph t)
  (electric-quote-string nil)
  (electric-quote-replace-double t)
  :config
  (electric-indent-mode -1)
  (add-hook 'prog-mode-hook #'electric-indent-local-mode))
#+end_src
**** paren
- try to escape the parenthesis
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :custom
  (show-paren-delay 0.1)
  (show-paren-highlight-openparen t)
  (show-paren-when-point-inside-paren t)
  (show-paren-style 'parenthesis)
  (show-paren-context-when-offscreen t))
#+end_src
**** rainbow
- add color to delimiters.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package rainbow-delimiters
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :defer t
  :hook '(prog-mode help-mode)
  :bind ("C-c t c" . rainbow-mode))
#+end_src
**** avy
- to jump to places quick and easy with few keypress.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package avy
  :bind
  ("M-j" . avy-goto-char-timer)
  ("M-g w" . avy-goto-char-timer)
  ("M-K" . avy-kill-region)
  ("C-S-k" . avy-kill-whole-line)
  :custom
  (avy-background t)
  (avy-keys '(?s ?h ?t ?n ?e ?o ?d ?r ?u ?p)))
#+end_src
**** ligatures
- Extracted from [[https://github.com/Artawower/.emacs.d][Artawower]]
- Gives ligature somehow everywhere, should try can be made toggle
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defconst jetbrains-ligature-mode--ligatures
  '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
    "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
    "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
    "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
    "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
    "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
    "<:" ":<" ":>" ">:" "<>" "***" ";;" "/==" ".=" ".-" "__"
    "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
    ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
    "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
    "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
    "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
    "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
    "&="))

(sort jetbrains-ligature-mode--ligatures (lambda (x y) (> (length x) (length y))))

;; (dolist (pat jetbrains-ligature-mode--ligatures)
;;   (set-char-table-range composition-function-table
;;                         (aref pat 0)
;;                         (nconc (char-table-range composition-function-table (aref pat 0))
;;                                (list (vector (regexp-quote pat)
;;                                              0
;;                                              'compose-gstring-for-graphic)))))

#+end_src
* Reading
** Pdf Reader
*** sioyek
- the best pdf reader
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.sioyek = {
    enable = true;
    bindings = {
      "move_up" = "k";
      "move_down" = "j";
      "move_left" = "h";
      "move_right" = "l";
      "screen_down" = [ "d" "" ];
      "screen_up" = [ "u" "" ];
      "fit_to_page_width" = "<f9>";
      "fit_to_page_width_smart" = "<f10>";
      "toggle_fullscreen" = [ "f" "<f11>"  ];
      "quit" = "q";
      "toggle_custom_color" = "<f8>";
      "toggle_highlight" = "<f1>";
      "command" = "<A-x>";
      "toggle_dark_mode" = "i";
      "toggle_presentation_mode" = "<f5>";
      "toggle_statusbar" = "B";
    };

    config = {
      "background_color" = "0.0 0.0 0.0";
      "dark_mode_background_color" = "0.0 0.0 0.0";
      "custom_background_color" = "0.180 0.204 0.251";
      "custom_text_color" = "0.847 0.871 0.914";
      "dark_mode_contrast" = "0.8";
      "text_highlight_color" = "1.0 1.0 0.0";
      "search_url_s" = "https://scholar.google.com/scholar?q";
      "search_url_l" = "http://gen.lib.rus.ec/scimag/?q";
      "search_url_g" = "https://www.google.com/search?q";
      "middle_click_search_engine" = "s";
      "shift_middle_click_search_engine" = "l";
      "zoom_inc_factor" = "1.2";
      "flat_toc" = "0";
      "should_launch_new_instance" = "1";
      "should_launch_new_window" = "1";
      "default_dark_mode" = "1";
      "sort_bookmarks_by_location" = "1";
      "ui_font" = "'Code D Haki'";
      "font_size" = "24";
      "wheel_zoom_on_cursor" = "1";
      "status_bar_font_size" = "22";
      "collapsed_toc" = "1";
      "ruler_mode" = "1";
      "single_click_selects_words" = "1";
      "item_list_prefix" = ">";
      "#ignore_whitespace_in_presentation_mode" = "0";
      "prerender_next_page_presentation" = "1";
    };
  };
}
#+end_src
*** doc-view
- the emacs way for viewing documents.
- I found =pdf-tools= to be taking more memory than doc-view.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package doc-view
  :ensure nil
  ;; :mode ("\\.epub\\'" . doc-view-mode)
  :bind (:map doc-view-mode-map
              ("M-g M-g" . doc-view-goto-page)
              ("<f8>" . doc-view-presentation)
              ("j" . doc-view-next-line-or-next-page)
              ("k" . doc-view-previous-line-or-previous-page)
              ("C-v" . doc-view-scroll-up-or-next-page)
              ("M-v" . doc-view-scroll-down-or-previous-page)
              )
  :hook
  (doc-view-minor-mode-hook . (lambda () (pixel-scroll-mode -1)))
  :custom
  (doc-view-continuous t)
  (doc-view-mupdf-use-svg t)
  (doc-view-scale-internally t)
  (doc-view-image-width 900)
  (large-file-warning-threshold 700000000)
  (image-cache-eviction-delay 3))
#+end_src
- packages required for doc-view to view/render some pdf/text.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    mupdf poppler_utils ghostscript # for doc-view
  ];
}
#+end_src
** Novel
*** nov.el
- to read in comfort couch of emacs!
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package nov
  :functions
  (toggle-mode-line)

  :hook
  (nov-mode . (lambda () (toggle-mode-line) (variable-pitch-mode)))
  (nov-mode . shrface-mode)

  :mode ("\\.epub\\'" . nov-mode)
  :custom
  (nov-text-width nil)
  (nov-shr-rendering-functions '((img . nov-render-img) (title . nov-render-title)))
  (nov-shr-rendering-functions (append nov-shr-rendering-functions shr-external-rendering-functions))
  (nov-variable-pitch t))
#+end_src
** Texinfo
- Built to read =info= manuals in emacs, and this function lets to read normal text files as info manuals.
- supports org, texi, md, News file.
- credits to [[https://emacsnotes.wordpress.com/2023/09/11/view-info-texi-org-and-md-files-as-info-manual][blog post]]
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; Read normal text files as emacs info manuals
;; thanks to:
;;https://emacsnotes.wordpress.com/2023/09/11/view-info-texi-org-and-md-files-as-info-manual/
(defun d/text-info ()
  "View ‘info’, ‘texi’, ‘org’, ‘md’ and 'NEWS' files as ‘Info’ manual."
  (interactive)
  (require 'rx)
  (require 'ox-texinfo)
  (when (buffer-file-name)
    (let* ((org-export-with-broken-links 'mark)
           (ext (file-name-extension (buffer-file-name))))
      (cond
       ;; A NEWS files
       ((string-match "NEWS" (file-name-nondirectory (buffer-file-name)))
        (with-current-buffer
            ;; NEWS files are likely to be in read-only directories.
            ;; So make a copy with an `.org' extension.  Most NEWS
            ;; file are `outline-mode' files with `org' like heading
            ;; structure.  Many of the recent files like ORG-NEWS are
            ;; proper `org' files.
            (find-file-noselect
             (make-temp-file
              (format "%s---" (file-name-nondirectory (buffer-file-name))) nil ".org"
              (buffer-substring-no-properties (point-min) (point-max))))
          (org-with-wide-buffer
           ;; `ox-texinfo' export fails if a headline ends with a
           ;; period (= ".").  So, strip those terminating periods.
           (goto-char (point-min))
           (while (re-search-forward (rx (and bol
                                              (one-or-more "*")
                                              " "
                                              (one-or-more any)
                                              (group ".")
                                              eol))
                                     (point-max) t)
             (replace-match "" t t nil 1))
           (goto-char (point-min))
           (while nil
             ;; TODO: If a NEWS file contains text which resemble a
             ;; LaTeX fragment, the `ox-texinfo' export wouldn't
             ;; succeed.  So, enclose the LaTeX fragment with Org's
             ;; verbatim `=' marker.
             )
           (save-buffer 0)
           (info (org-texinfo-export-to-info)))))
       ;; A `.info' file
       ((or (string= "info" ext))
        (info (buffer-file-name)))
       ;; A `.texi' file
       ((or (string= "texi" ext))
        (info (org-texinfo-compile (buffer-file-name))))
       ;; An `.org' file
       ((or (derived-mode-p 'org-mode)
            (string= "org" ext))
        (info (org-texinfo-export-to-info)))
       ;; A `.md' file
       ((or (derived-mode-p 'markdown-mode)
            (string= "md" ext))
        (let ((org-file-name (concat (file-name-sans-extension (buffer-file-name)) ".org")))
          (apply #'call-process "pandoc" nil standard-output nil
                 `("-f" "markdown"
                   "-t" "org"
                   "-o" ,org-file-name
                   ,(buffer-file-name)))
          (with-current-buffer (find-file-noselect org-file-name)
            (info (org-texinfo-export-to-info)))))
       (t (user-error "Don't know how to convert `%s' to an `info' file"
                      (buffer-file-name)))))))

(global-set-key (kbd "C-x x v") 'd/text-info)
#+end_src
- view-mode - to just leisurely view file
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(add-hook
 'view-mode-hook
 (lambda ()
   (define-key view-mode-map (kbd "l") 'recenter-top-bottom)
   (cond ((derived-mode-p 'org-mode)
          (define-key view-mode-map (kbd "p") 'org-previous-visible-heading)
          (define-key view-mode-map (kbd "n") 'org-next-visible-heading))
         ((derived-mode-p 'markdown-mode)
          (define-key view-mode-map (kbd "p") 'markdown-outline-previous)
          (define-key view-mode-map (kbd "n") 'markdown-outline-next))
         ((derived-mode-p 'html-mode)
          (define-key view-mode-map (kbd "p") 'sgml-skip-tag-backward)
          (define-key view-mode-map (kbd "n") 'sgml-skip-tag-forward))
         ((derived-mode-p 'python-ts-mode)
          (define-key view-mode-map (kbd "p") 'python-nav-backward-block)
          (define-key view-mode-map (kbd "n") 'python-nav-forward-block))
         ((derived-mode-p 'emacs-lisp-mode)
          (define-key view-mode-map (kbd "p") 'backward-sexp)
          (define-key view-mode-map (kbd "n") 'forward-sexp))
         ((derived-mode-p 'makefile-mode)
          (define-key view-mode-map (kbd "p") 'makefile-previous-dependency)
          (define-key view-mode-map (kbd "n") 'makefile-next-dependency))
         ((derived-mode-p 'c-mode)
          (define-key view-mode-map (kbd "p") 'c-beginning-of-defun)
          (define-key view-mode-map (kbd "n") 'c-end-of-defun))
         (t
          (define-key view-mode-map (kbd "p") 'scroll-down-command)
          (define-key view-mode-map (kbd "n") 'scroll-up-command)))))

(add-hook 'view-mode-hook 'hl-line-mode)
#+end_src
** Rss
*** Elfeed
- Elfeed the pioneer of Emacs beauty.
- I primarily use Emacs on android for reading rss feeds in sync with PC. This is easily achieved by syncthing over the DataBase folder, and symlinking them to =var/elfeed= .
- Certain functions to write DB when quitting buffer helps to make syncing quicker.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package elfeed
  :bind
  ("C-c d e" . d/elfeed-open)
  ("C-c d b" . embark-act)
  :commands
  (d/elfeed-open)
  :config
  (defface elfeed-search-star-title-face
    '((t :foreground "#f77"))
    "Marks a starred Elfeed entry.")
  (push '(star elfeed-search-star-title-face) elfeed-search-face-alist)
  (defun d/elfeed-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (unless (get-buffer "*elfeed-search*") (elfeed-db-load))
    (elfeed)
    (elfeed-search-update--force)))
   ;; (elfeed-update)))
#+end_src
**** elfeed functions
- to toggle star tag on feeds marked or current in =elfeed-show-mode=.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun elfeed-toggle-show-star ()
  (interactive)
  (if (elfeed-tagged-p 'star elfeed-show-entry)
      (elfeed-show-untag 'star)
    (elfeed-show-tag 'star)))
;; (org-capture nil "l"))
#+end_src
- toggle star tag in =elfeed-search-mode=
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun elfeed-toggle-star ()
  (interactive)
  (elfeed-search-toggle-all 'star))
;; (org-capture nil "l"))
#+end_src
- enhance elfeed reading integrating with hook
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/elfeed-ui ()
  (interactive)
  ;; (setq-local header-line-format " ")
  (variable-pitch-mode)
  (shrface-mode))
#+end_src
- write to disk when quit, so helps to sync the DB on android as well.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;;write to disk when quiting
(defun d/elfeed-quit ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))
#+end_src
- add podcast or mp3 enclosure to =mpd=.
- I have replaced this with bash script link handler (=d-stuff=), simpe and easy.
- https://github.com/idlip/d-bin
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/elfeed-add-podcast ()
  "Play the enclosure URL in Mpd using 'mingus'."
  (interactive)
  (with-no-warnings
    (let* ((count (length (elfeed-entry-enclosures elfeed-show-entry)))
           (entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
           (dlink (shell-command-to-string (format "yt-dlp -f bestaudio -g '%s'" (shr-url-at-point nil)))))
      (require 'mingus)
      ;; (message (concat "Added: " (car (elt (elfeed-entry-enclosures elfeed-show-entry)
      ;;                                      (- enclosure-index 1)))))
      (message dlink)
      (mingus-add dlink))))
;; (cond ((shr-url-at-point nil) (shell-command-to-string (format "yt-dlp -f bestaudio -g '%s'" (shr-url-at-point current-prefix-arg))))
;;       ((derived-mode-p 'elfeed-show-mode)
;;        (if (zerop count)
;;            (shell-command-to-string (format "yt-dlp -f bestaudio -g '%s'" (elfeed-entry-link entry)))
;;          (car (elt (elfeed-entry-enclosures elfeed-show-entry)
;;                    (- enclosure-index 1)))))
;;       ((derived-mode-p 'elfeed-search-mode) (elfeed-search-selected :single))))))

#+end_src
- play enclosure mp3 in mpd
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/elfeed-play ()
  (interactive)
  (let* ((count (length (elfeed-entry-enclosures elfeed-show-entry)))
         (entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
    (message (concat "Added: " (elfeed-entry-link entry)))
    (if (zerop count)
        (async-shell-command (format "mpc add $(yt-dlp -g \"%s\")" (elfeed-entry-link entry)) nil nil)
      (with-no-warnings
        (mingus-add (car (elt (elfeed-entry-enclosures elfeed-show-entry)
                              (- enclosure-index 1))))))))
#+end_src
- to store a feed in org file as bookmark
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/elfeed-org-mark ()
  "use org file as bookmark for elfeed entries.
Usable as favorites or bookmark."
  (when elfeed-show-entry
    (let* ((link (elfeed-entry-link elfeed-show-entry))
           (title (elfeed-entry-title elfeed-show-entry)))
      (org-store-link-props
       :link link
       :description title))))
#+end_src
- opens the feed in =reddigg= for reddit and =eww= for html url.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun elfeed-open-in-eww ()
  "open elfeed entry in eww."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
    (eww-browse-url (elfeed-entry-link entry) t)))

(defun elfeed-open-in-reddit ()
  "open elfeed entry in reddit"
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
    (reddigg-view-comments (elfeed-entry-link entry)))
  (display-buffer-pop-up-window (reddigg--get-cmt-buffer) nil))
#+end_src
- use volume button for next and prev feed on android
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(when d/on-droid
  (with-eval-after-load 'elfeed
    (define-key elfeed-show-mode-map (kbd "<volume-up>") #'elfeed-show-prev)
    (define-key elfeed-show-mode-map (kbd "<volume-down>") #'elfeed-show-next)))
#+end_src
- remove feeds from DB. Credits to a user on elfeed github repo
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; credits to a user on github elfeed repo
(defun d/elfeed-db-remove-entry (id)
  "Removes the entry for ID"
  (avl-tree-delete elfeed-db-index id)
  (remhash id elfeed-db-entries))

(defun d/elfeed-search-remove-selected ()
  "Remove selected entries from database"
  (interactive)
  (let* ((entries (elfeed-search-selected))
         (count (length entries)))
    (when (y-or-n-p (format "Delete %d entires?" count))
      (cl-loop for entry in entries
               do (d/elfeed-db-remove-entry (elfeed-entry-id entry)))))
  (elfeed-search-update--force))
#+end_src
**** elfeed-show
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package elfeed-show
  :hook
  (elfeed-show-mode . d/elfeed-ui)

  :bind
  (:map elfeed-show-mode-map
        ("e" . elfeed-open-in-eww)
        ("i" . d/bionic-read)
        ("r" . elfeed-open-in-reddit)
        ("m" . elfeed-toggle-show-star)
        ("q" . d/elfeed-quit)
        ("C-x C-k" . d/elfeed-quit)
        ("P" . d/elfeed-add-podcast)
        ("A" . d/elfeed-play)
        ("b" . nil)))
#+end_src
**** elfeed-search
- filtering works as expected with simple notations ~+,-,!,=~.
  - =+= and =-= is treated on tag
  - =@= - indicates age or date.
    - ~@2-days-ago~
    - ~@2023-12-20--2023-12-24~ (range)
    - ~@5-days-ago--1-day-ago~
  - =!= indicates negation or inverse of search.
  - =#= for number of feeds entries.
  - === - for matching entry's feed (url or title)
  - =~= - for not matching (inverse) entry's feed
  - rest all regular expression work.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package elfeed-search
  :bind
  (:map elfeed-search-mode-map
        ("m" . elfeed-toggle-star)
        ("q" . d/elfeed-quit)
        ("G" . elfeed-search-fetch-visible)
        ("C-x C-k" . d/elfeed-quit)
        ("U" . elfeed-update)
        ("u" . elfeed-update-feed))

  :custom
  ;; (setq-default elfeed-search-filter "@1-week-ago--1-day-ago +unread -news +")
  (elfeed-search-filter "+unread +")
  (elfeed-search-date-format (if d/on-droid `("" 0 :left)  `("%d-%m 📰" 7 :left)))
  (elfeed-search-title-max-width 60)
  (elfeed-search-title-min-width 60)
  (elfeed-search-trailing-width 0))
#+end_src
**** elfeed-log
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package elfeed-log
  :after elfeed
  :custom
  (elfeed-log-level 'debug "debug, info, warn or error."))
#+end_src
**** elfeed-org
- to parse org file as elfeed feed links.
- super handy and convenient way.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package elfeed-org
  :after elfeed
  :custom
  (rmh-elfeed-org-files (list "~/d-sync/notes/bookmarks.org"))
  :init
  (elfeed-org))
#+end_src
** Dictionary
*** sdcv
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package sdcv
  :defer t
  :unless d/on-droid
  :defines
  (sdcv-say-word-p sdcv-dictionary-data-dir
                   sdcv-dictionary-simple-list
                   sdcv-popup-function sdcv-buffer-name
                   sdcv-mode-map)


  :hook (sdcv-mode . toggle-mode-line)
  :config
  (setq sdcv-say-word-p t
        sdcv-dictionary-data-dir "~/d-git/d-bin/treasure/dict/"
        sdcv-dictionary-simple-list
        '("wn" "mw-thesaurus" "dict")
        sdcv-popup-function 'popup-tip
        sdcv-buffer-name "StarDict")
  :bind (("C-c d w" . sdcv-search-input)
         ("C-c d d" . sdcv-search-input+))
  (:map sdcv-mode-map
        ("q" . kill-buffer-and-window)
        ("n" . sdcv-next-dictionary)
        ("TAB" . hide-entry)
        ("<backtab>" . show-entry)
        ("p" . sdcv-previous-dictionary)))
#+end_src
* Media
** Browser
- The pioneer of modern day Internet.
*** Firefox
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs = {

    firefox = {
      enable = true;
      # package = pkgs.firefox-wayland; # is there difference?
      profiles.ihome = {
        isDefault = true;
        # extensions = with pkgs.nur.repos.rycee.firefox-addons; [
        #   ff2mpv
        #   vimium
        #   languagetool
        #   ublock-origin
        #   darkreader
        #   libredirect
        #   multi-account-containers
        #   vertical-tabs-reloaded
        # ];

        settings = {
          "browser.startup.homepage" = "about:blank";
          "browser.urlbar.placeholderName" = "Time to get Productive...";
          "gfx.webrender.all" = true;
          "gfx.webrender.enabled" = true;
          "media.av1.enabled" = false;
          "media.ffmpeg.vaapi.enabled" = true;
          "media.hardware-video-decoding.force-enabled" = true;
          "media.navigator.mediadatadecoder_vpx_enabled" = true;
          "signon.rememberSignons" = false;
          "app.normandy.api_url" = "";
          "app.normandy.enabled" = false;
          "app.shield.optoutstudies.enabled" = false;
          "beacon.enabled" = false;
          "breakpad.reportURL" = "";
          "browser.aboutConfig.showWarning" = false;
          "browser.cache.offline.enable" = false;
          "browser.crashReports.unsubmittedCheck.autoSubmit" = false;
          "browser.crashReports.unsubmittedCheck.autoSubmit2" = false;
          "browser.crashReports.unsubmittedCheck.enabled" = false;
          "browser.disableResetPrompt" = true;
          "browser.newtab.preload" = false;
          "browser.newtabpage.activity-stream.section.highlights.includePocket" = false;
          "extensions.pocket.enabled" = false;
          "browser.newtabpage.enhanced" = false;
          "browser.newtabpage.introShown" = true;
          "browser.safebrowsing.appRepURL" = "";
          "browser.safebrowsing.blockedURIs.enabled" = false;
          "browser.safebrowsing.downloads.enabled" = false;
          "browser.safebrowsing.downloads.remote.enabled" = false;
          "browser.safebrowsing.downloads.remote.url" = "";
          "browser.safebrowsing.enabled" = false;
          "browser.safebrowsing.malware.enabled" = false;
          "browser.safebrowsing.phishing.enabled" = false;
          "browser.selfsupport.url" = "";
          "browser.send_pings" = false;
          "browser.sessionstore.privacy_level" = 2;
          "browser.startup.homepage_override.mstone" = "ignore";
          "browser.tabs.crashReporting.sendReport" = false;
          "browser.urlbar.groupLabels.enabled" = false;
          "browser.urlbar.quicksuggest.enabled" = false;
          "browser.urlbar.speculativeConnect.enabled" = false;
          "datareporting.healthreport.service.enabled" = false;
          "datareporting.healthreport.uploadEnabled" = false;
          "datareporting.policy.dataSubmissionEnabled" = false;
          "device.sensors.ambientLight.enabled" = false;
          "device.sensors.enabled" = false;
          "device.sensors.motion.enabled" = false;
          "device.sensors.orientation.enabled" = false;
          "device.sensors.proximity.enabled" = false;
          "dom.battery.enabled" = false;
          "dom.event.clipboardevents.enabled" = true;
          "dom.webaudio.enabled" = false;
          "experiments.activeExperiment" = false;
          "experiments.enabled" = false;
          "experiments.manifest.uri" = "";
          "experiments.supported" = false;
          "extensions.getAddons.cache.enabled" = false;
          "extensions.getAddons.showPane" = false;
          "extensions.greasemonkey.stats.optedin" = false;
          "extensions.greasemonkey.stats.url" = "";
          "extensions.shield-recipe-client.api_url" = "";
          "extensions.shield-recipe-client.enabled" = false;
          "extensions.webservice.discoverURL" = "";
          "fission.autostart" = true;
          "media.autoplay.default" = 1;
          "media.autoplay.enabled" = false;
          "media.eme.enabled" = false;
          "media.gmp-widevinecdm.enabled" = false;
          "media.navigator.enabled" = false;
          "media.video_stats.enabled" = false;
          "network.IDN_show_punycode" = true;
          "network.allow-experiments" = false;
          "network.captive-portal-service.enabled" = false;
          "network.cookie.cookieBehavior" = 1;
          "network.dns.disablePrefetch" = true;
          "network.dns.disablePrefetchFromHTTPS" = true;
          "network.http.referer.spoofSource" = true;
          "network.http.speculative-parallel-limit" = 0;
          "dom.security.https_only_mode" = true;
          "network.predictor.enable-prefetch" = false;
          "network.predictor.enabled" = false;
          "network.prefetch-next" = false;
          "network.trr.mode" = 5;
          "privacy.donottrackheader.enabled" = true;
          "privacy.donottrackheader.value" = 1;
          "privacy.firstparty.isolate" = true;
          "privacy.trackingprotection.cryptomining.enabled" = true;
          "privacy.trackingprotection.enabled" = true;
          "privacy.trackingprotection.fingerprinting.enabled" = true;
          "privacy.trackingprotection.pbmode.enabled" = true;
          "privacy.usercontext.about_newtab_segregation.enabled" = true;
          "security.ssl.disable_session_identifiers" = true;
          "services.sync.prefs.sync.browser.newtabpage.activity-stream.showSponsoredTopSite" = false;
          "browser.newtabpage.activity-stream.showSponsored" = false;
          "signon.autofillForms" = false;
          "toolkit.telemetry.archive.enabled" = false;
          "toolkit.telemetry.bhrPing.enabled" = false;
          "toolkit.telemetry.cachedClientID" = "";
          "toolkit.telemetry.enabled" = false;
          "toolkit.telemetry.firstShutdownPing.enabled" = false;
          "toolkit.telemetry.hybridContent.enabled" = false;
          "toolkit.telemetry.newProfilePing.enabled" = false;
          "toolkit.telemetry.prompted" = 2;
          "toolkit.telemetry.rejected" = true;
          "toolkit.telemetry.reportingpolicy.firstRun" = false;
          "toolkit.telemetry.server" = "";
          "toolkit.telemetry.shutdownPingSender.enabled" = false;
          "toolkit.telemetry.unified" = false;
          "toolkit.telemetry.unifiedIsOptIn" = false;
          "toolkit.telemetry.updatePing.enabled" = false;
          "webgl.disabled" = true;
          "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
          "webgl.renderer-string-override" = " ";
          "webgl.vendor-string-override" = " ";
          "browser.urlbar.update2.engineAliasRefresh" = true;
          "signon.passwordEditCapture.enabled" = false;
          "browser.search.hiddenOneOffs" = "Google,Yahoo,Bing,Amazon.com,Twitter";
          "browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts" = false;
          "browser.urlbar.trimURLs" = false;
          "findbar.modalHighlight" = true;
          "browser.fullscreen.autohide" = true;
          "browser.newtabpage.activity-stream.topSitesRows" = 0;
          "browser.urlbar.quickactions.enabled" = true;
          "pdfjs.annotationEditorMode" = 0;
          "pdfjs.annotationmode" = 2;
          "layers.acceleration.force-enabled" = true;
          "layout.css.backdrop-filter.enabled" = true;
          "svg.context-properties.content.enabled" = true;
        };

        search = {
          default = "DuckDuckGo";
          force = true;
          engines = {
            "Nixpkgs-Package Search" = {
              urls = [{ template = "https://search.nixos.org/packages?channel=unstable&size=250&sort=relevance&type=packages&query={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@nps" ];
            };

            "Nixpkgs-Modules Search" = {
              urls = [{ template = "https://search.nixos.org/options?channel=unstable&size=200&sort=relevance&query={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@nms" ];
            };

            "NixOS-Wiki Search" = {
              urls = [{ template = "https://nixos.wiki/index.php?search={searchTerms}&go=Go"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@nws" ];
            };

            "Home-Manager Search" = {
              urls = [{ template = "https://mipmip.github.io/home-manager-option-search/?query={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@hms" ];
            };

            "GitHub-Code Search" = {
              urls = [{ template = "https://github.com/search?q={searchTerms}&type=code"; }];
              iconUpdateURL = "https://github.githubassets.com/favicons/favicon-dark.svg";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@gcs" ];
            };

            "Noogle.dev Search" = {
              urls = [{ template = "https://noogle.dev/?term=%22{searchTerms}%22"; }];
              iconUpdateURL = "https://noogle.dev/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@ngd" "@nog" ];
            };

            "Nixpkgs PRs" = {
              urls = [{ template = "https://nixpk.gs/pr-tracker.html?pr={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@npr" ];
            };
          };

          order = [
            "DuckDuckGo"
          ];
        };

        userChrome = builtins.readFile ./configs/userChrome.css;

      };
    };

    librewolf = {
      enable = true;
      settings = {
        "gfx.webrender.all" = true;
        "gfx.webrender.enabled" = true;
        "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
        "layers.acceleration.force-enabled" = true;
        "layout.css.backdrop-filter.enabled" = true;
        "media.av1.enabled" = false;
        "media.ffmpeg.vaapi.enabled" = true;
        "media.hardware-video-decoding.force-enabled" = true;
      };
    };

    chromium = {
      enable = true;
      package = pkgs.brave;
      commandLineArgs = ["--enable-features=TouchpadOverscrollHistoryNavigation"];
      extensions = [
        {id = "cjpalhdlnbpafiamejdnhcphjbkeiagm";} # ublock origin
        {id = "dbepggeogbaibhgnhhndojpepiihcmeb";} # vimium
        {id = "eimadpbcbfnmbkopoojfekhnkhdbieeh";} # dark-reader
        {id = "lljedihjnnjjefafchaljkhbpfhfkdic";} # jiffy reader
        {id = "mnjggcdmjocbbbhaepdhchncahnbgone";} # sponsorblock
      ];
    };
  };
}
#+end_src
**** userChrome
- Css customization for Firefox UI.
#+begin_src css :tangle ./gdk/configs/userChrome.css
/*
  __  __   _           _
 |  \/  | (_)         (_)
 | \  / |  _   _ __    _   _ __ ___     __ _
 | |\/| | | | | '_ \  | | | '_ ` _ \   / _` |
 | |  | | | | | | | | | | | | | | | | | (_| |
 |_|  |_| |_| |_| |_| |_| |_| |_| |_|  \__,_|


,*/


/* User changable variables */

:root {
	--tab-font-size: 0.8em; /* Font size of the tab labels */
	--tab-font-family: -apple-system, BlinkMacSystemFont, "Code D Haki", Roboto, Helvetica, Arial, sans-serif; /* The font used for the tab labels */
	--max-tab-width: none; /* The maximum width a tab in the tab bar can use. Set this to none for no limit */
	--show-titlebar-buttons: none; /* Hide the buttons (close/minimize/maximize) in the title bar. Required on some platforms (e.g macOS) to fully hide the title bar. `none` hides them, `block` shows them */
	--tab-height: 20px;
}

/* Minima Source Code. Here be dragons. */
/* Only change this if you know what you're doing */

.titlebar-buttonbox-container {
	display: var(--show-titlebar-buttons);
}

:root:not([customizing]) #TabsToolbar {
	margin-left: 1px !important;
	margin-right: 1px !important;
	border-radius: 0 !important;
	padding: 0 !important;
}
.tabbrowser-tab * {
	margin:0 !important;
	border-radius: 0 !important;
	font-family: var(--tab-font-family) !important;
}
.tabbrowser-tab {
	height: var(--tab-height);
	font-size: var(--tab-font-size) !important;
	min-height: 0 !important;
	align-items: center !important;
}
.tabbrowser-tab[fadein]:not([pinned]) {
	max-width: var(--max-tab-width) !important;
}
.tab-close-button, .new-tab-button, #firefox-view-button, #scrollbutton-up, .tab-secondary-label {
	display: none !important;
}
.tab-icon-image {
	height: auto !important;
	width: calc(var(--tab-height) / 1.5) !important;
	margin-right: 4px !important;
}

#tabs-newtab-button, #titlebar spacer {
	display: none !important;
}

:root:not([customizing]) #nav-bar
{
	min-height : 2.5em       !important;
	height     : 2.5em       !important;
	margin     : 0 0 -2.5em  !important;
	z-index    : -1000       !important;
	opacity    : 0           !important;
}

:root:not([customizing]) #nav-bar:focus-within
{
	z-index    : 1000        !important;
	opacity    : 1           !important;
}

#nav-bar{
	border-inline: var(--uc-window-drag-space-width) solid var(--toolbar-bgcolor);
}
#new-tab-button, #alltabs-button, #scrollbutton-down, .tab-loading-burst{
	display: none;
}
#titlebar {
	overflow: none !important;
}

/* Source file https://github.com/MrOtherGuy/firefox-csshacks/tree/master/chrome/hide_tabs_with_one_tab.css made available under Mozilla Public License v. 2.0
See the above repository for updates as well as full license text. */

/* Makes tabs toolbar items zero-height initially and sets enlarge them to fill up space equal to tab-min-height set on tabs. Optionally use privatemode_indicator_as_menu_button.css to replace main menu icon with private browsing indicator while tabs are hidden. */
/* Firefox 65+ only */

:root[sizemode="normal"] #nav-bar{ --uc-window-drag-space-width: 20px }

#titlebar{ -moz-appearance: none !important; }
#TabsToolbar{ min-height: 0px !important }

#tabbrowser-tabs, #tabbrowser-tabs > .tabbrowser-arrowscrollbox, #tabbrowser-arrowscrollbox{ min-height: 0 !important; }

:root:not([customizing]) #tabbrowser-tabs .tabs-newtab-button,
:root:not([customizing]) #tabs-newtab-button,
:root:not([customizing]) #TabsToolbar-customization-target > .toolbarbutton-1,
:root:not([customizing]) #TabsToolbar .titlebar-button{
	-moz-appearance: none !important;
	height: 0px;
	padding-top: 0px !important;
	padding-bottom: 0px !important;
	-moz-box-align: stretch;
	margin: 0 !important;
}

.accessibility-indicator,
.private-browsing-indicator{
	height: unset !important;
}
.accessibility-indicator > hbox{ padding-block: 0 !important }

#tabbrowser-tabs tab:only-of-type {
	visibility: collapse !important;
}

/* Button re-styling */
#tabs-newtab-button:hover,
#tabbrowser-tabs .tabs-newtab-button:hover{ background-color: var(--toolbarbutton-hover-background) }

#tabs-newtab-button > .toolbarbutton-icon,
#tabbrowser-tabs .tabs-newtab-button > .toolbarbutton-icon{
	padding: 0 !important;
	transform: scale(0.6);
	background-color: transparent !important;
}
/* Extra top padding  in maximized window */
@media (-moz-os-version: windows-win10){
	:root[sizemode="maximized"] #navigator-toolbox{ padding-top:7px !important; }
}
/* Fix window controls not being clickable */
:root[tabsintitlebar] #toolbar-menubar[autohide="true"][inactive]{
	transition: height 0ms steps(1) 80ms;
}
#nav-bar{
	border-inline: var(--uc-window-drag-space-width) solid var(--toolbar-bgcolor);
}
#navigator-toolbox {
	appearance: toolbar !important; /* Pretty much anything except none */
}
#+end_src

*** Web
- Browsing Web in emacs.
**** Shr
- Shr, the basic html rendering done in emacs web browser (eww).
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package url
  :ensure nil
  :custom
  (url-user-agent "")
  (url-privacy-level 'paranoid)
  (url-mime-accept-string "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 ")
  (url-mime-charset-string nil)
  (url-mime-language-string "en-US,en;q=0.5")
  (url-mime-encoding-string "gzip, deflate")
  :config
  (url-setup-privacy-info))

(use-package shr
  :ensure nil
  :demand t
  :custom
  (shr-use-fonts  t)
  (shr-use-colors nil)
  (shr-indentation 4)
  (shr-bullet "⁍ ")
  (shr-folding-mode t)
  (shr-max-width 110)
  (shr-max-image-proportion 0.4)
  (shr-width nil))

(use-package shr-color
  :ensure nil
  :defer t
  :custom
  (shr-color-visible-luminance-min 40 "Improve the contrast"))
#+end_src
- Shrface for extending faces of shr/url like org-mode.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package shrface
  :hook
  (eww-after-render . shrface-mode)
  (devdocs-browser-eww-mode . shrface-mode)

  :bind
  (:map shrface-mode-map
        ("<tab>" . shrface-outline-cycle)
        ("<backtab>" . shrface-outline-cycle-buffer)
        ("M-n" . shr-next-link)
        ("M-p" . shr-previous-link)
        ("M-l" . (lambda () (interactive) (shrface-links-consult) (embark-act)))
        ("M-h" . mark-paragraph)
        ("C-j" . shrface-next-headline)
        ("C-k" . shrface-previous-headline))
  :custom
  (shrface-bullets-bullet-list '("󰓏" "󰚀" "󰫤"  "󰴈" "" "󰄄"))
  (shrface-href-versatile t)
  :config
  (defun shrface-shr-item-bullet ()
    "Build a `shr-bullet' based on `shrface-item-bullet'."
    (setq shr-bullet "⁍ "))

  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings))
#+end_src
- shr-pre-highlight, to highlight code blocks in eww. Does not guess the language correctly, but syntax highlight legit works.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package shr-tag-pre-highlight
  :demand
  :config
  (add-to-list 'shr-external-rendering-functions '(pre . shrface-shr-tag-pre-highlight)))
(defun shrface-shr-tag-pre-highlight (pre)
  "Highlighting code in PRE."
  (let* ((shr-folding-mode 'none)
         (shr-current-font 'default)
         (code (with-temp-buffer
                 (shr-generic pre)
                 ;; (indent-rigidly (point-min) (point-max) 2)
                 (buffer-string)))
         (lang (or (shr-tag-pre-highlight-guess-language-attr pre)
                   (let ((sym (language-detection-string code)))
                     (and sym (symbol-name sym)))))
         (mode (and lang
                    (shr-tag-pre-highlight--get-lang-mode lang))))
    (shr-ensure-newline)
    (shr-ensure-newline)
    (setq start (point))
    (insert
     (propertize (concat "#+BEGIN_SRC " lang "\n") 'face 'org-block-begin-line)
     (or (and (fboundp mode)
              (with-demoted-errors "Error while fontifying: %S"
                (shr-tag-pre-highlight-fontify code mode)))
         code)
     (propertize "#+END_SRC" 'face 'org-block-end-line ))
    (shr-ensure-newline)
    (setq end (point))
    (add-face-text-property start end '(:background "#292b2e" :extend t :inherit fixed-pitch))
    (shr-ensure-newline)
    (insert "\n")))

(setopt shr-tag-pre-highlight-lang-modes
        '(
          ("elisp" . emacs-lisp)
          ("emacs-lisp" . emacs-lisp)
          ("ditaa" . artist)
          ("asymptote" . asy)
          ("dot" . fundamental)
          ("sqlite" . sql)
          ("calc" . fundamental)
          ("c" . c-ts)
          ("cpp" . c++-ts)
          ("C++" . c++-ts)
          ("screen" . shell-script)
          ("shell" . bash-ts)
          ("awk" . bash-ts)
          ("bash" . bash-ts)
          ("sh" . bash-ts)
          ("python" . python-ts)
          ("R" . ess-r)
          ("julia" . ess-julia)
          ("sql" . sql)
          ("ruby" . ruby)
          ("el" . emacs-lisp)))
#+end_src
**** Eww
- The emacs web browsing, mostly I like to read articles, readable materials in it.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package eww
  :ensure nil
  :demand t
  :commands (eww eww-search-words)
  :hook
  (eww-mode . variable-pitch-mode)
  (eww-after-render . (lambda () (eww-readable) (setq-local line-spacing '0.4)))

  :bind ("M-s M-w" . eww-search-words)
  (:map eww-mode-map
        ("e" . readable-article)
        ("Q" . d/kill-buffer)
        ("RET" . eww-follow-link)
        ("m" . elfeed-toggle-star)
        ("b" . nil))
  :custom
  (eww-auto-rename-buffer 'title)
  (eww-search-prefix "https://duckduckgo.com/html/&q="))
#+end_src
- Function to search words or link at point, and also give us list from =eww-prompt-history= to choose.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun eww-search-words ()
  "Search the web for the text in the region.
If region is active (and not whitespace), search the web for
the text between region beginning and end.  Else, prompt the
user for a search string.  See the variable `eww-search-prefix'
for the search engine used."
  (interactive)
  (if (use-region-p)
      (let ((region-string (buffer-substring (region-beginning) (region-end))))
        (if (not (string-match-p "\\`[ \n\t\r\v\f]*\\'" region-string))
            (eww-browse-url region-string t)
          (eww-browse-url (completing-read "Browse Url" eww-prompt-history))))
    (if (shr-url-at-point nil)
        (eww (shr-url-at-point nil))
      (eww-browse-url (completing-read "Browse Url: " eww-prompt-history)))))
#+end_src
- Browse-url with custom bash script, a link handler.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package gnutls
  :ensure nil
  :defer t
  :custom
  (gnutls-verify-error t))

(use-package browse-url
  :ensure nil
  :config
  ;; browser script
  (unless d/on-droid
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "d-stuff")
    (setq browse-url-secondary-browser-function 'browse-url-generic
          browse-url-generic-program "d-stuff")))
#+end_src
- Browser url in dwim way. Function is replaced by =embark-act=.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/external-browser ()
  (interactive)
  (cond ((image-at-point-p) (kill-new (or (shr-url-at-point nil) (plist-get (cdr (image--get-image)) :file))))
        ((or (thing-at-point 'url t) (dired-file-name-at-point) (shr-url-at-point nil)) (link-hint-copy-link-at-point))
        (t (link-hint-copy-link)))
  (let ((url (current-kill 0)))
    (if d/on-droid (browse-url url) (browse-url-generic url))))
#+end_src
**** ox-hugo
- for maintaining a static site generator with posts written in org-mode.
- For anyone who has come this far, [[https://idlip.github.io][blog site]].
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package ox-hugo
  :unless d/on-droid
  :after ox)
#+end_src
- Org-capture for writing blog post.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(with-eval-after-load 'org-capture
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
  See `org-capture-templates' for more information."
    (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (add-to-list 'org-capture-templates
               '("w" "Website Organize"))
  (add-to-list 'org-capture-templates
               '("wt" "website Todo" entry (file+headline "~/d-git/d-site/README.org" "Ideas - TODO")
                 "* TODO %?\n  SCHEDULED:%T\n " :empty-lines 1))
  (add-to-list 'org-capture-templates
               '("ww" "website work"
                 entry
                 (file+olp "~/d-git/d-site/org-mode/posts.org" "Posts")
                 (function org-hugo-new-subtree-post-capture-template))))
#+end_src
** Music/Video
*** OpenGL
- gpu acceleration
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  hardware = {
    pulseaudio.enable = lib.mkForce false;
    opengl = {
      enable = true;
      extraPackages = with pkgs; [
        libva intel-media-driver
        vaapiVdpau vaapiIntel
        libvdpau-va-gl
      ];
    };
  };
}
#+end_src
*** Pipewire
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  sound.enable = true;

  # Pipewire setup, just these lines enough to make sane default for it
  services.pipewire = {
    enable = true;
    alsa = {
      enable = true;
      support32Bit = true;
    };
    wireplumber.enable = true;
    pulse.enable = true;
    jack.enable = true;
  };

}
#+end_src

*** Music Player
- The MPD - Music player daemon to run music contents.
**** mpd
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  services = {
    mpd = {
      enable = true;
      musicDirectory = config.xdg.userDirs.music;
      network = {
        listenAddress = "127.0.0.1";
        port = 6600;
        startWhenNeeded = true;
      };
      extraConfig = ''
      audio_output {
        type            "pipewire"
        name            "pipewire sound server"
      }
      auto_update "yes"
    '';
    };

    playerctld.enable = true;

  };

  # if mpd not working, check here
  # home.sessionvariables.mpd_host = config.services.mpd.network.listenaddress;
}
#+end_src
**** mingus
- Mingus - An mpd interface in emacs, its simple and clean to use.
- Ik EMMS and mpc exist, but mingus is straight forward simple and minimal.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package mingus
  :unless d/on-droid
  :commands (d/elfeed-add-podcast)
  :defines
  (mingus-browse-mode-map)

  :bind ("C-c d m" . mingus-browse)
  (:map mingus-browse-mode-map
        ("h" . mingus-browse-top-level)
        ("l" . mingus-down-dir-or-play-song))
  :custom
  (mingus-mode-always-modeline t)
  (mingus-mode-line-string-max 15)
  (mingus-mode-line-show-volume nil)
  (mingus-mode-line-show-elapsed-time nil)
  (mingus-mode-line-show-elapsed-percentage t)
  (mingus-mode-line-show-consume-and-single-status nil))
#+end_src
**** ncmpcpp
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs = {
    ncmpcpp = {
      enable = true;

      settings = {
        ncmpcpp_directory = "${config.xdg.configHome}/ncmpcpp";
        lyrics_directory = "${config.xdg.dataHome}/lyrics";
        message_delay_time = "1";
        song_list_format = "{$4%a - }{%t}|{$8%f$9}$r{$3(%l)$9}";
        song_status_format = "$b{{$8'%t'}} $3by {$4%a{ $3in $7%b{ (%y)}} $3}|{$8%f}";
        song_library_format = "{%n - }{%t}|{%f}";
        alternative_header_first_line_format = "$b$1$aqqu$/a$9 {%t}|{%f} $1$atqq$/a$9$/b";
        alternative_header_second_line_format = "{{$4$b%a$/b$9}{ - $7%b$9}{ ($4%y$9)}}|{%d}";
        current_item_prefix = "$(cyan)$r$b";
        current_item_suffix = "$/r$(end)$/b";
        current_item_inactive_column_prefix = "$(magenta)$r";
        current_item_inactive_column_suffix = "$/r$(end)";
        playlist_display_mode = "columns";
        browser_display_mode = "columns";
        progressbar_look = "->";
        media_library_primary_tag = "album_artist";
        media_library_albums_split_by_date = "no";
        startup_screen = "media_library";
        display_volume_level = "no";
        ignore_leading_the = "yes";
        external_editor = "nvim";
        use_console_editor = "yes";
        empty_tag_color = "magenta";
        main_window_color = "white";
        progressbar_color = "black:b";
        progressbar_elapsed_color = "blue:b";
        statusbar_color = "red";
        statusbar_time_color = "cyan:b";
      };

      bindings =
        [
          { key = "k"; command = [ "select_item" "scroll_up" ]; }
          { key = "+"; command = "show_clock"; }
          { key = "="; command = "volume_up"; }
          { key = "j"; command = "scroll_down"; }
          { key = "k"; command = "scroll_up"; }
          { key = "ctrl-u"; command = "page_up"; }
          { key = "ctrl-d"; command = "page_down"; }
          { key = "u"; command = "page_up"; }
          { key = "d"; command = "page_down"; }
          { key = "h"; command = [ "previous_column" "jump_to_parent_directory" ]; }
          { key = "l"; command = [ "next_column" "enter_directory" "run_action" "play_item" ]; }
          { key = "."; command = "show_lyrics"; }
          { key = "n"; command = "next_found_item"; }
          { key = "n"; command = "previous_found_item"; }
          { key = "j"; command = "move_sort_order_down"; }
          { key = "k"; command = "move_sort_order_up"; }
          { key = "m"; command = [ "show_media_library" "toggle_media_library_columns_mode" ]; }
          { key = "t"; command = "show_tag_editor"; }
          { key = "v"; command = "show_visualizer"; }
          { key = "g"; command = "move_end"; }
          { key = "g"; command = "move_home"; }
          { key = "u"; command = "update_database"; }
          { key = "s"; command = [ "reset_search_engine" "show_search_engine" ]; }
          { key = "f"; command = [ "show_browser" "change_browse_mode" ]; }
          { key = "x"; command = "delete_playlist_items"; }
          { key = "p"; command = "show_playlist"; }
        ];

    };
  };
}
#+end_src
*** mpv
- The most valuable program, to play any media content to play.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs = {
    mpv = {
      enable = true;
      scripts = with pkgs.mpvScripts; [ mpris ];

      bindings = {
        l = "seek  5";
        h = "seek -5";
        k = "seek  30";
        j = "seek -30";
        J = "cycle sub";
        K = "cycle sub down";
      };

      config = {
        force-window = true;
        osc = true;
        hwdec = "auto-safe";
        vo = "gpu";
        profile = "gpu-hq";
        gpu-context = "wayland";
        sub-border-size = 4.0;
        sub-shadow-color = "0.0/0.0/0.0";
        sub-shadow-offset = 1;
        sub-auto = "fuzzy";
        msg-level = "all=error";
        # ytdl-format = "bestvideo[height<=?1080]+bestaudio/best";
        ytdl-format = "best";
        save-position-on-quit = true;
        slang = "eng,en,eng,english";
        alang = "jp,jpn,en,eng";
        sub-font = "impress bt";
        autofit = "50%";
        sub-font-size = "48";
        speed = "1.5";
      };
    };
  };
}
#+end_src
*** yt-dlp
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs = {
    yt-dlp = {
      enable = true;
      settings = {
        embed-thumbnail = true;
        embed-metadata = true;
        embed-subs = true;
        sub-langs = "all";
      };
    };
  };
}
#+end_src
*** ytfzf
- Just to write config file for bash tool =ytfzf=.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  xdg.configFile."ytfzf/conf.sh".text = ''
      #video_pref="248+bestaudio/best"
      video_pref="[height<=1080]"
      sub_link_count=1
      show_thumbnails=0
      invidious_instance="https://vid.puffyan.us"
      external_menu () {
           #bemenu -w 0.98 -l 24 -p '  play '
           rofi -dmenu -i -config ~/.config/rofi/list.rasi -p '󰑈  play'
      }

      thumbnail_quality=high
      scrape=youtube
      #is_sort=1
      #search_sort_by=upload_date

    '';
}
#+end_src
** Image viewer
*** imv
- check ~(man "imv(5)")~
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs = {
    imv = {
      enable = true;
      settings = {
        # check man imv(5)
        options.background = "050505";
        aliases.x = "close";
        binds = {
          p = "prev";
          n = "next";
          "<Shift+D>" = "exec rm \"$imv_current_file\"; close";
          r = "exec mogrify -rotate 90 \"$imv_current_file\"";
        };
      };
    };
  };
}
#+end_src

*** image-mode
- Emacs mode for displaying images.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package image-mode
  :ensure nil
  :defines (d/on-droid olivetti-body-width)
  :functions (olivetti-mode)
  :unless d/on-droid
  :bind (:map image-mode-map
              ("q" . d/kill-buffer))
  :hook
  (image-mode . (lambda () (olivetti-mode) (setq olivetti-body-width 0.45))))
#+end_src

** Application
*** media-pkgs
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    # audio control
    pavucontrol
    playerctl
    pulsemixer
    pamixer
    transmission_4-gtk

    mpc_cli
    ytfzf ani-cli ytmdl freetube
    mangal
  ];
}
#+end_src

*** reddit
- experience the reddit posts in the comfort of org-mode.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package reddigg
  :defer t

  :defines
  (other-subs reddigg-subs )
  :commands (reddigg-view-sub)
  :functions
  (-concat reddigg--view-sub)

  :bind (("C-c d f" . reddigg-view-frontpage)
         ("C-c d r" . reddigg-view-sub))
  :custom
  (org-link-elisp-confirm-function 'y-or-n-p)
  (reddigg-subs '(emacs linux nixos orgmode hyprland bioinformatics onepiece fossdroid piracy bangalore india indiaspeaks developersindia manga aww))
  :config
  (setq other-subs '(crazyfuckingvideos nextfuckinglevel manga anime animepiracy fossdroid commandline memes jokes funnymemes rss holup unexpected todayilearned lifeprotips askreddit julia))

  (defun reddigg-view-sub ()
    "Prompt SUB and print its post list."
    (interactive)
    (let ((sub (completing-read "subreddit: " (-concat reddigg-subs other-subs '("frontpage" "comments")))))
      (cond ((string= sub "frontpage") (reddigg-view-frontpage))
            ((string= sub "comments") (reddigg-view-comments))
            (t (reddigg--view-sub sub)))))

  (defun reddigg--ensure-modes ()
    "Get a bunch of modes up and running."
    (if (equal major-mode 'org-mode)
        (org-set-startup-visibility)
      (org-mode)
      (font-lock-flush))
    (visual-line-mode)
    (jinx-mode -1)
    (view-mode 1)))
#+end_src
*** hacker news
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package hnreader
  :defer t
  :unless d/on-droid)
#+end_src
*** stackoverflow
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package howdoyou
  :defer t
  :unless d/on-droid)
#+end_src
*** pastebin
- to share, paste and forget
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package webpaste
  :defer t
  :defines
  (webpaste-provider-priority webpaste-paste-confirmation)

  :bind (("C-c C-p C-b" . webpaste-paste-buffer)
         ("C-c C-p C-r" . webpaste-paste-region)
         ("C-c C-p C-p" . webpaste-paste-buffer-or-region))
  :config
  (setq webpaste-provider-priority '("dpaste.org" "dpaste.com" "paste.mozilla.org"))
  ;; Require confirmation before doing paste
  (setq webpaste-paste-confirmation t))
#+end_src
*** matrix
- wait, matrix in emacs? Yes, call it =ement.el=
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package ement
  :defines
  (ement-room-minibuffer-map
   ement-room-mode-map)
  :functions
  (ement--read-sessions
   ement-connect)
  :commands
  (d/ement-connect)

  :bind
  (:map ement-room-minibuffer-map
        ("<f6>" . ement-room-compose-from-minibuffer))
  (:map ement-room-mode-map
        ("M-<" . ement-room-scroll-down-command))
  :custom
  (ement-room-send-message-filter 'ement-room-send-org-filter)
  (ement-room-message-format-spec "%S> %L%B%r%R%t")
  (ement-room-list-avatars nil)
  (ement-save-sessions t)
  :config
  ;; copied from viru (ement github)
  (defun d/ement-connect ()
    (interactive)
    (if (ement--read-sessions)
        (call-interactively #'ement-connect)
      (let* ((found (auth-source-search :max 1
                                        :host "matrix.org"
                                        :port "8448"
                                        :require '(:user :secret)))
             (entry (nth 0 found))
             (password (funcall (plist-get entry :secret)))
             (user (plist-get entry :user)))
        (ement-connect :user-id user :password password)))))
#+end_src
*** droidMacs
- Legit Emacs works very well on Android.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; access phone storage as default
;; Better is to symlink file to ~/ itself

;;(setq default-directory "/storage/emulated/0/")

(when d/on-droid
  (custom-set-variables
   '(touch-screen-precision-scroll t)
   '(touch-screen-display-keyboard t)
   '(browse-url-android-share t))

  ;; credits to https://github.com/danijelcamdzic/dotemacs/
  (setq display-buffer-alist
        '((".*" (display-buffer-same-window) (inhibit-same-window . nil))))

  ;; Add tool-bar options for zooming in
  (tool-bar-add-item "zoom-in" 'text-scale-increase
                     'text-scale-increase
                     :help "Zoom In")

  ;; Add tool-bar options for zooming out
  (tool-bar-add-item "zoom-out" 'text-scale-decrease
                     'text-scale-decrease
                     :help "Zoom Out")

  ;; Add tool-bar option for Org Cycle
  (tool-bar-add-item "right-arrow" 'org-cycle
                     'org-cycle
                     :help "Org Cycle")

  ;; Add tool-bar option for Org Ctrl-C Ctrl-C
  (tool-bar-add-item "prev-node" 'org-ctrl-c-ctrl-c
                     'org-ctrl-c-ctrl-c
                     :help "Execute Org Ctrl-C Ctrl-C")

  (defun d/key-droid()
    "To enable touch screen keyboard"
    (interactive)
    (frame-toggle-on-screen-keyboard (selected-frame) nil)
    )
  )
;; (setq use-dialog-box nil)
#+end_src
**** notify-droid
- Thanks to [[https://github.com/danijelcamdzic/dotemacs/blob/main/elisp/org-config.el][danijelcamdzic]], now emacs android can have notification from org agenda.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(require 'alert)
(when d/on-droid
  ;; Org-alert functions

  (defun alert-android-notifications-notify (info)
    "Send notifications using `android-notifications-notify'.
`android-notifications-notify' is a built-in function in the native Emacs
Android port."
    (let ((title (or (plist-get info :title) "Android Notifications Alert"))
          (body (or (plist-get info :message) ""))
          (urgency (cdr (assq (plist-get info :severity)
                              alert-notifications-priorities)))
          (icon (or (plist-get info :icon) alert-default-icon))
          (replaces-id (gethash (plist-get info :id) alert-notifications-ids)))
      (android-notifications-notify
       :title title
       :body body
       :urgency urgency
       :icon icon
       :replaces-id replaces-id)))


  (alert-define-style 'android-notifications :title "Android Notifications"
                      :notifier #'alert-android-notifications-notify
                      )
  (setq alert-default-icon "ic_popup_reminder")
  )
#+end_src
** bluetooth
- I dont prefer to use bluetooth, dongle or wired equips are better.
#+name: nixos-core
#+begin_src nix :tangle no
{
  hardware.bluetooth = {
    enable = true;
    package = pkgs.bluez;
    settings = {
      General = {
        FastConnectable = true;
        JustWorksRepairing = "always";
        Privacy = "device";
        Experimental = true;
      };
    };
  };

  # https://github.com/NixOS/nixpkgs/issues/114222
  systemd.user.services.telephony_client.enable = false;
}
#+end_src

* Appearance
- The aesthetic, eye pleasing, focused, zen setup.
** Wayland
- Future of linux desktop? Idk why people call that, when legit Linux is the only desktop that does best.
*** hyprland
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  # the thing is you won't get xdg-portal-hyprland
  # refer: https://github.com/nix-community/home-manager/issues/1167
  # # enable hyprland
  wayland.windowManager.hyprland = {
    enable = true;
    systemd.enable = true;

    extraConfig = ''
    source					= ~/.config/hypr/hyprsea.conf
    '';

    settings = {

      decoration = {
        rounding = 10;
        inactive_opacity = 0.8;
        active_opacity = 0.9;
        fullscreen_opacity = 1.0;
        dim_inactive = false;
        shadow_offset = "0 5";
        "col.shadow" = "rgba(00000099)";

        blur = {
          enabled = 1;
          size = 6;
          passes = 3;
          new_optimizations = true;
          ignore_opacity = true;
        };
      };

      "$mod" = "super";

      input = {
        kb_layout = "us";
        kb_options = "ctrl:nocaps";
        follow_mouse = 0;
        sensitivity = 0.1;
        #    repeat_delay = 250

        touchpad = {
          natural_scroll = "no";
          disable_while_typing = 1;
          clickfinger_behavior = 0; # double tap > right click
          middle_button_emulation = 1;
          tap-to-click = 1;
        };
      };

      "device:at-translated-set-2-keyboard" = {
        enabled=true;
      };

      general  =  {
        gaps_in = 5;
        gaps_out = 15;
        border_size = 2;
        "col.active_border"  =  "rgba(e5b9c6ff) rgba(c293a3ff) 45deg";
        "col.inactive_border"  =  "0xff382d2e";
        no_border_on_floating  =  false; # enable border on float window
        layout  =  "dwindle";
        no_cursor_warps  =  false;
      };

      misc = {
        disable_hyprland_logo = true;
        disable_splash_rendering = true;
        mouse_move_enables_dpms = true;
        enable_swallow = true;
        swallow_regex = "^(foot)$";
        vrr = false;
      };

      animations = {
        enabled = true;
      };

      dwindle = {
        pseudotile = true;
        preserve_split = true;
        force_split = true;
        no_gaps_when_only = false;
        default_split_ratio = 1.0;
        smart_split = false;
      };

      master = {
        new_is_master = false;
        new_on_top = false;
        allow_small_split = true;
        no_gaps_when_only = false;
      };

      gestures  =  {
        workspace_swipe = 1;
        workspace_swipe_distance = 400;
        workspace_swipe_invert = 1;
        workspace_swipe_min_speed_to_force = 30;
        workspace_swipe_cancel_ratio = 0.5;
      };

      bindm = [
        # mouse movements
        "$mod, mouse:272, movewindow"
        "$mod, mouse:273, resizewindow"
        "$mod alt, mouse:272, resizewindow"
      ];


    };
  };

  # naming it main.conf becuase hm writes hyprland.conf, so just as an import
  xdg.configFile."hypr/hyprsea.conf".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/hyprsea.conf";
}
#+end_src
*** hyprland.conf
- more additional hyprland conf for quick reloads
#+begin_src conf :tangle ./gdk/configs/hyprsea.conf
monitor = ,2880x1800@60,auto,auto
monitor = HDMI-A-1,1920x1080,0x0,1
# monitor = HDMI-A-1,1920x1080,0x0,1,mirror,eDP-1

# ---- Autostart Apps ----

exec-once=waybar
# exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = wl-paste --type text --watch cliphist store
exec-once = wl-paste --type image --watch cliphist store
# exec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
# exec-once = hyprctl setcursor Bibata-Modern-Classic
#exec-once = swayidle timeout 150 'gtklock -b black & sleep 1 && systemctl suspend' before-sleep 'loginctl lock-session' lock 'gtklock -b black'
exec-once = swayidle -w timeout 300 'gtklock -b black -d' timeout 210 'hyprctl dispatch dpms off' resume 'hyprctl dispatch dpms on' timeout 301 'if pgrep gtklock; then hyprctl dispatch dpms off; fi' resume 'if pgrep gtklock; then hyprctl dispatch dpms on; fi' before-sleep 'gtklock -b black -d' lock 'gtklock -b black -d' timeout 1000 'd-idle'
# exec-once = gammastep -l 19:72 -t 6500:4100
exec-once = d-walls
exec-once = foot --server
exec-once = emacs --bg-daemon

# --- Local var ---
# misc {
# swallow_regex=^(footclient)$
# }

general {
col.active_border=rgba(2e8b57ff) rgba(87cefaff) 45deg
col.inactive_border=0xff382D2E
gaps_in = 0;
gaps_out = 0;
}

decoration {
rounding = 0;
}


# █░█░█ █ █▄░█ █▀▄ █▀█ █░█░█   █▀█ █░█ █░░ █▀▀ █▀
# ▀▄▀▄▀ █ █░▀█ █▄▀ █▄█ ▀▄▀▄▀   █▀▄ █▄█ █▄▄ ██▄ ▄█

# Opacity
# windowrulev2 = opacity 0.90 0.90,class:^(Brave-browser)$
# windowrulev2 = opacity 0.80 0.80,class:^(pcmanfm)$

# Position
windowrulev2 = float,title:^(Media viewer)$
windowrulev2 = float,title:^(Volume Control)$
windowrulev2 = float,title:^(Picture-in-Picture)$
windowrulev2 = float,class:^(Viewnior)$
windowrulev2 = float,title:^(DevTools)$
windowrulev2 = float,class:^(file_progress)$
windowrulev2 = float,class:^(confirm)$
windowrulev2 = float,class:^(dialog)$
windowrulev2 = float,class:^(download)$
windowrulev2 = float,class:^(notification)$
windowrulev2 = float,class:^(error)$
windowrulev2 = float,class:^(confirmreset)$
windowrulev2 = float,title:^(Open File)$
windowrulev2 = float,title:^(branchdialog)$
windowrulev2 = float,title:^(Confirm to replace files)
windowrulev2 = float,title:^(File Operation Progress)

windowrulev2 = move 75 44%,title:^(Volume Control)$

# Size
windowrulev2 = size 800 600,class:^(download)$
windowrulev2 = size 800 600,title:^(Open File)$
windowrulev2 = size 800 600,title:^(Save File)$
windowrulev2 = size 800 600,title:^(Volume Control)$

windowrulev2 = idleinhibit fullscreen,class:^(Brave-browser)$
# idle inhibit while watching videos
windowrulev2 = idleinhibit focus, class:^(mpv|.+exe)$
windowrulev2 = idleinhibit focus, class:^(Freetube)$
windowrulev2 = idleinhibit focus, class:^(firefox)$, title:^(.*YouTube.*)$
windowrulev2 = idleinhibit fullscreen, class:^(firefox)$

# xwaylandvideobridge
windowrulev2 = opacity 0.0 override 0.0 override,class:^(xwaylandvideobridge)$
windowrulev2 = noanim,class:^(xwaylandvideobridge)$
windowrulev2 = nofocus,class:^(xwaylandvideobridge)$
windowrulev2 = noinitialfocus,class:^(xwaylandvideobridge)$

windowrule = opaque,chromium
windowrule = opaque,firefox
windowrule = opaque,emacs
windowrule = opaque,foot

windowrule = float,ncmpcpp
windowrule = float,viewnior

windowrule = float,mpv
windowrule = opaque,mpv
windowrule = noanim,mpv
windowrule = noblur,mpv
windowrulev2 = move 80% 65%, class:^(mpv)$, title:^(podcast)$
windowrulev2 = workspace special, class:^(mpv)$, title:^(podcast)$

#### webcam setting #####
windowrulev2 = rounding 20,title:^(webcam)$
windowrule = size 20% 25%, title:webcam
windowrulev2 = move 78% 72%, title:webcam
bind = SUPER, F7, exec, mpv av://v4l2:/dev/video0 --profile=low-latency --untimed --video-zoom=1.3 --title=webcam

windowrulev2 = fullscreen,class:(chromium)
windowrulev2 = fullscreen,class:(emacs)
windowrulev2 = float, class:^(firefox)$, title:^(Firefox — Sharing Indicator)$
windowrule = opaque,imv

windowrulev2 = size 60% 70%,title:^(BrowserInput.*)$
windowrulev2 = center,title:^(BrowserInput.*)
windowrulev2 = float,title:^(BrowserInput.*)
#windowrulev2 = workspace special, title:^(BrowserInput.*)
windowrulev2 = size 800 600,class:^(download)$
windowrulev2 = size 800 600,title:^(Open File)$
windowrulev2 = size 800 600,title:^(Save File)$
windowrulev2 = size 800 600,title:^(Volume Control)$

windowrulev2 = idleinhibit fullscreen,class:^(Brave-browser)$


blurls = rofi
blurls = waybar
blurls = menu
blurls = gtk-layer-shell
blurls = notifications

# █▄▀ █▀▀ █▄█ █▄▄ █ █▄░█ █▀▄
# █░█ ██▄ ░█░ █▄█ █ █░▀█ █▄▀
bind = SUPER,e,exec,d-note
bind = SUPER,y,exec,ytfzf -D
bind = SUPER,x,exec,d-power
# bind = SUPER,period,exec,d-dict
bind = SUPERSHIFT,b,exec,d-bookmark
bind = SUPER,m,exec,d-urls
bind = SUPER,Insert,exec,d-urls

bind = SUPER,grave,exec,d-unicodes
bind = SUPER,Delete,exec,pkill -INT wl-screenrec && pkill -RTMIN+8 waybar

bind = CONTROL,F1,exec,hyprctl dispatch dpms on
bind = SUPER,F1,exec,d-keys
bind = SUPER,F2,exec,brightnessctl set 2%-
bind = SUPER,F3,exec,brightnessctl set +2%
bind = SUPER,F5,exec,d-walls
bind = SUPER,F8,exec,mpv --untimed --geometry = 35%-30-30 --no-cache --no-osc --no-input-default-bindings --profile = low-latency --input-conf = /dev/null --title = webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)
bind = SUPER,F11,exec,d-mpdplay
bind = SUPER,F10,exec,mpc prev
bind = SUPER,F12,exec,mpc next


# █▀ █▀▀ █▀█ █▀▀ █▀▀ █▄░█ █▀ █░█ █▀█ ▀█▀
# ▄█ █▄▄ █▀▄ ██▄ ██▄ █░▀█ ▄█ █▀█ █▄█ ░█░
bind=,Print,exec,d-sshot
bind=CONTROL,Insert,exec,d-sshot
bind=SUPER,F4,exec,d-record


# █▀▄▀█ █ █▀ █▀▀
# █░▀░█ █ ▄█ █▄▄
bind = SUPER, RETURN, exec, pgrep emacs && emacsclient -c -e "(eshell)" || footclient
bind = SUPERSHIFT, RETURN, exec, footclient
bind = SUPERSHIFT, Q, killactive,
bind = SUPERSHIFT, R, exec, hyprctl reload
bind = SUPERCONTROL, Q, exit,
bind = SUPER, F12, exec, emacsclient -c -e "(multi-vterm)"
bind = SUPER, SPACE, togglefloating,

# bind = SUPER, d, exec, bemenu-run -W 0.25 -l 8
bind = SUPER, d, exec, rofi -show drun

bind = SUPER, b, exec, pkill -SIGUSR1 waybar || pidof -x waybar || waybar

bind=,XF86AudioRaiseVolume,exec,d-volume up
bind=,XF86AudioLowerVolume,exec,d-volume down
bind=,XF86AudioMute,exec,d-volume mute
bind=,XF86MonBrightnessUp, exec, brightnessctl set +2%
bind=,XF86MonBrightnessDown, exec, brightnessctl set 2%-


# █░█░█ █ █▄░█ █▀▄ █▀█ █░█░█   █▀▄▀█ ▄▀█ █▄░█ ▄▀█ █▀▀ █▀▄▀█ █▀▀ █▄░█ ▀█▀
# ▀▄▀▄▀ █ █░▀█ █▄▀ █▄█ ▀▄▀▄▀   █░▀░█ █▀█ █░▀█ █▀█ █▄█ █░▀░█ ██▄ █░▀█ ░█░
bind = SUPER,T,pseudo,
bind = SUPER,F,fullscreen,
bind = SUPER, S, togglesplit, # dwindle
bind = SUPER, v, pin # pin a window to all workspace
# Change Workspace Mode
bind = SUPER SHIFT, Space, workspaceopt, allfloat
bind = SUPER SHIFT, Space, exec, $notifycmd 'Toggled All Float Mode'
bind = SUPER SHIFT, T, workspaceopt, allpseudo
bind = SUPER SHIFT, T, exec, $notifycmd 'Toggled All Pseudo Mode'

bind = SUPER ALT, j, cyclenext,
bind = SUPER ALT, j, bringactivetotop,


# █▀▀ █▀█ █▀▀ █░█ █▀
# █▀░ █▄█ █▄▄ █▄█ ▄█
bind = SUPER, k, cyclenext
bind = SUPER, j, cyclenext

# █▀▄▀█ █▀█ █░█ █▀▀
# █░▀░█ █▄█ ▀▄▀ ██▄
bind = SUPER SHIFT, left, movewindow, l
bind = SUPER SHIFT, right, movewindow, r
bind = SUPER SHIFT, up, movewindow, u
bind = SUPER SHIFT, down, movewindow, d

bind = SUPER SHIFT, h, movewindow, l
bind = SUPER SHIFT, l, movewindow, r
bind = SUPER SHIFT, k, movewindow, u
bind = SUPER SHIFT, j, movewindow, d

# █▀█ █▀▀ █▀ █ ▀█ █▀▀
# █▀▄ ██▄ ▄█ █ █▄ ██▄
bind = SUPER CTRL, left, resizeactive, -20 0
bind = SUPER CTRL, right, resizeactive, 20 0
bind = SUPER CTRL, up, resizeactive, 0 -20
bind = SUPER CTRL, down, resizeactive, 0 20

bind = SUPER CTRL, h, resizeactive, -20 0
bind = SUPER CTRL, l, resizeactive, 20 0
bind = SUPER CTRL, k, resizeactive, 0 -20
bind = SUPER CTRL, j, resizeactive, 0 20

# ▀█▀ ▄▀█ █▄▄ █▄▄ █▀▀ █▀▄
# ░█░ █▀█ █▄█ █▄█ ██▄ █▄▀
bind = SUPER, g, togglegroup
bind = SUPER, t, changegroupactive

# █▀ █▀█ █▀▀ █▀▀ █ ▄▀█ █░░
# ▄█ █▀▀ ██▄ █▄▄ █ █▀█ █▄▄
bind = SUPER, a, togglespecialworkspace
bind = SUPERSHIFT, a, movetoworkspace, special
# bind = SUPER, a, exec, $notifycmd 'Toggled Special Workspace'
bind = SUPER, c, exec, hyprctl dispatch centerwindow

# █▀ █░█░█ █ ▀█▀ █▀▀ █░█
# ▄█ ▀▄▀▄▀ █ ░█░ █▄▄ █▀█
bind = SUPER, 1, workspace, 1
bind = SUPER, 2, workspace, 2
bind = SUPER, 3, workspace, 3
bind = SUPER, 4, workspace, 4
bind = SUPER, 5, workspace, 5
bind = SUPER, 6, workspace, 6
bind = SUPER, 7, workspace, 7
bind = SUPER, 8, workspace, 8
bind = SUPER, 9, workspace, 9
bind = SUPER, 0, workspace, 10
bind = SUPER, TAB, workspace, e+1
bind = SUPERSHIFT, TAB, workspace, e-1

# █▀▄▀█ █▀█ █░█ █▀▀
# █░▀░█ █▄█ ▀▄▀ ██▄
bind = SUPER ALT, 1, movetoworkspace, 1
bind = SUPER ALT, 2, movetoworkspace, 2
bind = SUPER ALT, 3, movetoworkspace, 3
bind = SUPER ALT, 4, movetoworkspace, 4
bind = SUPER ALT, 5, movetoworkspace, 5
bind = SUPER ALT, 6, movetoworkspace, 6
bind = SUPER ALT, 7, movetoworkspace, 7
bind = SUPER ALT, 8, movetoworkspace, 8
bind = SUPER ALT, 9, movetoworkspace, 9
bind = SUPER ALT, 0, movetoworkspace, 10
# Layout Change
bind = SUPER, w, exec, hyprctl keyword general:layout "dwindle"
bind = SUPERSHIFT, w, exec, hyprctl keyword general:layout "master"


# █▀▄▀█ █▀█ █░█ █▀ █▀▀   █▄▄ █ █▄░█ █▀▄ █ █▄░█ █▀▀
# █░▀░█ █▄█ █▄█ ▄█ ██▄   █▄█ █ █░▀█ █▄▀ █ █░▀█ █▄█
bindm = SUPER, mouse:272, movewindow
bindm = SUPER, mouse:273, resizewindow
bind = SUPER, mouse_down, workspace, e+1
bind = SUPER, mouse_up, workspace, e-1

# Move window silently to workspace Super + Alt + [0-9]
bind = SUPER SHIFT, 1, movetoworkspacesilent, 1
bind = SUPER SHIFT, 2, movetoworkspacesilent, 2
bind = SUPER SHIFT, 3, movetoworkspacesilent, 3
bind = SUPER SHIFT, 4, movetoworkspacesilent, 4
bind = SUPER SHIFT, 5, movetoworkspacesilent, 5
bind = SUPER SHIFT, 6, movetoworkspacesilent, 6
bind = SUPER SHIFT, 7, movetoworkspacesilent, 7
bind = SUPER SHIFT, 8, movetoworkspacesilent, 8
bind = SUPER SHIFT, 9, movetoworkspacesilent, 9
bind = SUPER SHIFT, 0, movetoworkspacesilent, 10


# Key Chords
bind=SUPER,period,submap,Wordz
submap=Wordz
bind=,d,exec,d-dict
bind=,d,submap,reset

bind=,a,exec,d-vocab
bind=,a,submap,reset

bind=,v,exec,wtype "$(cat ~/.local/share/dict/myglossary | bemenu | awk '{print $1}')"
bind=,v,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset


bind=SUPER,O,submap,Scripts
submap=Scripts
bind=,o,exec,d-menu
bind=,o,submap,reset

bind=,i,exec,d-stuff
bind=,i,submap,reset

bind=,p,exec,d-pirt
bind=,p,submap,reset

bind=,x,exec,d-power
bind=,x,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset

bind=SUPER,P,submap,Apps
submap=Apps

bind=,p,exec,sioyek
bind=,p,submap,reset

bind=,f,exec,firefox
bind=,f,submap,reset

bind=,b,exec,brave
bind=,b,submap,reset

bind=,w,exec,librewolf
bind=,w,submap,reset

bind=,c,exec,chromium
bind=,c,submap,reset

bind=,y,exec,freetube
bind=,y,submap,reset

bind=,e,exec,emacsclient -c
bind=,e,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset

bind=SUPER,C,submap,Controls
submap=Controls

bind=SHIFT,equal,exec, pamixer -ui 5
bind=,minus,exec, pamixer -ud 5
bind=,m,exec, pamixer -t
bind=,m,submap,reset
bind=,p,exec, mpc toggle
bind=,p,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset
#+end_src
*** wayland-packages
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    # screenshot
    grim
    slurp

    libnotify libsixel bemenu
    brightnessctl
    wtype swaybg swayidle gtklock
    rofi-wayland

    # utils
    # ocrscript
    wl-screenrec
    wl-clipboard
  ];
}
#+end_src
** Fonts
#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  fonts = {
    packages = with pkgs; [
      noto-fonts unifont
      # symbola # this font is unfree
      noto-fonts-emoji maple-mono julia-mono
      (callPackage ./pkgs/code-d-font.nix {})

      (nerdfonts.override {fonts = [ "JetBrainsMono"  ];})
    ];

    enableDefaultPackages = true;

    # this fixes emoji stuff
    fontconfig = {
      defaultFonts = {
        monospace = [
	        "Code D OnePiece"
	        "JetBrainsMono Nerd Font"
	        "Noto Color Emoji"
        ];
        sansSerif = [ "Code D Haki" "Noto Sans" "Noto Serif" ];
        serif = [ "Code D Haki" "Noto Sans" "Noto Serif"];
        emoji = [ "Noto Color Emoji" "Code D Lip" "Symbola" "Noto Sans" ];
      };
    };
  };

}
#+end_src
*** code-d-font
#+begin_src nix :tangle gdk/pkgs/code-d-font.nix
{ lib, fetchgit, stdenvNoCC }:

stdenvNoCC.mkDerivation rec {
  pname = "code-d-font";
  version = "1.085";

  src = fetchgit {
    url = "https://github.com/idlip/code-d-font";
    sparseCheckout = [
      "fonts"
    ];
    sha256 = "sha256-+0yK0CEZsXJGoOxJY12ARrHvmWhaQGER+BXi0xzR7uk=";
  };

  installPhase = ''
    install -D -t $out/share/fonts/truetype/ $(find $src -type f -name '*.ttf')
  '';


  meta = with lib; {
    homepage = "https://github.com/arrowtype/recursive-code-config/";
    description = "A variable font family for code & UI";
    license = licenses.ofl;
    maintainers = [ maintainers.idlip ];
    platforms = platforms.all;
  };
}

#+end_src
*** set-face
- Set fonts for emacs.
- Defining some variables for adjusting size and font name.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defvar d/font-size (if d/on-droid 150 140)
  "Default font size based on the system.")
(defvar d/variable-font-size (if d/on-droid 160 160)
  "Default variable pitch size")

;; Dont worry about the font name, I use fork of Recursive font

;; Set reusable font name variables
(defvar d/fixed-pitch-font "Code D OnePiece"
  "The font to use for monospaced (fixed width) text.")

(defvar d/variable-pitch-font "Code D Haki"
  "The font to use for variable-pitch (documents) text.")
#+end_src
- Invoking fonts.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package faces
  :ensure nil
  :defines
  (d/on-droid
   d/variable-font-size
   d/fixed-pitch-font
   d/variable-pitch-font
   d/font-size)

  :custom
  (face-font-family-alternatives
   '(("Monospace" "Code D OnePiece" "JetBrainsMono Nerd Font")
     ("Consolas" "JetBrainsMono Nerd Font" "Roboto Mono" "PT Mono" "Terminus" "Monospace")
     ("Monospace Serif" "CMU Typewriter Text" "Courier 10 Pitch" "Monospace")
     ("Serif" "Alegreya" "Noto Sans" "Georgia" "Cambria" "Times New Roman" "DejaVu Serif" "serif")))

  :custom-face
  (variable-pitch ((t (:family ,d/variable-pitch-font :height ,d/variable-font-size))))
  (fixed-pitch ((t (:family ,d/fixed-pitch-font :height ,d/font-size))))
  (default ((t (:family ,d/fixed-pitch-font :height ,d/font-size)))))
#+end_src
- font-lock
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package font-lock
  :ensure nil
  :defer t
  :custom ((font-lock-maximum-decoration t)
           (font-lock-global-modes '(not text-mode))
           (font-lock-verbose nil))
  :config
  (set-language-environment "UTF-8")
  (global-font-lock-mode 1))
#+end_src
*** Icons
- To visualize and minimize the text.
- Nerd-icons
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package nerd-icons
  :custom
  (nerd-icons-font-family d/fixed-pitch-font))
#+end_src
- Nerd icons in dired
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src
- nerd icons in completions
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package nerd-icons-completion
  :functions (nerd-icons-completion-mode)
  :unless d/on-droid
  :init
  (nerd-icons-completion-mode))
#+end_src
**** nerd icons in corfu
+ the code is directly taken from git [[https://github.com/LuigiPiucco/nerd-icons-corfu][repo]].
+ currently getting an error saying "void-variable kindfunc"
+ Don't know why suddenly throwing this error on <2023-12-28 17:00>, when before and all it worked well.
#+name: orgmacs
#+begin_src emacs-lisp :tangle no
(define-widget 'nerd-icons-corfu-icon-type 'plist
  "The type of an icon mapping."
  :tag "Icon parameters"
  :options '((:style (choice (const :tag "wicon" "w")
                             (const :tag "faicon" "fa")
                             (const :tag "flicon" "fl")
                             (const :tag "mdicon" "md")
                             (const :tag "codicon" "cod")
                             (const :tag "devicon" "dev")
                             (const :tag "ipsicon" "ips")
                             (const :tag "octicon" "oct")
                             (const :tag "pomicon" "pom")
                             (const :tag "sucicon" "suc")))
             (:icon string)
             (:face face)))

(defcustom nerd-icons-corfu-mapping
  '((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
    (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
    (class :style "cod" :icon "symbol_class" :face font-lock-type-face)
    (color :style "cod" :icon "symbol_color" :face success)
    (command :style "cod" :icon "terminal" :face default)
    (constant :style "cod" :icon "symbol_constant" :face font-lock-constant-face)
    (constructor :style "cod" :icon "triangle_right" :face font-lock-function-name-face)
    (enummember :style "cod" :icon "symbol_enum_member" :face font-lock-builtin-face)
    (enum-member :style "cod" :icon "symbol_enum_member" :face font-lock-builtin-face)
    (enum :style "cod" :icon "symbol_enum" :face font-lock-builtin-face)
    (event :style "cod" :icon "symbol_event" :face font-lock-warning-face)
    (field :style "cod" :icon "symbol_field" :face font-lock-variable-name-face)
    (file :style "cod" :icon "symbol_file" :face font-lock-string-face)
    (folder :style "cod" :icon "folder" :face font-lock-doc-face)
    (interface :style "cod" :icon "symbol_interface" :face font-lock-type-face)
    (keyword :style "cod" :icon "symbol_keyword" :face font-lock-keyword-face)
    (macro :style "cod" :icon "symbol_misc" :face font-lock-keyword-face)
    (magic :style "cod" :icon "wand" :face font-lock-builtin-face)
    (method :style "cod" :icon "symbol_method" :face font-lock-function-name-face)
    (function :style "cod" :icon "symbol_method" :face font-lock-function-name-face)
    (module :style "cod" :icon "file_submodule" :face font-lock-preprocessor-face)
    (numeric :style "cod" :icon "symbol_numeric" :face font-lock-builtin-face)
    (operator :style "cod" :icon "symbol_operator" :face font-lock-comment-delimiter-face)
    (param :style "cod" :icon "symbol_parameter" :face default)
    (property :style "cod" :icon "symbol_property" :face font-lock-variable-name-face)
    (reference :style "cod" :icon "references" :face font-lock-variable-name-face)
    (snippet :style "cod" :icon "symbol_snippet" :face font-lock-string-face)
    (string :style "cod" :icon "symbol_string" :face font-lock-string-face)
    (struct :style "cod" :icon "symbol_structure" :face font-lock-variable-name-face)
    (text :style "cod" :icon "text_size" :face font-lock-doc-face)
    (typeparameter :style "cod" :icon "list_unordered" :face font-lock-type-face)
    (type-parameter :style "cod" :icon "list_unordered" :face font-lock-type-face)
    (unit :style "cod" :icon "symbol_ruler" :face font-lock-constant-face)
    (value :style "cod" :icon "symbol_field" :face font-lock-builtin-face)
    (variable :style "cod" :icon "symbol_variable" :face font-lock-variable-name-face)
    (t :style "cod" :icon "code" :face font-lock-warning-face))
  "Mapping of completion kinds to icons.

It should be a list of elements with the form (KIND :style ICON-STY :icon
ICON-NAME [:face FACE]).  KIND is a symbol determining what the completion is,
and comes from calling the `:company-kind' property of the completion. ICON-STY
is a string with the icon style to use, from those available in Nerd Fonts.
ICON-NAME is a string with the name of the icon.  FACE, if present, is applied
to the icon, mainly for its color. The special t symbol should be used for KIND
to represent the default icon, and must be present."
  :type '(alist :key-type symbol :value-type nerd-icons-corfu-icon-type)
  :group 'nerd-icons-corfu)

;;;###autoload
(defun nerd-icons-corfu-formatter (_)
  "A margin formatter for Corfu, adding icons.

It receives METADATA, ignores it, and outputs a function that takes a candidate
and returns the icon."
  (when-let ((kindfunc (plist-get completion-extra-properties :company-kind)))
    (lambda (cand)
      (let* ((kind (funcall kindfunc cand))
             (icon-entry (or (alist-get (or kind t) nerd-icons-corfu-mapping)
                             (alist-get t nerd-icons-corfu-mapping)))
             (style (plist-get icon-entry :style))
             (icon (plist-get icon-entry :icon))
             (icon-fun (intern (concat "nerd-icons-" style "icon")))
             (icon-name (concat "nf-" style "-" icon))
             (face (plist-get icon-entry :face))
             (str (or (and (fboundp icon-fun) (funcall icon-fun icon-name :face face)) "?"))
             (space (propertize " " 'display '(space :width 1))))
        (concat " " str space)))))

(with-eval-after-load 'corfu
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
** Theme
*** GTK
- Glorious, aesthetic and pleasant desktop colourscheme.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  # cursor theme
  home.pointerCursor = {
    name = "Bibata-Modern-Classic";
    package = pkgs.bibata-cursors;
    size = 24;
    gtk.enable = true;
  };

  gtk = {
    enable = true;

    theme = {
      name = "adw-gtk3-dark";
      package = pkgs.adw-gtk3;
    };

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    font = {
      name = "Code D Haki";
      size = 17;
    };

    gtk2.configLocation = "${config.xdg.configHome}/gtk-2.0/gtkrc";

    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
    };

    gtk2.extraConfig = ''
    gtk-xft-antialias=1
    gtk-xft-hinting=1
    gtk-xft-hintstyle="hintslight"
    gtk-xft-rgba="rgb"
    '';

  };
}
#+end_src

*** qt
- to set qt theme appropriately, even with this config, kdeConnect looks bare bone.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  qt = {
    enable = true;
    platformTheme = "gtk3";
    style.name = "adwaita-dark";
  };
}
#+end_src

*** Editor theme
- Emacs theme are good, there is doom-themes, modus-themes (masterpiece).
- After long usage, I felt every theme did not suit me, so I just wrote a theme ([[https://github.com/idlip/haki][haki]])
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package haki-theme
  :demand t
  :load-path "~/.config/emacs/var/theme"
  :custom
  (haki-heading-font "Code D Zoro")
  (haki-sans-font "Code D Haki")
  (haki-title-font "Code D Zoro")
  (haki-link-font "Maple Mono")
  (haki-code-font "Code D Lip")
  :config
  (load-theme 'haki t))
#+end_src
- Set colors properly for foot terminal.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(add-to-list 'term-file-aliases '("foot" . "xterm"))
#+end_src
- Modus-themes, the built-in master crafted.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package emacs
  :ensure nil

  :custom
  (modus-themes-italic-constructs t)
  (modus-themes-bold-constructs t)
  (modus-themes-mixed-fonts t)
  (modus-themes-variable-pitch-ui nil)
  (modus-themes-custom-auto-reload t)
  (modus-themes-disable-other-themes t)
  (modus-themes-prompts '(italic bold))
  (modus-themes-org-blocks 'gray-background)
  (modus-themes-completions
   '((matches . (extrabold))
     (selection . (semibold italic text-also))))

  (modus-themes-org-blocks 'gray-background)

  (modus-themes-headings
   '((1 . (variable-pitch 1.1))
     (2 . (1.1))
     (agenda-date . (1.2))
     (agenda-structure . (variable-pitch light 1.8))
     (t . (1.1)))))
#+end_src
** Olivetti
- Nice, focused writing environment for emacs.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package olivetti
  :defer t
  :hook
  (org-mode text-mode Info-mode helpful-mode ement-room-mode
            sdcv-mode nov-mode elfeed-show-mode markdown-mode)
  :custom
  (olivetti-body-width 0.92)
  (olivetti-minimum-body-width 40)
  (olivetti-recall-visual-line-mode-entry-state t)
  :delight " ⊛")
#+end_src
** Status bar/Mode-line
*** Waybar
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.waybar = {
    enable = true;

    settings = {
      mainBar = {
        layer = "top";
        position = "top";
        # height = 15;
        # spacing = 7;
        fixed-center = true;
        exclusive = true;

        modules-left = [
	        "custom/launcher"
	        "hyprland/workspaces"
          "wlr/taskbar"
	        "hyprland/window"
	        "hyprland/submap"
        ];

        modules-center = [
	        "custom/recorder" "clock" "mpd" "mpris"
        ];

        modules-right = [ "tray" "network" "battery" "memory" "pulseaudio" "custom/power" ];

        "hyprland/workspaces" = {
	        format = "{icon}";
          disable-scroll = true;
          all-outputs = true;
	        active-only = false;
          show-special = true;
	        on-click = "activate";
	        format-icons = {
		        active = "";
		        default = "";
		        "1" = "1";
		        "2" = "2";
		        "3" = "3";
		        "4" = "4";
		        "5" = "5";
		        "6" = "6";
	        };
        };

        "hyprland/window" = {
	        "format" = "{}";
	        "separate-outputs" = true;
          "max-length" = 35;
	        "rewrite" = {
		        "(.*) - Mozilla Firefox" = "🦊 $1";
		        "(.*) - LibreWolf" = "🐺 $1";
		        "(.*) - Brave" = "🦁 $1";
		        "(.*) - GNU Emacs (.*)" = " $1";
		        "(.*).epub(.*)" = "󰂽 $1";
		        "(.*)foot" = " Terminal $1";
	        };
        };

        "hyprland/submap" = {
	        "format" = " {}";
	        "max-length" = 14;
	        "tooltip" = false;
        };

	      "wlr/taskbar"=  {
		      "format"=  "{icon}";
		      "icon-size"=  18;
          "spacing"=  0;
		      "tooltip-format"=  "{title}";
		      "on-click"=  "activate";
		      "on-click-middle"=  "close";
	      };


        "custom/launcher" = {
	        "format" = "";
	        "tooltip" = false;
	        "on-click" = "rofi -show drun";
          "interval" = 86400;
        };

        "battery" =  {
	        "bat" =  "BAT1";
	        "interval" =  60;
	        "states" =  {
            "good" = 95;
		        "warning" = 40;
		        "critical" = 20;
	        };
	        "max-length" =  25;
          "format" = "{icon} {capacity}%";
          "format-charging" = " {capacity}%";
          "format-plugged" = " {capacity}%";
          "format-alt" = "{time} {icon}";
          "format-icons" = ["󰂎" "󰁺" "󰁻" "󰁼" "󰁽" "󰁾" "󰁿" "󰂀" "󰂁" "󰂂" "󰁹"];

        };

        "mpd" = {
	        "format" = "{stateIcon} {title}  ";
	        "format-disconnected" = "  ";
	        "format-stopped" = "  ";
	        "title-len" = 20;
	        "interval" = 10;
	        "on-click" = "mpc toggle";
	        "state-icons" = {
		        "paused" = "";
		        "playing" = "";
	        };
	        "tooltip-format" = "Mpd Connected";
	        "tooltip-format-disconnected" = "";
        };

        "mpris" = {
	        "format" = " {player_icon} {dynamic}";
	        "format-paused" = "{status_icon} <i>{dynamic}</i>";
	        "player-icons" = {
		        "default" = "▶";
		        "mpv" = "🎵";
	        };
	        "status-icons" = {
		        "paused" = "󰏤";
	        };
	        "max-length" = 20;
        };

	      "custom/power" = {
	        "format" = "⏻";
	        "on-click" = "d-power";
	        "tooltip" = false;
          "interval" = 86400;
        };

        "clock" = {
	        "tooltip-format" = "{:%A %B %d %Y | %H:%M}";
	        "format-alt" = " {:%a %d %b  %I:%M %p}";
	        "format" = " {:%H:%M}";
	        ##"timezones" = [ "Kolkata" ];
	        ##"max-length" = 200;
	        "interval" = 1;
        };

        "tray" = {
          "icon-size" = 23;
          "spacing" = 10;
        };

        "cpu" = {
	        "format" = "﬙ {usage: >3}%";
	        "on-click" = "footclient -e btop";
        };

        "memory" = {
	        "on-click" = "foot -e btop";
          "interval" = 30;
          "format" = "󰾆 {percentage}%";
          "format-alt" = "󰾅 {used}GB";
          "max-length" = 10;
        };

        "network" = {
	        # "interface" = "wlp2s0";
	        "format" = "⚠ Disabled";
	        "format-wifi" = " {bandwidthDownBytes}  {bandwidthUpBytes}";
          "format-ethernet" = " {bandwidthDownBytes}  {bandwidthUpBytes}";
	        "format-disconnected" = "⚠ Disconnected";
	        "on-click" = "d-wifi";
	        "interval" = 2;
        };

        "pulseaudio" = {
	        "scroll-step" = 2;
	        "format" = "{icon} {volume: >3}%";
	        "format-bluetooth" = "{icon} {volume: >3}%";
	        "format-muted" =" muted";
	        "on-click" = "pamixer -t";
	        "format-icons" = {
		        "headphones" = "";
		        "handsfree" = "";
		        "headset" = "";
		        "phone" = "";
		        "portable" = "";
		        "car" = "";
		        "default" = ["" ""];
	        };
        };

        "custom/recorder" = {
		      "format" = "{}";
		      "interval" = "once";
		      "exec" = "echo ' '";
		      "tooltip" = "false";
		      "exec-if" = "pgrep wl-screenrec";
		      "on-click" = "exec d-record";
		      "signal" = 8;
	      };

      };
    };
  };

  home.file.".config/waybar/style.css".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/style.css";

}
#+end_src
**** style.css
#+begin_src css :tangle ./gdk/configs/style.css
/* My own theme (Haki) made for emacs */

@define-color  bg-main	     #050505;
@define-color  bg-dim	     #121212;
@define-color  fg-main	     #ffffff;
@define-color  fg-dim	     #D8DEE9;
@define-color  fg-region     #2e8b6d;

@define-color  title        #6ae4b9;
@define-color  heading-1    #ab82ff;
@define-color  heading-2    #ffec8b;
@define-color  heading-3    #3cb6df;
@define-color  heading-4    #9aff9a;
@define-color  heading-5    #97ffff;
@define-color  heading-6    #ffa07a;
@define-color  heading-7    #eeb4b4;
@define-color  heading-8    #ee4000;
@define-color  heading-9    #cd96cd;

@define-color  error      #ee6363;
@define-color  link       #fcde69;
@define-color  todo       #54ff9f;
@define-color  done       #b4dddd;
@define-color  code       #77ee77;
@define-color  verbatim   #ee77ee;
@define-color  clock      #eedc82;
@define-color  bg-tag     #ffe1ff;
@define-color  bracket    #ffeeee;

,* {
    border: none;
    border-radius: 0px;
    font-family: "Code D Ace";
    font-weight: bold;
    font-size: 15px;
    min-height: 10px;
}

window#waybar {
    background: @bg-main;
}

tooltip {
    background: @bg-main;
    color: @fg-main;
    border-radius: 7px;
    border-width: 0px;
}

#workspaces button,
#taskbar button {
    box-shadow: none;
	text-shadow: none;
    padding: 0px;
    border-radius: 9px;
    margin-top: 3px;
    margin-bottom: 3px;
    padding-left: 3px;
    padding-right: 3px;
    color: @fg-main;
    animation: gradient_f 20s ease-in infinite;
    transition: all 0.5s cubic-bezier(.55,-0.68,.48,1.682);
}

#workspaces button.active,
#taskbar button.active {
    background: @fg-region;
    color: @bg-main;
    margin-left: 3px;
    padding-left: 12px;
    padding-right: 12px;
    margin-right: 3px;
    animation: gradient_f 20s ease-in infinite;
    transition: all 0.3s cubic-bezier(.55,-0.68,.48,1.682);
}

#workspaces button:hover,
#taskbar button:hover {
    background: @bg-dim;
    color: @fg-dim;
    padding-left: 3px;
    padding-right: 3px;
    animation: gradient_f 20s ease-in infinite;
    transition: all 0.3s cubic-bezier(.55,-0.68,.48,1.682);
}


#mode,
#clock,
#mpd,
#mpris,
#cpu,
#tray,
#memory,
#network,
#battery,
#pulseaudio,
#pulseaudio.muted,
#custom-launcher,
#custom-power,
#submap,
#window,
#workspaces {
    color: @fg-main;
    background: @bg-main;
    opacity: 1;
    margin: 4px 0px 4px 0px;
    padding-left: 4px;
    padding-right: 4px;

    /* color: transparent; */
}

/* /\* for window name *\/ */
/* #window { */
/*     color: @fg-region; */
/*     color: @fg-main; */
/* } */

/* window#waybar { */
/*     /\* background: @bg-main; *\/ */
/*     background: transparent; */
/* } */

/* window#waybar.hidden { */
/*     opacity: 0.2; */
/* } */

/* window#waybar.foot { */
/*     /\* border: 2px solid @code; *\/ */
/* } */
/* window#waybar.footclient { */
/*     /\* border: 2px solid @code; *\/ */
/* } */

/* window#waybar.emacs { */
/*     /\* border: 2px solid @heading-1; *\/ */
/* } */
/* window#waybar.brave { */
/*     /\* border: 2px solid @link; *\/ */
/* } */

/* #workspaces button { */
/*     color: @fg-main; */
/* } */

#battery.charging{
    color: @heading-4;
}

#battery.warning { background: orange; }
#battery.critical { background: red; }


#tray{
    color: @bg-tag;
}

#workspaces,
#taskbar {
    padding: 0px;
}


/* #mode { */
/*     color: @heading-8; */
/* } */

/* #clock { */
/*     color: @clock; */
/* } */

/* #mpd { */
/*     color: @heading-3; */
/*     font-family:Maple Mono; */
/*     font-style: italic; */
/* } */


/* #cpu { */
/*     color: @heading-4; */
/* } */

/* #memory { */
/*     color: @heading-5; */
/* } */

/* #network.disabled { */
/*     color: @done; */
/* } */

/* #network{ */
/*     color: @heading-6; */
/* } */


/* #network.disconnected { */
/*     color: @done; */
/* } */

/* #pulseaudio { */
/*     color: @heading-9; */
/* } */

/* #pulseaudio.muted { */
/*     color: @done; */
/* } */

/* #custom-launcher { */
/*     /\* background: linear-gradient(90deg, @title 28%, @heading-5 85%, @title 100%); *\/ */
/*     color: @fg-region; */
/* } */

/* #custom-power { */
/*     /\* color: linear-gradient(90deg, @error 28%, @error 85%, @error 100%); *\/ */
/*     color: @todo; */
/* } */

/* #submap { */
/*     color: @code; */
/* } */
#+end_src

*** Doom-modeline
- comprehensive mode-line information.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package doom-modeline
  :disabled t
  :functions
  (doom-modeline-mode)
  :init
  (doom-modeline-mode 1)
  :custom
  (doom-modeline-bar-width 7)
  (doom-modeline-major-mode-icon t)
  (inhibit-compacting-font-caches t)
  (doom-modeline-support-imenu t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-time-icon t)
  (doom-modeline-unicode-fallback t)
  (doom-modeline-buffer-name t)
  (doom-modeline-highlight-modified-buffer-name t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count t)
  (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-indent-info nil)
  (doom-modeline-checker-simple-format t)
  (doom-modeline-number-limit 99)
  (doom-modeline-vcs-max-length 12)
  (doom-modeline-workspace-name nil)
  (doom-modeline-persp-name nil)
  (doom-modeline-display-default-persp-name nil)
  (doom-modeline-persp-icon t)
  (doom-modeline-lsp t)
  (doom-modeline-github t)
  (doom-modeline-modal t)
  (doom-modeline-modal-icon t)
  (doom-modeline-battery t)
  (doom-modeline-env-version t)
  (doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (doom-modeline-env-load-string "...")

  (doom-modeline-height 30)
  (doom-modeline-buffer-encoding nil))
#+end_src
*** mini-Echo
- A new better way of looking at mode-line in echo area.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; new way of using mode-line with `mini-echo-mode`
(use-package mini-echo
  :unless d/on-droid
  :load-path "~/d-git/forks/mini-echo"
  :defer 1
  :custom
  (mini-echo-window-divider-args '(t 0 0) "no indicator border")
  (mini-echo-separator " ")
  (mini-echo-buffer-status-style 'both)
  (mini-echo-default-segments
   '(:long ("time" "battery" "buffer-name"
            "envrc"
            "buffer-position"
            ;; "buffer-size"
            "flycheck" "selection-info"
            "narrow"
            )
           :short ("buffer-name-short"
                   "selection-info" "narrow" "macro" "repeat")))

  (mini-echo-rules
   '((special-mode :both (("buffer-size" . 0)))
     (prog-mode :both (("vcs" . 1)))
     (dired-mode :both (("buffer-size" . 0)))))


  :config

  (defface mini-echo-elfeed
    '((t (:inherit elfeed-search-unread-count-face)))
    "Face for mini-echo segment of word count."
    :group 'mini-echo)

  ;; add elfeed unread counts
  (mini-echo-define-segment "elfeed"
    "Return unread feeds counts from elfeed."
    :fetch
    (propertize
     (let ((bufn "*elfeed-search*"))
       (if (get-buffer bufn)
           (concat "󰎕 "
                   (string-trim-right
                    (with-current-buffer bufn (elfeed-search--count-unread))
                    "/.*")) "")) 'face 'mini-echo-elfeed))

  (mini-echo-define-segment "battery"
    "Return the battery status.
Display format is inherited from `battery-mode-line-format'."
    :setup (display-battery-mode 1)
    :fetch
    (concat "󰂁"
            (string-trim (mini-echo-segment--extract battery-mode-line-string) "\\[" "\\]")))

  (mini-echo-define-segment "which-function"
    "Return the function at point using `which-function-mode'"
    :fetch
    (propertize
     (concat "󰡱 :"
             (string-trim
              (which-function)))
     'face 'which-func))

  (setopt mini-echo--toggled-segments '(("battery" . t)
                                        ("flycheck" . t)
                                        ("elfeed". t) ("time" . t)))

  (mini-echo-mode 1))
#+end_src
*** Toggle mode-line
- To toggle mode-line on and off.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(global-set-key [f9] #'toggle-mode-line)

(defun toggle-mode-line ()
  "toggle the modeline on and off."
  (interactive)
  (setq mode-line-format
        (if (equal mode-line-format nil)
            (default-value 'mode-line-format)))
  (redraw-display))
#+end_src
** Dashboard
- Emacs dashboard to welcome and greet us!
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package dashboard
  :functions (dashboard-setup-startup-hook)

  :bind (:map dashboard-mode-map
              ("n" . 'dashboard-next-line)
              ("p" . 'dashboard-previous-line)
              )

  :custom
  (initial-buffer-choice 'dashboard-open)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-banner-logo-title "let's get to more 🔱 tasks today!")
  ;; (dashboard-startup-banner "~/.config/emacs/var/butterfly.png")
  (dashboard-startup-banner 'logo)
  (dashboard-image-banner-max-width 100) ;; 100 for logo
  (dashboard-center-content t)
  (dashboard-set-navigator t) ;; a custom made navigator
  (dashboard-projects-backend 'project-el)
  (dashboard-display-icons-p t)
  (dashboard-show-shortcuts nil)
  (dashboard-set-init-info nil)
  (dashboard-icon-type 'nerd-icons)

  (dashboard-agenda-prefix-format " %i %-12:c%?-12t% s")
  (dashboard-agenda-time-string-format "%Y-%m-%d %H:%M")
  (dashboard-agenda-sort-strategy '(time-up))

  (dashboard-items
   '(
     ;; (recents . 4)
     (agenda . 10)
     ;; (projects . 3)
     ;; (bookmarks . 5)
     ))

  (dashboard-navigator-buttons
   `(;; line1
     ((,(nerd-icons-faicon "nf-fa-newspaper_o")
       " News"
       "Opens Elfeed"
       (lambda (&rest _) (d/elfeed-open)) nil "" " |")

      (,(nerd-icons-mdicon "nf-md-notebook")
       " Notes"
       "Denote Tree"
       (lambda (&rest _) (find-file "~/d-sync/notes/")) warning "" " |")

      (,(nerd-icons-faicon "nf-fa-gitlab")
       " Project"
       "Open Project finder"
       (lambda (&rest _) (project-find-file)) error "" " |")

      (,(nerd-icons-octicon "nf-oct-terminal")
       " Terminal"
       "Open Eshell/Eat"
       (lambda (&rest _) (if (string= (completing-read "Hello : " '("eat" "eshell")) "eat")
                             (eat) (eshell))) warning "" " |")

      (,(nerd-icons-mdicon "nf-md-library")
       " Library"
       "Books and Docs"
       (lambda (&rest _) (find-file "~/d-sync/reads")) nil "" "")
      )
     ;; line 2
     (
      (,(nerd-icons-faicon "nf-fa-music")
       " Music"
       "Play Jazz/Rhythm"
       (lambda (&rest _) (if d/on-droid (d/key-droid) (mingus))) error "" " |")

      (,(nerd-icons-faicon "nf-fa-reddit_alien")
       " Geek"
       "Browse Info"
       (lambda (&rest _) (reddigg-view-sub)) warning "" " |")

      (,(nerd-icons-mdicon "nf-md-apple_keyboard_command")
       " M-x"
       "Execute Command"
       (lambda (&rest _) (call-interactively #'execute-extended-command)) nil "" " |")

      (,(nerd-icons-sucicon "nf-seti-todo")
       " Agenda"
       "TODO Agenda"
       (lambda (&rest _) (when d/on-droid (d/key-droid)) (org-agenda)) warning "" " |")

      (,(nerd-icons-mdicon "nf-md-bookmark")
       " Bookmark"
       "Open Bookmark File"
       (lambda (&rest _) (d/open-bookmark)) error "" "")

      )
     ;; Empty line
     ;; (("" "\n" "" nil nil "" ""))

     ;; Keybindings
     ))

  ;; (dashboard-footer-messages '("Power Maketh Man Beneath" "Manners Maketh Man" "Tasks, Break, Action Works all the time" "Stop thinking, Just do it"))
  (dashboard-set-footer nil)

  :config
  (dashboard-setup-startup-hook))
#+end_src
** Beframe
- To manage emacs frame effectively, instead of tabs.
#+name: orgmacs
#+begin_src emacs-lisp :tangle no
(use-package beframe
  :unless d/on-droid
  :custom
  (beframe-global-buffers '("*scratch*"))
  :config
  (beframe-mode 1))
#+end_src
- Support consult-buffer with beframe
#+name: orgmacs
#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'consult
  (defface beframe-buffer
    '((t :inherit font-lock-string-face))
    "Face for `consult' framed buffers.")

  (defvar beframe-consult-source
    `( :name     "Frame-specific buffers (current frame)"
       :narrow   ?F
       :category buffer
       :face     beframe-buffer
       :history  beframe-history
       :items    ,#'beframe-buffer-names
       :action   ,#'switch-to-buffer
       :state    ,#'consult--buffer-state))

  (add-to-list 'consult-buffer-sources 'beframe-consult-source))
#+end_src
* Shell
*** CLI
- fast, robust cli tools.
| name    | desc         | exec | link |
| eza     | ~ls~ in rust   | =eza=  | [[https://github.com/eza-community/eza][git]]  |
| ripgrep | ~grep~ in rust | =rg=   | [[https://github.com/BurntSushi/ripgrep][git]]  |
| btop    | better ~htop~  | =btop= | [[https://github.com/aristocratos/btop][git]]  |
| bat     | ~cat~ in rust  | =bat=  | [[https://github.com/sharkdp/bat][git]]  |
| skim    | ~fzf~ in rust  | =sk=   | [[https://github.com/lotabout/skim][git]]     |
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs = {
    eza = {
      enable = true;
      extraOptions = ["--group-directories-first" "--header"];
      icons = true;
      enableAliases = false;
    };

    ripgrep = {
      enable = true;
      arguments = [
        "--max-columns-preview"
        "--colors=line:style:bold"
        "--ignore-case"
      ];
    };

    btop = {
      enable = true;
      settings = {
        color_theme = "default";
        theme_background = false;
        vim_keys = true;
        shown_boxes = "proc cpu";
        rounded_corners = true ;
        graph_symbol = "block";
        proc_sorting = "memory";
        proc_reversed = false;
        proc_gradient = true;
      };
    };

    bat = {
      enable = true;
      extraPackages = with pkgs.bat-extras; [ batdiff batman batgrep batwatch ];
      config = {
        pager = "less -fr";
        theme = "TwoDark";
      };
    };

    ssh.enable = true;

    skim = {
      enable = true;
      enableZshIntegration = true;
      defaultCommand = "rg --files --hidden";
      changeDirWidgetOptions = [
        "--preview 'eza --icons --git --color always -T -L 3 {} | head -200'"
        "--exact"
      ];
    };
  };
}
#+end_src
- =htop= in emacs, its =proced=
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package proced
  :bind ("C-x x p" . 'proced)
  :init (setq proced-auto-update-interval 1
              proced-enable-color-flag 1
              proced-format 'medium
              proced-sort 'rss)
  :hook
  (proced-mode . (lambda ()
                   (interactive)
                   (proced-toggle-auto-update 1))))
#+end_src
*** Zsh
- The Z Shell
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  # symlink normal shell file to source for zsh
  home.file.".config/shell/source.sh".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/source.sh";

  programs.zsh = {
    enable = true;
    dotDir = ".config/shell";
    autocd = true;
    enableCompletion = true;
    enableAutosuggestions = true;
    history.extended = true;

    dirHashes = {
      dl = "$HOME/dloads";
      docs = "$HOME/docs";
      code = "$HOME/d-git/codes";
      dots = "$HOME/d-git/d-nix";
      pics = "$HOME/pics";
      vids = "$HOME/vids";
      nixpkgs = "$HOME/d-git/forks/nixpkgs";
    };

    envExtra = ''
    export PATH="$PATH:$HOME/d-git/d-bin/bin:$HOME/.local/bin"
  	export EDITOR="emacsclient -nw -a 'nvim'"
    export BEMENU_OPTS="-i -s -l 10 -R 20 -p ' ' -c -B 2 -W 0.5 --hp 15 --fn 'Code D Ace 16' --nb '#121212' --ab '#121212' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#9aff9a' --hf '#121212' --fb '#121212' --ff '#a6e3a1' --tb '#121212' --tf '#f9e2af' ";
    export VISUAL=$EDITOR
    export STARDICT_DATA_DIR="$HOME/.local/share/stardict"
    export GRIM_DEFAULT_DIR="$HOME/pics/sshots/"

    	#if [ -z $DISPLAY ] && [ "$(tty)" = "/dev/tty1" ]; then
      #  exec Hyprland
     	#fi
  	'';

    initExtra = ''
	source ~/.config/shell/source.sh

	source "${pkgs.zsh-syntax-highlighting}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
	source "${pkgs.zsh-history-substring-search}/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
	source "${pkgs.zsh-autosuggestions}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
	source "${pkgs.nix-zsh-completions}/share/zsh/plugins/nix/nix-zsh-completions.plugin.zsh"
	source "${pkgs.zsh-nix-shell}/share/zsh-nix-shell/nix-shell.plugin.zsh"
	source "${pkgs.zsh-autopair}/share/zsh/zsh-autopair/autopair.zsh"

	'';

    history = {
      save = 10000;
      size = 10000;
      expireDuplicatesFirst = true;
      ignoreDups = true;
      path = "${config.xdg.configHome}/shell/zsh_history";
    };
  };
}
#+end_src
**** source
#+begin_src bash :tangle ./gdk/configs/source.sh
# Make zsh better simply
autoload -U colors && colors  # Load colors
# PS1="%B%{$fg[yellow]%}[%{$fg[cyan]%}%~%{$fg[yellow]%}]
 # %{$fg[blue]%} %b%{$reset_color%}%b"
PS1=" %B%{$fg[blue]%}◉ %{$fg[yellow]%}[%{$fg[cyan]%}%~%f%}%{$fg[yellow]%}]
 %F{green}%f "
# setopt autocd		# Auto cd
stty stop undef		# Disable ctrl-s to freeze terminal.
# setopt interactive_comments

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.

# search history based on what's typed in the prompt
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^[OA" history-beginning-search-backward-end
bindkey "^[OB" history-beginning-search-forward-end

# case insensitive tab completion
zstyle ':completion:*' completer _complete _ignored _approximate
zstyle ':completion:*' list-colors '\'
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' verbose true
_comp_options+=(globdots)


# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# get emacs bindings
bindkey -e
# useful for deleting words backwards like bash (M-DEL)
WORDCHARS='*?[]~=&;!$%^(){}<>'

# Aliases
alias cleanup="doas nix-collect-garbage --delete-older-than 7d"
alias bloat="nix path-info -Sh /run/current-system"
alias ytmp3="yt-dlp -x --continue --add-metadata --embed-thumbnail --audio-format mp3 --audio-quality 0 --metadata-from-title='%(artist)s - %(title)s' --prefer-ffmpeg -o '%(title)s.%(ext)s' "
alias cat="bat --style=plain"
alias grep='rg'
alias du='dust'
# alias ps='procs'
alias m="mkdir -p"
alias ls="exa -h --git --icons --color=auto --group-directories-first -s extension"
alias l="ls -lF --time-style=long-iso --icons"
alias la="exa -lah --tree"
alias tree="exa --tree --icons --tree"
alias http="python3 -m http.server"
alias burn="pkill -9"
alias diff="diff --color=auto"
alias kys="doas shutdown now"
alias killall="pkill"
alias ".1"="cd .."
alias ".2"="cd ../.."
alias ".3"="cd ../../.."
alias c="clear"
alias v="nvim"
alias emd="pkill emacs; emacs --daemon"
alias cp="cp -iv"
alias mv="mv -iv"
alias rm="rm -vI"
alias bc="bc -ql"
alias mkd="mkdir -pv"
alias ytfzf="ytfzf -D"
alias gc="git clone --depth=1"
alias sudo="doas"
alias sioyek="sioyek --new-window"
alias webcam="mpv av://v4l2:/dev/video0 --profile=low-latency --untimed --video-zoom=1.3 --title='webcam'"

# export BEMENU_OPTS="-i -l 10 -p ' ' -c -B 2 -W 0.5 --hp 15 --fn 'ComicCodeLigatures Nerd Font 20' --nb '#121212' --ab '#121212' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#9aff9a' --hf '#121212' --fb '#121212' --ff '#a6e3a1' --tb '#121212' --tf '#f9e2af' ";

# neovim as manpager, if not using emacs
# export MANPAGER='nvim +Man! +"set nocul" +"set noshowcmd" +"set noruler" +"set noshowmode" +"set laststatus=0" +"set showtabline=0" +"set nonumber"'
export MANPAGER='nvim +Man!'

export STARDICT_DATA_DIR="$HOME/d-git/d-bin/treasure/dict/"

# Functions
function ytdl() {
    yt-dlp --embed-metadata --embed-subs -f 22 "$1"
}

function fcd() {
    cd "$(fd -t d | fzf)"
}

function shellnix() {
    nix shell nixpkgs#"$1"
}

## Emacs all time

function {e,find-file,'emacsclient -t','emacsclient -nw'} () {
    if [ -n "$INSIDE_EMACS" ]; then
	emacsclient $1 >/dev/null 2>&1 || echo "Give a file to open"
    else
	emacsclient -t $1 || echo "Start emacs daemon"
    fi
}

function manp () { # use emacs
    if [[ $(man -k $1) ]]; then
        if [ -n "$INSIDE_EMACS" ]; then
	          emacsclient -e "(funcall 'man (apply 'eshell-flatten-and-stringify '($1 $2)))"
        elif [ "$(pgrep emacs)" ]; then
	        emacsclient -nw -e "(funcall 'man (apply 'eshell-flatten-and-stringify '($1 $2)))"
        else
	          man $1
        fi
    else
        $1 --help
    fi
}

whichpath () {
    realpath $(which $1)
}

# TODOTHIS
d-test () {
    local editor="nvim"
    local tmpf="$(mktemp)"
    printf '%s\n' "$READLINE_LINE" >| "$tmpf"
    "$editor" "$tmpf"
    READLINE_LINE="$(<"$tmpf")"
    READLINE_POINT="${#READLINE_LINE}"
    rm -f "$tmpf" >/dev/null 2>&1
}

# zle -N d-test
# bindkey '^o' 'd-test'


function prefetch-sri() {
    nix-prefetch-url "$1" | xargs nix hash to-sri --type sha256
}

depends-on-installed () {
  nix-store --query --referrers $(which $1)
}

dependencies-installed () {
  nix-store --query --references $(which $1)
}

depends-on () {
  nix-store --query --referrers\
    $(nix-instantiate '<nixpkgs>' -A $1) | rg -v home-manager-path
}

dependencies () {
  nix-store --query --references\
    $(nix-instantiate '<nixpkgs>' -A $1)
}

if [ -n "${commands[fzf-share]}" ]; then
  source "$(fzf-share)/key-bindings.zsh"
  source "$(fzf-share)/completion.zsh"
fi



[ -n "$EAT_SHELL_INTEGRATION_DIR" ] && source "$EAT_SHELL_INTEGRATION_DIR/zsh"


# precmd() {
#     print ""
# }
#+end_src
*** cli-packages
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    # archives
    zip
    unzip

    fzf
    # wonderful spells

    ffmpeg-full sdcv nq
    # utils
    file
    du-dust
    fd
    wget
  ];
}
#+end_src
*** starship
- for beautiful prompt
- i have stopped using it, it makes shell little slow.
#+name: hm-config
#+begin_src nix :tangle no
{
  programs.starship = {
    enable = true;
    enablezshintegration = true;

    settings = {
      add_newline = true;
      scan_timeout = 5;

      line_break.disabled = false;

      hostname = {
	      ssh_only = true;
	      format = "[$hostname](bold blue) ";
	      disabled = false;
      };
    };
  };
}
#+end_src
* Programs
- some programs to manage in core
- dconf for gnome desktop suitable stuff
- =noisetorch= - microphone noise suppressor, actually useful and reduces lot of noise.
  - Even built-in mic works like charm.
  | name       | desc                      | link      | exec       |
  |------------+---------------------------+-----------+------------|
  | less       | less pager                | [[https://www.greenwoodsoftware.com/less/][greenwood]] | =less=       |
  | thefuck    | corrects previous command | [[https://github.com/nvbn/thefuck][git]]       | =fuck=       |
  | abd        | android debugger          | [[https://github.com/nmeum/android-tools][git]]       | =adb=        |
  | ssh        | secure shell              | [[https://www.openssh.com/][web]]       | =ssh=        |
  | zsh        | z shell                   | [[https://www.zsh.org/][web]]       | =zsh=        |
  | dconf      | gnome config system       | [[https://wiki.gnome.org/Projects/dconf][wiki]]      | =dconf=      |
  | noisetorch | mic noise suppressor      | [[https://github.com/noisetorch/NoiseTorch][git]]       | =noisetorch= |
  |------------+---------------------------+-----------+------------|

#+name: nixos-core
#+begin_src nix :tangle gdk/core.nix
{
  # enable programs
  programs = {

    less.enable = true;
    # type "fuck" to fix the last command that made you go "fuck"
    thefuck.enable = true;

    # help manage android devices via command line
    adb.enable = true;

    # ssh.startAgent = true;
    dconf.enable = true;
    noisetorch.enable = true; # virtual noise suppressor

    zsh = {
      enable = true;
      autosuggestions.enable = true;
      syntaxHighlighting = {
        enable = true;
        patterns = {"rm -rf *" = "fg=black,bg=red";};
        styles = {"alias" = "fg=magenta";};
        highlighters = ["main" "brackets" "pattern"];
      };
    };
  };

}
#+end_src

*** DownloadManager
- Aria2, the minimal, that does just the job.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  programs.aria2 = {
    enable = true;
    settings = {
      dir = "/home/idlip/dloads";
      file-allocation = "none";
      log-level = "warn";
      split = "10";
      max-connection-per-server = 10;
      min-split-size = "5m";
      bt-max-peers = "0";
      bt-request-peer-speed-limit = "0";
      max-overall-upload-limit = "512k";
      bt-external-ip = "127.0.0.1";
      dht-listen-port = "6882";
      enable-dht = "true";
      enable-peer-exchange = "true";
      listen-port = "6881";
      bt-force-encryption = "true";
      bt-min-crypto-level = "arc4";
      bt-require-crypto = "true";
      follow-torrent = "mem";
      seed-ratio = "100";
      seed-time = "0";
      socket-recv-buffer-size = "1m";
      event-poll = "epoll";
      realtime-chunk-checksum = "true";
      allow-overwrite = "true";
      always-resume = "true";
      auto-file-renaming = "false";
      continue = "true";
      rpc-save-upload-metadata = "false";
    };
  };
}
#+end_src
*** Notifications
- Dunst to notify and send.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  services.dunst = {
    enable = true;
    iconTheme = {
      package = pkgs.papirus-icon-theme;
      name = "Papirus";
    };
    settings = {
      global = {
        monitor = 0;
        background = "#050505";
        frame_color = "#2e8b57";
        transparency = 0;
        follow = "none";
        width = 400;
        height = 900;
        idle_threshold = 120;
        origin = "top-right";
        offset = "10x50";
        scale = 0;
        notification_limit = 0;
        progress_bar = "true";
        alignment = "center";
        progress_bar_height = 10;
        progress_bar_frame_width = 1;
        progress_bar_min_width = 150;
        progress_bar_max_width = 500;
        indicate_hidden = "yes";
        separator_height = 2;
        padding = 10;
        horizontal_padding = 5;
        text_icon_padding = 4;
        frame_width = 3;
        separator_color = "frame";
        sort = "yes";
        font = "Code D Ace 16";
        line_height = 0;
        markup = "full";
        stack_duplicates = "true";
        vertical_alignment = "center";
        show_age_threshold = 60;
        ellipsize = "middle";
        ignore_newline = "no";
        show_indicators = "yes";
        icon_position = "left";
        max_icon_size = 32;
        sticky_history = "yes";
        history_length = 20;
        browser = "d-stuff";
        always_run_script = "true";
        title = "Dunst";
        class = "Dunst";
        corner_radius = 20;
        ignore_dbusclose = false;
        force_xwayland = "false";
        layer = "overlay";
        mouse_left_click = "do_action";
        mouse_middle_click = "do_action";
        mouse_right_click = "close_all";
      };

      reminder = {
        category = "reminder";
        background = "#33333390";
        foreground = "#ffffff";
        timeout = 0;
        script="d-notif";
      };

      urgency_low = {
        background = "#050505";
        foreground = "#ffffff";
        timeout = 5;
      };
      urgency_normal = {
        background = "#050505";
        foreground = "#ffffff";
        timeout = 6;
      };
      urgency_critical = {
        background = "#050505";
        foreground = "#ffffff";
        frame_color = "#f38ba8";
        timeout = 0;
      };
    };
  };
}
#+end_src
**** notify-emacs
- To get notifications from emacs using =alert= package.
- So far only using it for org agenda
- TODO create a class to control priority, so fade time can be avoided.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package alert
  :custom
    ;; Use different backends depending on the platform
  (alert-default-style (if d/on-droid
                           'android-notifications
                         'libnotify))
  (alert-libnotify-additional-args '("-u" "critical" "-t" "100"))
  (alert-fade-time 100))
#+end_src
*** games
- Some games to play
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    openttd
    zeroad
    superTux
    # supertuxkart
  ];
}
#+end_src
*** Launcher
- rofi as the launcher and menu tool.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  xdg.configFile."rofi" = {
    recursive = true;
    source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/rofi";
  };
}
#+end_src
**** config.rasi
- config file for rofi launcher.
#+begin_src conf :tangle gdk/configs/rofi/config.rasi
,* {
bg-main:	     #05050597;
bg-dim:	     #12121240;
fg-main:	     #ffffff;
fg-dim:	     #D8DEE9;
fg-region:     #2e8b6d;

fg-region:        #6ae4b9;
heading-1:    #ab82ff;
heading-2:    #ffec8b;
heading-3:    #3cb6df;
heading-4:    #9aff9a;
heading-5:    #97ffff;
heading-6:    #ffa07a;
heading-7:    #eeb4b4;
heading-8:    #ee4000;
heading-9:    #cd96cd;
error:      #ee6363;
link:       #fcde69;
todo:       #54ff9f;
done:       #b4dddd;
code:       #77ee77;
verbatim:   #ee77ee;
clock:      #eedc82;
bg-tag:     #ffe1ff;
bracket:    #ffeeee;

}

configuration {
modi: "drun,run,window";

font: "Code D OnePiece 16";

case-insensitive: true;
cycle: true;
filter: "";
scroll-method: 0;
normalize-match: true;
show-icons: true;
icon-theme: "Papirus";
steal-focus: true;
matching: "normal";
tokenize: true;

drun-categories: "";
drun-match-fields: "name,generic,exec,categories,keywords";
drun-display-format: "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
drun-show-actions: true;
drun-use-desktop-cache: false;
drun-reload-desktop-cache: false;
drun {
/** Parse user desktop files. */
parse-user:   true;
/** Parse system desktop files. */
parse-system: true;
}

dmenu {
case-insensitive: true;
}

run-command: "{cmd}";
run-list-command: "";
run-shell-command: "{terminal} -e {cmd}";


disable-history: false;
sorting-method: "normal";
max-history-size: 25;


display-drun:               "󱓞 Apps";
display-run:                " Run";
display-filebrowser:        " Files";
drun-display-format:        "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
window-format:              "{w} · {c} · {t}";

sort: false;
threads: 0;
click-to-exit: true;


kb-primary-paste: "Control+V,Shift+Insert";
kb-secondary-paste: "Control+v,Control+y,Insert";
kb-clear-line: "Control+w";
kb-move-front: "Control+a";
kb-move-end: "Control+e";
kb-move-word-back: "Alt+b,Control+Left";
kb-move-word-forward: "Alt+f,Control+Right";
kb-move-char-back: "Left,Control+b";
kb-move-char-forward: "Right,Control+f";
kb-remove-word-back: "Control+Alt+h,Control+BackSpace";
kb-remove-word-forward: "Control+Alt+d";
kb-remove-char-forward: "Delete,Control+d";
kb-remove-char-back: "BackSpace,Shift+BackSpace,Control+h";
kb-remove-to-eol: "Control+k";
kb-remove-to-sol: "Control+u";
kb-accept-entry: "Control+j,Control+m,Return,KP_Enter";
kb-accept-custom: "Control+Return";
kb-accept-custom-alt: "Control+Shift+Return";
kb-accept-alt: "Shift+Return";
kb-delete-entry: "Shift+Delete";
kb-mode-next: "Shift+Right,Control+Tab";
kb-mode-previous: "Shift+Left,Control+ISO_Left_Tab";
kb-mode-complete: "Control+l";
kb-row-left: "Control+Page_Up";
kb-row-right: "Control+Page_Down";
kb-row-down: "Down,Control+n";
kb-page-prev: "Page_Up";
kb-page-next: "Page_Down";
kb-row-first: "Home,KP_Home";
kb-row-last: "End,KP_End";
kb-row-select: "Control+space";
kb-screenshot: "Alt+S";
kb-ellipsize: "Alt+period";
kb-toggle-case-sensitivity: "grave,dead_grave";
kb-toggle-sort: "Alt+grave";
kb-cancel: "Escape,Control+g,Control+bracketleft";
me-select-entry: "MousePrimary";
me-accept-entry: "MouseDPrimary";
me-accept-custom: "Control+MouseDPrimary";

}

,* {
border-colour:               @bg-tag;
handle-colour:               @fg-region;
background-colour:           @bg-main;
foreground-colour:           @fg-main;
alternate-background:        @bg-dim;
normal-background:           @bg-main;
normal-foreground:           @fg-main;
urgent-background:           @verbatim;
urgent-foreground:           @bg-main;
active-background:           @fg-dim;
active-foreground:           @bg-main;
selected-normal-background:  @fg-region;
selected-normal-foreground:  @bg-main;
selected-urgent-background:  @fg-dim;
selected-urgent-foreground:  @bg-main;
selected-active-background:  @verbatim;
selected-active-foreground:  @fg-main;
alternate-normal-background: @bg-main;
alternate-normal-foreground: @fg-main;
alternate-urgent-background: @verbatim;
alternate-urgent-foreground: @fg-main;
alternate-active-background: @bg-dim;
alternate-active-foreground: @fg-main;
}

window {
transparency:                "real";
location:                    center;
anchor:                      center;
fullscreen:                  false;
width:                       50%;
height:			     60%;
x-offset:                    0px;
y-offset:                    0px;

enabled:                     true;
margin:                      0px;
padding:                     0px;
border:                      2px solid;
border-radius:               20px;
border-color:                @border-colour;
cursor:                      "default";
background-color:            @background-colour;

/* Angle Linear Gradient */
// background-image:          linear-gradient(45, #eb0, #ebe, indigo);
}

mainbox {
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     40px;
border:                      0px solid;
border-radius:               0px 0px 0px 0px;
border-color:                @border-colour;
background-color:            transparent;
children:                    [ "inputbar", "message", "listview", "mode-switcher" ];
}

inputbar {
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
children:                    [ "prompt", "textbox-prompt-colon", "entry" ];
}

prompt {
enabled:                     true;
background-color:            inherit;
text-color:                  inherit;
}
textbox-prompt-colon {
enabled:                     true;
expand:                      false;
str:                         "::";
background-color:            inherit;
text-color:                  inherit;
}
entry {
enabled:                     true;
background-color:            inherit;
text-color:                  inherit;
cursor:                      text;
placeholder:                 "Search...";
placeholder-color:           inherit;
}
num-filtered-rows {
enabled:                     true;
expand:                      false;
background-color:            inherit;
text-color:                  inherit;
}
textbox-num-sep {
enabled:                     true;
expand:                      false;
str:                         "/";
background-color:            inherit;
text-color:                  inherit;
}
num-rows {
enabled:                     true;
expand:                      false;
background-color:            inherit;
text-color:                  inherit;
}
case-indicator {
enabled:                     true;
background-color:            inherit;
text-color:                  inherit;
}

listview {
enabled:                     true;
columns:                     2;
lines:                       10;
cycle:                       true;
dynamic:                     true;
scrollbar:                   false;
layout:                      vertical;
reverse:                     false;
fixed-height:                false;
fixed-columns:               false;

spacing:                     5px;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
cursor:                      "default";
}
scrollbar {
handle-width:                10px ;
handle-color:                @handle-colour;
border-radius:               10px;
background-color:            @alternate-background;
}

element {
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     5px 10px;
border:                      0px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
cursor:                      pointer;
}
element normal.normal {
background-color:            var(normal-background);
text-color:                  var(normal-foreground);
}
element normal.urgent {
background-color:            var(urgent-background);
text-color:                  var(urgent-foreground);
}
element normal.active {
background-color:            var(active-background);
text-color:                  var(active-foreground);
}
element selected.normal {
background-color:            var(selected-normal-background);
text-color:                  var(selected-normal-foreground);
}
element selected.urgent {
background-color:            var(selected-urgent-background);
text-color:                  var(selected-urgent-foreground);
}
element selected.active {
background-color:            var(selected-active-background);
text-color:                  var(selected-active-foreground);
}
element alternate.normal {
background-color:            var(alternate-normal-background);
text-color:                  var(alternate-normal-foreground);
}
element alternate.urgent {
background-color:            var(alternate-urgent-background);
text-color:                  var(alternate-urgent-foreground);
}
element alternate.active {
background-color:            var(alternate-active-background);
text-color:                  var(alternate-active-foreground);
}
element-icon {
background-color:            transparent;
text-color:                  inherit;
size:                        24px;
cursor:                      inherit;
}
element-text {
background-color:            transparent;
text-color:                  inherit;
highlight:                   inherit;
cursor:                      inherit;
vertical-align:              0.5;
horizontal-align:            0.0;
}

mode-switcher{
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
}
button {
padding:                     5px 10px;
border:                      0px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            @alternate-background;
text-color:                  inherit;
cursor:                      pointer;
}
button selected {
background-color:            var(selected-normal-background);
text-color:                  var(selected-normal-foreground);
}

message {
enabled:                     true;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px 0px 0px 0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
}
textbox {
padding:                     5px 10px;
border:                      0px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            @alternate-background;
text-color:                  @foreground-colour;
vertical-align:              0.5;
horizontal-align:            0.0;
highlight:                   none;
placeholder-color:           @foreground-colour;
blink:                       true;
markup:                      true;
}
error-message {
padding:                     10px;
border:                      2px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            @background-colour;
text-color:                  @foreground-colour;
}
#+end_src
**** grid.rasi
#+begin_src conf :tangle gdk/configs/rofi/grid.rasi
@import				 "config.rasi"
window {
fullscreen:                  true;
width:                       80%;
height:			     80%;
}
listview {
columns:                     14;
lines:                       20;
}
#+end_src
**** list.rasi
#+begin_src conf :tangle gdk/configs/rofi/list.rasi
@import				 "config.rasi"
window {
width:                       85%;
height:			     80%;
}
listview {
columns:                     1;
lines:                       22;
}

#+end_src
**** smenu.rasi
#+begin_src conf :tangle gdk/configs/rofi/smenu.rasi
@import				 "config.rasi"
window {
width:                       50%;
height:			     60%;
}

listview {
columns:                     2;
lines:                       20;
}

#+end_src

*** home-pkgs
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    # misc
    libnotify
    # xdg-utils

    pcmanfm
    libreoffice
    # pandoc
    groff mupdf
    keepassxc

    # pioneer of web
    # mullvad-browser
    ungoogled-chromium
  ];
}
#+end_src

* Note taking
** Org
- the way to organize stuffs, and get things done!
- https://orgmode.org
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org
  :ensure nil
  :defer t
  :commands
  (org-capture
   org-agenda
   org-indent-mode
   org-display-inline-images
   org-map-entries
   org-archive-subtree
   org-element-property
   org-element-at-point
   org-element-map
   org-element-parse-buffer
   )
  :hook (org-mode . (lambda ()
                      (org-display-inline-images 0)
                      (variable-pitch-mode 1)))

  :bind
  ("C-c c d" . calendar)
  ("C-c t R" . d/bionic-region)
  ("C-c t i" . d/set-timer)
  ("C-c t r" . d/bionic-read)
  (:map org-mode-map
        ("C-x n n" . d/narrow-or-widen-dwim)
        ("C-c l" . org-store-link)
        )

  :custom
  (org-startup-indented nil)
  (org-image-actual-width 400)
  (org-startup-folded t)
  (org-ellipsis " ⮟")
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-done 'note)
  (org-log-into-drawer t)
  (org-export-exclude-tags '("noexport" "ignore") "excludes these tagged heading from export")
  (org-latex-compiler "lualatex" "Lualatex is fast and gets custom font too")
  (org-link-file-path-type 'relative)

  (org-todo-keywords
   '((sequence "TODO(t)" "|" "DONE(d!)")
     (sequence "REVIEW(v)" "|" "CANC(k@)")))

  (org-refile-targets
   '(("brain.org" :maxlevel . 1)
     ("agenda.org" :maxlevel . 1)
     ("tasks.org_archive" :maxlevel . 1)))

  (org-tag-alist
   '((:startgroup)
     (:endgroup)
     ("project" . ?p)
     ("task" . ?t)
     ("devel" . ?d)
     ("note" . ?n)
     ("idea" . ?i)))

  (fill-column 80)
  ;; Where the org files live
  (org-directory "~/d-sync/notes/")
  (org-default-notes-file (concat org-directory "brain.org"))
  ;; Make sure we see syntax highlighting
  (org-src-fontify-natively t)
  ;; I dont use it for subs/super scripts
  (org-use-sub-superscripts nil)
  ;; Should everything be hidden?
  (org-startup-folded 'content)
  (org-M-RET-may-split-line '((default . nil)))
  ;; hide stars except for leader star
  (org-hide-leading-stars t)
  (org-hide-emphasis-markers nil)
  ;; Show as utf-8 chars
  (org-pretty-entities t)
  ;; put timestamp when finished a todo
  (org-log-done 'time)
  ;; timestamp when we reschedule
  (org-log-reschedule t)
  ;; Don't indent the stars
  (org-startup-indented nil)
  (org-list-allow-alphabetical t)
  (org-image-actual-width nil)
  ;; Save notes into log drawer
  (org-log-into-drawer t)
  ;;
  (org-fontify-whole-heading-line t)
  (org-fontify-done-headline t)
  ;;
  (org-fontify-quote-and-verse-blocks t)
  ;; See down arrow instead of "..." when we have subtrees
  ;; (org-ellipsis "⤵")
  ;; catch invisible edit
  ( org-catch-invisible-edits 'show-and-error)
  ;; Only useful for property searching only but can slow down search
  (org-use-property-inheritance t)
  ;; Count all children TODO's not just direct ones
  (org-hierarchical-todo-statistics nil)
  ;; Unchecked boxes will block switching the parent to DONE
  (org-enforce-todo-checkbox-dependencies t)
  ;; Don't allow TODO's to close without their dependencies done
  (org-enforce-todo-dependencies t)
  (org-track-ordered-property-with-tag t)

  (org-special-ctrl-k t)

  ;; Needed to allow helm to compute all refile options in buffer
  (org-outline-path-complete-in-steps nil)
  (org-deadline-warning-days 2)
  (org-log-redeadline t)
  (org-log-reschedule t)
  ;; Repeat to previous todo state
  ;; If there was no todo state, then dont set a state
  (org-todo-repeat-to-state t)
  ;; Refile options
  (org-refile-use-outline-path 'file)
  (org-refile-allow-creating-parent-nodes 'confirm)
  ;; This worked ok, but lets try some more detail refiling
  ;; (org-refile-targets '((org-agenda-files :level .  1)))
  ;; Lets customize which modules we load up
  (org-modules '(ol-w3m
                 ol-bbdb
                 ol-bibtex
                 ol-docview
                 ol-gnus
                 ol-info
                 ol-irc
                 ol-mhe
                 ol-rmail
                 ol-eww
                 ;; Stuff I've enabled below
                 org-habit
                 ;; org-checklist
                 ))
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)

  :config
  (org-clock-persistence-insinuate)

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (defun org-archive-done-tasks ()
    "From the org-heading, it throws all the Done tasks to filename_archive.org"
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))

  ;; This is for managing literate nixos config in org file
  (defun get-named-src-block-contents (name &optional trim)
    "Return the contents of the named Org source block."
    (let* ((block (org-element-map (org-element-parse-buffer) 'src-block
                    (lambda (src-block)
                      (when (string= name (org-element-property :name src-block))
                        src-block))
                    nil t))
           (source (org-element-property :value block)))
      (if trim
          (string-trim source)
        source)))


  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  (defalias 'd/set-timer (symbol-function 'org-timer-set-timer))
  )
#+end_src
- productive desk ready to go
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; custom way to open up productive desk
;; from janusworx blog
(defun d/desk-ready ()
  "Getting ready for work."
  (interactive)
  (toggle-frame-maximized)
  (split-window-below)
  (find-file "~/d-sync/notes/d-desk.org")
  (find-file-other-window "~/d-sync/notes/tasks.org"))
;; (global-set-key (kbd "C-c r d") 'd/desk-ready)

#+end_src
- org bookmark
  - credits to xenodium, from his blog post.
  - all though I have a similar bash script (=d-bookmark=, [[https://github.com/idlip/d-bin][d-bin]]).
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;; credits to @xenodium
(defun browser-bookmarks (org-file)
  "Return all links from ORG-FILE."
  (require 'org-element)
  (require 'seq)
  (with-temp-buffer
    (let (links)
      (insert-file-contents org-file)
      (org-mode)
      (org-element-map (org-element-parse-buffer) 'link
        (lambda (link)
          (let* ((raw-link (org-element-property  :raw-link link))
                 (content (org-element-contents link))
                 (title (substring-no-properties (or (seq-first content) raw-link))))
            (push (concat title
                          "\n"
                          (propertize raw-link 'face 'whitespace-space)
                          "\n")
                  links)))
        nil nil 'link)
      (seq-sort 'string-greaterp links))))

(defun d/open-bookmark ()
  (interactive)
  (browse-url (seq-elt (split-string (completing-read  "Open: " (browser-bookmarks "~/d-sync/notes/bookmarks.org"))  "\n") 1)))
#+end_src
*** org-modern
- for modern emacs, modern org looks
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-modern
  :defer 1

  :commands
  (shrface-mode
   global-org-modern-mode)
  :hook (org-mode org-agenda-finalize-hook)

  :custom
  ;; Edit settings
  (org-auto-align-tags nil)
  (org-tags-column 0)
  (org-catch-invisible-edits 'show-and-error)
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)

  ;; Org styling, hide markup etc.
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  ;;   org-ellipsis "…"

  ;; Reference:
  ;; Heading: "◉ ○ ✸ ✿"
  ;; Cool-Heading: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
  ;; Small: ► • ★ ▸
  ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
  ;; (org-ellipsis "⤵")
  ;; nerd-icons: "" "󰓏" "󰚀" "󰴈" "" "󰄄"

  ;; (org-modern-star '("◉" "✪" "◈" "✿" "❂"))
  ;; (org-modern-star '("" "󰓏" "󰚀" "󰴈" "" "󰄄"))
  (org-modern-star '("󰓏" "󰚀" "󰫤"  "󰴈" "" "󰄄"))
  (org-modern-hide-stars 'leading)
  (org-modern-table nil) ;; issue with variable-pitch font

  (org-modern-list
   '((?* . "⁍")
     (?- . "❖")
     (?+ . "➤")))

  (org-modern-checkbox '((?X . "")
                         (?- . "")
                         (?  . "")))

  (org-modern-keyword
   '(("options" . "")
     ("title" . "")
     ("author" . "󱆀") ("email" . "")
     ("startup" . "")
     ("property" . "")
     ("date" . "")
     ("tags" . "")
     ("todo" . "")
     (t . t)))

  (org-modern-block-name
   '(
     ("src" . ("" ""))
     ("example" . "")
     ("html" . "")
     ("quote" . ("" ""))
     (t . t)))

  (org-modern-internal-target '("  " t " "))

  ;; Agenda styling
  (org-agenda-tags-column 0)
  (org-agenda-block-separator ?─)
  (org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")

  :config
  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
   '((right-divider-width . 1)
     (bottom-divider-width . 0)
     (internal-border-width . 5)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (global-org-modern-mode))
#+end_src
*** org-prettify
- Credits to Artawower.
- Note: Does not work as intended, it prettifies those characters everywhere, but =org-modern= work only where it is sensible
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(unless (package-installed-p 'org-modern)
  (add-hook 'org-mode-hook
            (lambda ()
              "Beautify Org Checkbox Symbol"
              (push '("[ ]" .  "☐") prettify-symbols-alist)
              (push '("[X]" . "☑" ) prettify-symbols-alist)
              (push '("[-]" . "❍" ) prettify-symbols-alist)
              (push '("**" . "") prettify-symbols-alist)
              (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
              (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
              (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
              (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
              (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
              (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
              (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
              (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
              (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
              (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
              (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
              (push '("#+end_src" . "⇤" ) prettify-symbols-alist)

              (push '("#+TITLE:" . "") prettify-symbols-alist)
              (push '("#+DESCRIPTION:" . "") prettify-symbols-alist)
              (push '("#+LANG:" . "") prettify-symbols-alist)
              (push '("#+ID:" . "") prettify-symbols-alist)
              (push '("#+FILETAGS:" . "") prettify-symbols-alist)
              (push '("#+STARTUP:" . "") prettify-symbols-alist)
              (push '("#+ACTIVE:" . "") prettify-symbols-alist)
              (push '("#+START_SPOILER" . "") prettify-symbols-alist)
              (push '("#+CLOSE_SPOILER" . "") prettify-symbols-alist)
              (push '("#+BEGIN_HIDDEN" . "") prettify-symbols-alist)
              (push '("#+END_HIDDEN" . "") prettify-symbols-alist)


              ;; (push '("#+TITLE:" . "") prettify-symbols-alist)
              ;; (push '("#+DESCRIPTION:" . "") prettify-symbols-alist)
              ;; (push '("#+ID:" . "") prettify-symbols-alist)
              ;; (push '("#+FILETAGS:" . "") prettify-symbols-alist)
              ;; (push '("#+STARTUP:" . "") prettify-symbols-alist)
              ;; (push '("#+ACTIVE:" . "") prettify-symbols-alist)
              ;; (push '("#+START_SPOILER" . "") prettify-symbols-alist)
              ;; (push '("#+CLOSE_SPOILER" . "") prettify-symbols-alist)
              ;; (push '("#+BEGIN_HIDDEN" . "") prettify-symbols-alist)
              ;; (push '("#+END_HIDDEN" . "") prettify-symbols-alist)

              (prettify-symbols-mode))))
#+end_src
*** org-agenda
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-agenda
  :ensure nil
  :after org
  :bind
  ("C-c d a" . org-agenda)
  ("C-c a a" . org-agenda)
  (:map org-agenda-mode-map
        ("C-x C-k" . org-agenda-exit))

  ;; :hook (org-agenda-finalize . org-agenda-entry-text-mode)
  :custom
  (org-agenda-tags-column 'auto)
  (org-agenda-window-setup 'only-window)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-log-mode-items '(closed clock state))
  ;; (org-agenda-todo-ignore-scheduled 'future)
  ;; TODO entries that can't be marked as done b/c of children are shown as dimmed in agenda view
  (org-agenda-dim-blocked-tasks nil)
  (org-agenda-inhibit-startup t)
  (org-agenda-show-inherited-tags nil)
  (org-agenda-ignore-drawer-properties '(effort appt category))
  ;; Start the week view on whatever day im on
  (org-agenda-start-on-weekday nil)
  (org-agenda-files
   '("~/d-sync/notes/"
     "~/d-git/d-site/README.org")))
#+end_src
*** org-capture
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-capture
  :ensure nil
  :after org
  :defines
  (my-org-agenda-headlines)

  :bind
  ("C-c c c" . org-capture)

  :custom
  ;; dont create a bookmark when calling org-capture
  (org-capture-bookmark nil)
  ;; also don't create bookmark in other things
  (org-bookmark-names-plist nil)
  (org-default-notes-file (concat org-directory "brain.org"))
  (org-capture-templates
   `(
     ("a" "Agenda" entry (file+function "~/d-sync/notes/agenda.org" (lambda () (completing-read "Heading: " my-org-agenda-headlines)))
      "** TODO %?%^g\n  SCHEDULED:%U\n  %a\n  %i" :empty-lines 1)

     ("n" "Notes")
     ("nn" "Note to Brain" entry
      (file+headline org-default-notes-file "Notes")
      "** %?\n %T\n %i\n %a")
     ("nt" "Note to Thought" entry
      (file+headline org-default-notes-file "Thoughts")
      "** %?\n %T\n %i\n %a")

     ("nc" "Capture Note" entry
      (file "~/d-sync/notes/inbox.org")
      "** %?\n%^{date}p\n%i %a\n - ")

     ("nr" "Reading note" entry
      (file "~/d-sync/notes/reading.org")
      "** %?\n %i\n %a\n -")

     ("nd" "Development note" entry
      (file "~/d-sync/notes/development.org")
      "** %?\n %i\n %a\n")

     ("c" "Contacts")
     ("cc" "New Contact" entry
      (file "~/d-sync/notes/contacts.org")
      "** %?")

     ("l" "Link" entry
      (file+headline "~/d-sync/notes/bookmarks.org" "elfeed") "* %a\n")

     ("j" "Journal Entries")

     ("jj" "Journal" entry
      (file+olp+datetree "~/d-sync/notes/journal.org")
      "\n* %<%I:%M %p> - %?\n\n\n"
      :clock-in :clock-resume
      :empty-lines 1)))
  :config
  (setq my-org-agenda-headlines `(projects university tasks one-timer)))
#+end_src
*** org-list
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-list
  :custom
  (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+"))))
#+end_src
*** org-src
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-src
  :ensure nil
  :after org
  :custom
  (org-src-preserve-indentation nil)
  ;; Don't ask if we already have an open Edit buffer
  (org-src-window-setup 'current-window)
  (org-src-ask-before-returning-to-edit-buffer nil)
  (org-edit-src-content-indentation 0)
  :config
  (advice-add 'org-src-get-lang-mode :filter-return
              (lambda (mode)
                (pcase (assoc mode major-mode-remap-alist)
                  (`(,mode . ,ts-mode) ts-mode)
                  (_ mode)))))
#+end_src
*** org-clock
- credits to [[https://github.com/gopar][@gopar]]
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-clock
  :ensure nil
  :after org
  :commands
  (org-clock-jump-to-current-clock
   org-clock-report)
  :custom
  ;; Save clock history accross emacs sessions (read var for required info)
  (org-clock-persist t)
  ;; If idle for more than 15 mins, resolve by asking what to do with clock
  (org-clock-idle-time 15)
  ;; Set clock in frame title, instead of mode line
  (org-clock-clocked-in-display 'frame-title)
  ;; Show more clocking history
  (org-clock-history-length 10)
  ;; Include running time in clock reports
  (org-clock-report-include-clocking-task t)
  ;; Put all clocking info int the "CLOCKING" drawer
  (org-clock-into-drawer "CLOCKING")
  ;; Setup default clocktable summary
  (org-clock-clocktable-default-properties
   '(:maxlevel 2 :scope file :formula % ;; :properties ("Effort" "Points")
               :sort (5 . ?t) :compact t :block today))
  :bind (:map global-map
              ("C-c j" . (lambda () (interactive) (org-clock-jump-to-current-clock)))
              :map org-mode-map
              ("C-c C-x r" . (lambda () (interactive) (org-clock-report)))))
#+end_src
*** org-babel
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package ob-core
  :ensure nil
  :after org
  :custom
  ;; Don't ask every time when I run a code block
  (org-confirm-babel-evaluate t)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (calc . t)
     (latex . t) (C . t)
     (R . t)
     (shell . t) (python . t)
     (julia . t))))
#+end_src
**** Orgmacs
- org-babel for tangling this org file with using single no-web reference
- Useful for tangling of multiple blocks with same name using no-web.
#+name: orgmacs
#+begin_src emacs-lisp :tangle no
(unless d/on-droid
;; credits to https://github.com/rasendubi

(require 'el-patch)
(require 'ob-tangle)
;; org-babel fixes to tangle ALL matching sections
(defun rasen/map-regex (regex fn)
  "Map the REGEX over the BUFFER executing FN.

FN is called with the match-data of the regex.

Returns the results of the FN as a list."
  (save-excursion
    (goto-char (point-min))
    (let (res)
      (save-match-data
        (while (re-search-forward regex nil t)
          (let ((f (match-data)))
            (setq res
                  (append res
                          (list
                           (save-match-data
                             (funcall fn f))))))))
      res)))

(el-patch-feature ob-core)
(el-patch-defun org-babel-expand-noweb-references (&optional info parent-buffer)
  "Expand Noweb references in the body of the current source code block.

For example the following reference would be replaced with the
body of the source-code block named `example-block'.

< <example-block>>

Note that any text preceding the <<foo>> construct on a line will
be interposed between the lines of the replacement text.  So for
example if <<foo>> is placed behind a comment, then the entire
replacement text will also be commented.

This function must be called from inside of the buffer containing
the source-code block which holds BODY.

In addition the following syntax can be used to insert the
results of evaluating the source-code block named `example-block'.

< <example-block()>>

Any optional arguments can be passed to example-block by placing
the arguments inside the parenthesis following the convention
defined by `org-babel-lob'.  For example

< <example-block(a=9)>>

would set the value of argument \"a\" equal to \"9\".  Note that
these arguments are not evaluated in the current source-code
block but are passed literally to the \"example-block\"."
  (let* ((parent-buffer (or parent-buffer (current-buffer)))
         (info (or info (org-babel-get-src-block-info 'light)))
         (lang (nth 0 info))
         (body (nth 1 info))
         (comment (string= "noweb" (cdr (assq :comments (nth 2 info)))))
         (noweb-re (format "\\(.*?\\)\\(%s\\)"
                           (with-current-buffer parent-buffer
                             (org-babel-noweb-wrap))))
         (cache nil)
         (c-wrap
          (lambda (s)
            ;; Comment string S, according to LANG mode.  Return new
            ;; string.
            (unless org-babel-tangle-uncomment-comments
              (with-temp-buffer
                (funcall (org-src-get-lang-mode lang))
                (comment-region (point)
                                (progn (insert s) (point)))
                (org-trim (buffer-string))))))
         (expand-body
          (lambda (i)
            ;; Expand body of code represented by block info I.
            (let ((b (if (org-babel-noweb-p (nth 2 i) :eval)
                         (org-babel-expand-noweb-references i)
                       (nth 1 i))))
              (if (not comment) b
                (let ((cs (org-babel-tangle-comment-links i)))
                  (concat (funcall c-wrap (car cs)) "\n"
                          b "\n"
                          (funcall c-wrap (cadr cs))))))))
         (expand-references
          (lambda (ref cache)
            (pcase (gethash ref cache)
              (`(,last . ,previous)
               ;; Ignore separator for last block.
               (let ((strings (list (funcall expand-body last))))
                 (dolist (i previous)
                   (let ((parameters (nth 2 i)))
                     ;; Since we're operating in reverse order, first
                     ;; push separator, then body.
                     (push (or (cdr (assq :noweb-sep parameters)) "\n")
                           strings)
                     (push (funcall expand-body i) strings)))
                 (mapconcat #'identity strings "")))
              ;; Raise an error about missing reference, or return the
              ;; empty string.
              ((guard (or org-babel-noweb-error-all-langs
                          (member lang org-babel-noweb-error-langs)))
               (error "Cannot resolve %s (see `org-babel-noweb-error-langs')"
                      (org-babel-noweb-wrap ref)))
              (_ "")))))
    (replace-regexp-in-string
     noweb-re
     (lambda (m)
       (with-current-buffer parent-buffer
         (save-match-data
           (let* ((prefix (match-string 1 m))
                  (id (match-string 3 m))
                  (evaluate (string-match-p "(.*)" id))
                  (expansion
                   (cond
                    (evaluate
                     ;; Evaluation can potentially modify the buffer
                     ;; and invalidate the cache: reset it.
                     (setq cache nil)
                     (let ((raw (org-babel-ref-resolve id)))
                       (if (stringp raw) raw (format "%S" raw))))
                    ;; Retrieve from the Library of Babel.
                    ((nth 2 (assoc-string id org-babel-library-of-babel)))
                    ;; Return the contents of headlines literally.
                    ((org-babel-ref-goto-headline-id id)
                     (org-babel-ref-headline-body))
                    ;; Look for a source block named SOURCE-NAME.  If
                    ;; found, assume it is unique; do not look after
                    ;; `:noweb-ref' header argument.
                    ((org-with-point-at 1
                       (let ((r (org-babel-named-src-block-regexp-for-name id)))
                         (and (re-search-forward r nil t)
                              (not (org-in-commented-heading-p))
                              (el-patch-swap
                                (funcall expand-body
                                         (org-babel-get-src-block-info t))
                                (mapconcat
                                 #'identity
                                 (rasen/map-regex r
                                                  (lambda (md)
                                                    (funcall expand-body
                                                             (org-babel-get-src-block-info t))))
                                 "\n"))))))
                    ;; All Noweb references were cached in a previous
                    ;; run.  Extract the information from the cache.
                    ((hash-table-p cache)
                     (funcall expand-references id cache))
                    ;; Though luck.  We go into the long process of
                    ;; checking each source block and expand those
                    ;; with a matching Noweb reference.  Since we're
                    ;; going to visit all source blocks in the
                    ;; document, cache information about them as well.
                    (t
                     (setq cache (make-hash-table :test #'equal))
                     (org-with-wide-buffer
                      (org-babel-map-src-blocks nil
                        (if (org-in-commented-heading-p)
                            (org-forward-heading-same-level nil t)
                          (let* ((info (org-babel-get-src-block-info t))
                                 (ref (cdr (assq :noweb-ref (nth 2 info)))))
                            (push info (gethash ref cache))))))
                     (funcall expand-references id cache)))))
             ;; Interpose PREFIX between every line.
             (mapconcat #'identity
                        (split-string expansion "[\n\r]")
                        (concat "\n" prefix))))))
     body t t 2)))
)
#+end_src
*** org-re-reveal
- to make tidy presentations
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-re-reveal
  :after ox
  :unless d/on-droid
  :custom
  (org-re-reveal-title-slide
   "<h1 class=\"title\">%t</h1> <br> <br> <h2 class=\"subtitle\">%s</h2> <h2 class=\"author\">%a</h2> <br> <br> <h4 class=\"misc\">%m</h4> <h3 class=\"misc\">%A</h3>"))
#+end_src
*** org-ql
- for quick search and queries
- TODO expand and use bindings for it. Refer manual
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-ql)
#+end_src
*** org-alert
- Alert, send notifications for schedules and deadline tasks.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-alert
  :demand t
  :custom
  (org-alert-interval 300)
  (org-alert-notification-title "Org Alert Reminder")
  (org-alert-time-match-string
   "\\(?:SCHEDULED\\|DEADLINE\\):.*?<.*?\\([0-9]\\{2\\}:[0-9]\\{2\\}\\).*>")
  :config
  (org-alert-enable))
#+end_src
**** Enhance org-notify
- Functions to enhance org-notify
- org-alert does not need =alert= package itself, it does fine with built-in notifications package.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
;;;;; Functions - Notification Titles

(defconst d/notifier (if d/on-droid 'android-notifications-notify 'notifications-notify))

(defun my/org-alert--get-todo-parent ()
  "Get the immediate parent heading of a TODO. If no parents, use file title. If no file title
use filename."
  (if (org-up-heading-safe)
      (org-get-heading t t t t)
    (let ((title (cdr (assoc "TITLE" (org-collect-keywords '("TITLE"))))))
      (if (and title (listp title))
          (car title)
        title))))

(defun org-alert--parse-entry--use-parent-as-title-advice (orig-fun &rest args)
  "Advice for `org-alert--parse-entry' function. It adapts it to accept parameters from the
`my/org-alert--get-todo-parent' function which retrieves the parent heading or file title/name."
  (let ((head (org-alert--strip-text-properties (org-get-heading t t t t)))
        (parent-or-file-head (my/org-alert--get-todo-parent)))
    (cl-destructuring-bind (body cutoff) (org-alert--grab-subtree)
      (if (string-match org-alert-time-match-string body)
          (list head parent-or-file-head (match-string 1 body) cutoff)
        nil))))

(defun org-alert--dispatch--use-parent-as-title-advice (orig-fun &rest args)
  "Advice for `org-alert--dispatch' function."
  (let ((entry (org-alert--parse-entry)))
    (when entry
      (cl-destructuring-bind (head parent-or-file-head time cutoff) entry
        (if time
            (when (org-alert--check-time time cutoff)
              (funcall d/notifier :body (concat time ": " head) :title parent-or-file-head))
          (funcall d/notifier :body head :title parent-or-file-head)
          )))))

(advice-add 'org-alert--parse-entry :around #'org-alert--parse-entry--use-parent-as-title-advice)
(advice-add 'org-alert--dispatch :around #'org-alert--dispatch--use-parent-as-title-advice)
#+end_src

*** org-present
- Presentation in emacs with org-mode, at its purest form.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package org-present
  :defer t
  :unless d/on-droid
  :after org
  :bind (:map org-present-mode-keymap
              ("<right>" . d/org-present-next-slide)
              ("<left>" . d/org-present-previous-slide)
              ("<up>" . d/org-present-up)
              ("C-c j" . d/org-present-next-slide)
              ("C-c k" . d/org-present-previous-slide)
              ("C-c h" . d/org-present-up)
              ("<f5>" . d/org-present-refresh))
  (:map org-mode-map
        ("<f8>" . d/org-present-mode))
  :hook ((org-present-mode . d/org-present-enable-hook)
         (org-present-mode-quit . d/org-present-disable-hook))
  :config

  (defun org-present-header-line ()
    ;; (let* ((levelhead (concat "org-level-" (org-current-level)))
    ;;        )
    (setq-local header-line-format (concat "   󰨖 " (propertize (org-get-title) 'face 'org-document-title)  " : " (propertize (if (org-get-heading) (nth 4 (org-heading-components)) " ") 'face 'org-level-1)  "       -         " (propertize "Dilip" 'face 'org-document-info)))

    )

  (defvar d/org-present-org-modern-keyword '(("title"       . "")
                                             ("description" . "")
                                             ("subtitle"    . "")
                                             ("date"        . "")
                                             ("author"      . "")
                                             ("email"       . "")
                                             ("language"    . "")
                                             ("options"     . "")
                                             (t . t)))

  (define-minor-mode d/org-present-mode
    "Toggle Presentation Mode."
    :global nil
    :lighter "d/org-present-mode"
    (if d/org-present-mode
        (org-present)
      (org-present-quit)))

  (defun d/org-present-enable-hook ()
    (setq d/org-present--inhibit-message inhibit-message
          d/org-present--echo-keystrokes echo-keystrokes
          d/org-present--visual-line-mode visual-line-mode
          d/org-present--org-ellipsis org-ellipsis)
    ;; d/org-present--org-indent-mode org-indent-mode)
    ;; (org-indent-mode 1)

    ;; Disable 'org-modern-mode' to setup adjustment if it's installed
    (if (package-installed-p 'org-modern)
        (org-modern-mode 0))

    (if (package-installed-p 'org-modern)
        (setq-local d/org-present--org-modern-hide-stars org-modern-hide-stars
                    d/org-present--org-modern-keyword org-modern-keyword
                    d/org-present--org-modern-block-fringe org-modern-block-fringe

                    org-modern-hide-stars 'leading
                    org-modern-block-fringe t
                    org-modern-keyword d/org-present-org-modern-keyword))

    (display-line-numbers-mode 0)

    (if (package-installed-p 'org-modern)
        (org-modern-mode 1))

    (setq-local inhibit-message t
                echo-keystrokes nil
                cursor-type t
                org-image-actual-width 300
                header-line-format " "
                org-ellipsis "󱞤")

    (dolist (face '((org-block . 1.0)
                    (org-block-begin-line . 0.1)
                    (org-document-info . 1.2)
                    (org-document-title . 1.2)
                    (org-level-1 . 1.2)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-code . 1.15)
                    (header-line . 1.0)
                    (org-verbatim . 1.15)
                    (variable-pitch . 1.1)
                    (org-level-7 . 1.1)))
      (face-remap-add-relative (car face) :height (cdr face)))


    (if (package-installed-p 'hide-mode-line)
        (hide-mode-line-mode 1))
    ;; (org-present-header-line)

    (toggle-mode-line)

    (olivetti-set-width 0.80)

    (org-display-inline-images)
    (read-only-mode 1))

  (defun d/org-present-prepare-slide ()
    (org-overview)
    (org-show-entry)
    (org-show-children))
  ;; (org-present-header-line))

  (defun d/org-present-disable-hook ()
    (setq-local header-line-format nil
                face-remapping-alist '((default variable-pitch default))
                org-adapt-indentation nil
                visual-line-mode d/org-present--visual-line-mode
                org-ellipsis d/org-present--org-ellipsis
                inhibit-message d/org-present--inhibit-message
                echo-keystrokes d/org-present--echo-keystrokes)
    (org-present-small)


    ;; (org-indent-mode d/org-present--org-indent-mode)

    (if (package-installed-p 'hide-mode-line)
        (hide-mode-line-mode 0))
    (toggle-mode-line)
    ;; (load-theme 'haki t)
    (org-mode-restart)
    (org-remove-inline-images))

  (defun d/org-present-up ()
    "Go to higher heading from current heading."
    (interactive)
    (widen)
    (org-up-heading-safe)
    (org-present-narrow)
    (org-present-run-after-navigate-functions))


  (defun d/org-present-next-slide ()
    "Go to next sibling."
    (interactive)
    (widen)
    (unless (org-goto-first-child)
      (org-get-next-sibling))
    (org-present-narrow)
    (org-fold-hide-sublevels 5)
    (org-show-entry)
    (org-present-run-after-navigate-functions))


  (defun d/org-present--last-child ()
    "Find last child of current heading."
    (when (org-goto-sibling) (d/org-present--last-child))
    (when (org-goto-first-child) (d/org-present--last-child)))


  (defun d/org-present-previous-slide ()
    "Go to previous sibling."
    (interactive)
    (widen)
    (when (org-current-level)
      (org-back-to-heading)
      (if (and (org-get-previous-sibling) (org-current-level))
          (when (org-goto-first-child)
            (d/org-present--last-child))))
    (org-present-narrow)
    (org-fold-hide-sublevels 5)
    (org-show-entry)
    (org-present-run-after-navigate-functions))

  (defun d/org-present-refresh ()
    (interactive)
    (d/org-present-mode)
    (d/org-present-mode))

  )
#+end_src
*** remember
- Tiny little mode and remember some running thoughts to seek out the insights.
- Note: =no-littering= package alters =remember-data-file=.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package remember
  :ensure nil
  :bind
  ("C-c r r" . remember)
  ("C-c r n"))
#+end_src
*** calendar
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package calendar
  :custom
  (diary-file "~/d-sync/notes/diary"))
#+end_src
** Markdown
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package markdown-mode
  :defer t
  :defines (markdown-mode-map)
  :functions (markdown-view-mode)
  :mode "\\.md\\'"
  :hook (markdown-mode . variable-pitch-mode)
  :bind (:map markdown-mode-map
              ("<f8>" . d/markdown-toggle))
  :config
  (defun d/set-markdown-header-font-sizes ()
    (dolist (face '((markdown-header-face-1 . 1.3)
                    (markdown-header-face-2 . 1.2)
                    (markdown-header-face-3 . 1.15)
                    (markdown-header-face-4 . 1.1)
                    (markdown-header-face-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :font haki-heading-font :height (cdr face))))

  (defun d/markdown-mode-hook ()
    (d/set-markdown-header-font-sizes))

  (defun d/markdown-toggle ()
    "Toggle view mode and editing mode"
    (interactive)
    (if (derived-mode-p 'markdown-view-mode) (markdown-mode) (markdown-view-mode))
    (variable-pitch-mode 1)))
#+end_src
** Spell
- to check for simple spell corrections
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package jinx
  ;; :init (global-jinx-mode)
  :hook org-mode
  :bind ("M-$". jinx-correct))
#+end_src
*** Vocab
- to use language-tool for corrections over grammar and vocabulary
- And some spell correction tools.
#+name: hm-config
#+begin_src nix :tangle gdk/home.nix
{
  home.packages = with pkgs; [
    languagetool
    (aspellWithDicts (dicts: with dicts; [ en en-computers en-science es]))
    nuspell
    (hunspellWithDicst (dicts: with dicts; [ en-us ]))
  ];
}
#+end_src
- language tool as linter
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package flycheck-languagetool
  :disabled
  :hook
  (text-mode . flycheck-mode)
  :custom
  (flycheck-languagetool-server-command '("languagetool-http-server"))
  (flycheck-languagetool-language "auto"))
#+end_src
*** speed-type
- to practise speed typing, or typing in general.
- Thoughts and plans should flow swiftly and typing speed should not be an hindrance.
- Key is to type when thought comes, because it is too easy to forget.
- Or just type whatever comes to mind, then later analyze.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package speed-type
  :unless d/on-droid
  :hook
  (speed-type-mode . olivetti-mode))
#+end_src
** Denote
- A good design for note-taking in emacs, by master Prot.
- It is tool agnostic, yes written in elisp, but not very much dependent on emacs.
- It can used with standard Unix tool very well.
- Naming scheme is the huge bonus, except there is no graph or db stored. It aint that hard or late to write a script to generate one tho. I assume sacha or some other package might have already written a ~R~ or ~python~ script on it.
- Except denote is not full fledge system or tool, but its a handy and convenient way of making notes in good practices scheme.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package denote
  :defer t
  :defines
  (dired-mode-map
   denote-directory)

  :hook
  (find-file . denote-link-buttonize-buffer)
  (dired-mode . denote-dired-mode)
  (context-menu-functions . denote-context-menu)

  :bind
  ("C-c n j" . d/my-journal)
  ("C-c n s" . denote-subdirectory)
  ("C-c n n" . denote)
  ("C-c n d" . denote-org-dblock-insert-links)
  ("M-s n" . denote-open-or-create)
  ("C-c n o" . denote-open-or-create)
  ("C-c n T" . denote-template)
  ("C-c n i" . denote-link)
  ("C-c n a" . denote-link-add-links)
  ("C-c n A" . denote-link-backlinks)
  ("C-c n f f" . denote-link-find-file)
  ("C-c n f b" . denote-link-find-backlink)
  ("C-c n r" . denote-rename-file)
  ("C-c n R" . denote-rename-file-using-front-matter)

  (:map dired-mode-map
        ("C-c C-d C-i" . denote-link-dired-marked-notes)
        ("C-c C-d C-r" . denote-dired-rename-marked-files)
        ("C-c C-d C-R" . denote-dired-rename-marked-files-using-front-matter))

  :custom
  (denote-directory (expand-file-name "~/d-sync/notes/"))
  (denote-known-keywords '("emacs" "blogs" "article"))
  (denote-infer-keywords t)
  (denote-sort-keywords t)
  (denote-file-type 'org)
  (denote-prompts '(title keywords date template signature))
  (denote-excluded-directories-regexp nil)
  (denote-excluded-keywords-regexp nil)
  (denote-date-prompt-use-org-read-date t)
  (denote-allow-multi-word-keywords t)
  (denote-date-format nil)
  (denote-backlinks-show-context t)

  (denote-file-name-letter-casing
   '((title . downcase)
     (signature . verbatim)
     (keywords . downcase)
     (t . downcase)))

  (denote-dired-directories
   (list denote-directory
         (expand-file-name "~/d-git/d-site/content/")))

  (denote-templates
   '((project . "* Initial Idea\n\n** Requirements\n")
     (none . "")))

  :config
  (defun d/my-journal ()
    (interactive)
    (let* ((date (org-read-date))
           (time (org-time-string-to-time date))
           (title (format-time-string "%A %d %B %Y" time))
           (initial (denote-sluggify title))
           (target (read-file-name "Select note: " (denote-directory) nil nil initial
                                   (lambda (f)
                                     (or (denote-file-has-identifier-p f)
                                         (file-directory-p f))))))
      (if (file-exists-p target)
          (find-file target)
        (denote title '("journal") denote-file-type nil date))))


  (with-eval-after-load 'org-capture
    (setq denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("d" "New note (denote)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))

  (defun d/denote-add-to-agenda-files (keyword)
    "Append list of files containing 'keyword' to org-agenda-files"
    (interactive)
    ;; (jab/init-org-agenda-files) ;; start over
    (setq org-agenda-files (append org-agenda-files (directory-files denote-directory t keyword))))

  ;; (d/denote-add-to-agenda-files "_project")
  )
#+end_src
- Function to disable mouse when writing. Trackpad taps annoys while typing.
- Toggles both [[#olivetti][olivetti-mode]] and mouse on and off.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun d/writing-mode ()
  (interactive)
  (disable-mouse-mode 'toggle)
  (olivetti-mode 'toggle))
#+end_src
- Function to move org subtree as denote notes.
- Refer info on denote.
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(defun my-denote-org-extract-subtree (&optional silo)
  "Create new Denote note using current Org subtree.
     Make the new note use the Org file type, regardless of the value
     of `denote-file-type'.

     With an optional SILO argument as a prefix (\\[universal-argument]),
     ask user to select a SILO from `my-denote-silo-directories'.

     Use the subtree title as the note's title.  If available, use the
     tags of the heading are used as note keywords.

     Delete the original subtree."
  (interactive
   (list (when current-prefix-arg
           (completing-read "Select a silo: " my-denote-silo-directories nil t))))
  (if-let ((text (org-get-entry))
           (heading (org-get-heading :no-tags :no-todo :no-priority :no-comment)))
      (let ((element (org-element-at-point))
            (tags (org-get-tags))
            (denote-user-enforced-denote-directory silo))
        (delete-region (org-entry-beginning-position)
                       (save-excursion (org-end-of-subtree t) (point)))
        (denote heading
                tags
                'org
                nil
                (or
                 ;; Check PROPERTIES drawer for :created: or :date:
                 (org-element-property :CREATED element)
                 (org-element-property :DATE element)
                 ;; Check the subtree for CLOSED
                 (org-element-property :raw-value
                                       (org-element-property :closed element))))
        (insert text))
    (user-error "No subtree to extract; aborting")))
#+end_src

*** Denote Journal
#+name: orgmacs
#+begin_src emacs-lisp :tangle gdk/configs/d-emacs/init.el
(use-package denote-journal-extras
  :custom
  (denote-journal-extras-title-format 'day-date-month-year))
#+end_src
* EOF
** Nixos
#+begin_src nix :tangle gdk/core.nix
  ];

  # stateVersion
  # NEVER EVER TOUCH THIS ⚠️
  system.stateVersion = lib.mkDefault "23.05"; # refer manual !

  # configuration ends here
}
#+end_src
** Home
#+begin_src nix :tangle gdk/home.nix
  ];

  # NEVER EVER TOUCH IT ⚠️
  home.stateVersion = "23.05"; # refer manual !

  # home configuration ends here
}
#+end_src
