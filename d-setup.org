#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil toc:3
#+PROPERTY: header-args :tangle-mode (identity #o444) :mkdirp yes
#+TITLE: üß¨ D Nixyfied Flaky Station
#+AUTHOR: iDlip

* Table of Contents :toc:
- [[#-description][üìë Description]]
- [[#-pre-requisites][üìú Pre-requisites]]
- [[#-flake][üßä Flake]]
- [[#-system-configuration][üíª System Configuration]]
  - [[#tangled-file-warning][Tangled File Warning]]
  - [[#inherited-sources][Inherited Sources]]
  - [[#opening-statement][Opening Statement]]
  - [[#imports][Imports]]
  - [[#system-core][System core]]
  - [[#nix-settings][Nix Settings]]
  - [[#boot-loader][Boot loader]]
  - [[#network][Network]]
  - [[#secure-core][Secure core]]
  - [[#services][Services]]
  - [[#system-packages][System Packages]]
  - [[#overlay][Overlay]]
  - [[#opengl-hardware][Opengl Hardware]]
  - [[#system-fonts][System Fonts]]
  - [[#env][Env]]
  - [[#system-users][System Users]]
  - [[#closing-statement][Closing Statement]]
- [[#-user-configurations][üë§ User Configurations]]
  - [[#i-home][i-home]]
- [[#-additional-files][üìÇ Additional FIles]]
  - [[#first-time-set-up-script][First Time Set Up Script]]
  - [[#manual-set-up-instructions][Manual Set Up Instructions]]

* üìë Description
--------
This file is organized configuration for whole system, where you can write everything for Nixos and Home-manager configuration.
This might only make sense if you use emacs, or else nixos modular (multi hosts) flakes is a better choice, but there you have one advantage of disabling a module, here you have to uncomment blocks (or tangle it to some name) to remove a section.

I was using modular setup before, but it is painful to manage directory and remember what all file were there.

Maybe in future, I will tangle each headings as a module itself, so we can combine both single org file to tangle for modular config. (only makes sense if managing multiple hosts/computers).

The advantage of this setup is, you can add TODO and document everything here, so org stands for its name ==> *Organize Life*

Also, the tangled files are in read-only mode, so you can avoid editing it, unless you were trying/testing something.

* üìú Pre-requisites

--------
Note: Every tangle is made into this git directory itself. Nothing goes outside. Every config files are symlinked via Nix homemanager. You need to evaluate the elisp function given down.
--------

With power of org, we can made variables for org-blocks. So no need to type out hostname or username again. Replace it with your host and username.
You can either use org properly ~#+name:my-var~ or use =:noweb-ref my-var= on src-block-begin-line.

- Hostname goes here
#+name: my-hostname
#+begin_src nix
gdk
#+end_src

- Username goes here
#+name: my-username
#+begin_src nix
i
#+end_src

- Git repo path in system 
#+name: my-git-path
#+begin_src nix :noweb yes
/home/<<my-username>>/d-git/d-nix
#+end_src

- Config path in git
  We will use this to symlink config files too.
#+name: my-config-path
#+begin_src nix :noweb yes
<<my-git-path>>/<<my-hostname>>/i-home/configs
#+end_src

- Path to tangle config file in git repo
  Just to make things easy, input the path manually to tangle all config files inside this directory.
#+name: my-configs
#+begin_src conf
./gdk/i-home/configs
#+end_src

- Bin (scripts) path
  I have some scripts here ==> [[https://github.com/idlip/d-bin]]
#+name: my-bin
#+begin_src nix :noweb yes
/home/<<my-username>>/d-git/d-bin/bin
#+end_src

- Tangling main nix files

To tangle nix and config files (configuration, homemanager.nix) to ./my-hostname/configuration.nix and ./my-hostname/i-home/ 
You might want to eval this code for this to work on :tangle header.

Please eval this or else tangling nix files into this git repo won't work.

#+begin_src emacs-lisp config.el
(defun get-named-src-block-contents (name &optional trim)
  "Return the contents of the named Org source block."
  (let* ((block (org-element-map (org-element-parse-buffer) 'src-block
                  (lambda (src-block)
                    (when (string= name (org-element-property :name src-block))
                        src-block))
                  nil t))
         (source (org-element-property :value block)))
    (if trim
        (string-trim source)
      source)))
#+end_src

* üßä Flake
Why not have a block for flake.nix too?
#+begin_src nix :tangle ./flake.nix :noweb yes
  {
    description = "D Nixyfied ‚ùÑÔ∏è Flaky Station";

    inputs = {

      # Change it to stable, if you want stable channel (23.05)
      nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

      # For Adblocking and making internet usable
      hosts.url = "github:StevenBlack/hosts";

      # Home to manage all user configs
      # You can you use normal config files,
      # just use an org heading and create block and tangle it directly to ~/.config/tool/file path.
      home-manager = {
	url = "github:nix-community/home-manager";
	inputs.nixpkgs.follows = "nixpkgs";
      };

    };

    outputs = inputs @ {self, hosts, home-manager, nixpkgs, ...} :
      let
	# You might check on darwin for macos
	system = "x86_64-linux";
	pkgs = import nixpkgs {
		inherit system;
		config.allowUnfree = false;
	};
	lib = nixpkgs.lib;

      in {

	nixosConfigurations = {

	  <<my-hostname>> = lib.nixosSystem {
			    inherit system;
			    modules = [

			      ./<<my-hostname>>/configuration.nix
				home-manager.nixosModules.home-manager {
				  home-manager.useGlobalPkgs = true;
				  home-manager.useUserPackages = true;
				  home-manager.extraSpecialArgs = {
				    inherit inputs;
				    inherit self;
				  };

				  home-manager.users.<<my-username>> = ./<<my-hostname>>/i-home ;
				}
				hosts.nixosModule
			    ];
			    specialArgs = {inherit inputs;};
			  };
	};

      };
  }

#+end_src
* üíª System Configuration
:PROPERTIES:
:header-args: :noweb yes :tangle-mode (identity #o444) :mkdir yes :tangle (format "./%s/configuration.nix" (get-named-src-block-contents "my-hostname" t))
:END:

Machine a.k.a Host (if you manage multi hosts or PC) specific setup and configuration goes
here.

** Tangled File Warning
Places a warning at the top of the target file.
#+begin_src nix
  # WARNING : This file was generated by d-setup.org
  # DO NOT MODIFY THIS FILE!
  # Any changes made here will be overwritten.
#+end_src
** Inherited Sources
#+begin_src nix
  { inputs, lib, self, config, pkgs, ... }:

#+end_src
** Opening Statement
Opening brace that contains the rest of the configuration file.
#+begin_src nix
  {
#+end_src
** Imports
+ Copy your system hardware-configuration file to #FIXME  HOSTNAME/hardware-configuration.nix  in this git repo.
+ It will be usually the /etc/nixos/hardware-configuration.nix  
+ It will be generated while first install ~sudo nixos-generate-config~
  
#+begin_src nix
  imports = [
    ./hardware-configuration.nix
  ];
#+end_src
** System core
#+begin_src nix
  programs = {
    hyprland.enable = true;
  };

  # compresses half the ram for use as swap
  zramSwap = {
    enable = true;
    memoryPercent = 50;
    algorithm = "zstd";
  };

  # obviously your timezone here. Have a nice day or good night sleep ;)
  # Don't waste more time on nixos lol, be healthy and have some sleep. Stay healthy!
  time.timeZone = "Asia/Kolkata";

  # This code is from nixos wiki for Btrfs. Depends on which file system you use.
  # Refer nixos wiki once. Might get error if not using btrfs
  # #FIXME 
  fileSystems = {
    "/".options = [ "compress=zstd" ];
    "/home".options = [ "compress=zstd" ];
    "/nix".options = [ "compress=zstd" "noatime" ];
  };  

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
  # Sets big font for bootloader, as I have small laptop.
  # You can remove font and packages line to have default font kernel chooses.
  console = {
    earlySetup = true;
    # font = "${pkgs.unifont}/share/fonts/unifont.pcf.gz";
    # packages = with pkgs; [ unifont ];
    font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
    packages = with pkgs; [ terminus_font ];
    keyMap = "us";
  };


#+end_src
** Nix Settings
#+begin_src nix
  environment = {
    # set channels (backwards compatibility)
    etc = {
      "nix/flake-channels/nixpkgs".source = inputs.nixpkgs;
      "nix/flake-channels/home-manager".source = inputs.home-manager;
    };
  };

  # As name implies, allows Unfree packages. You can enable in case you wanna install non-free tools (eg: some fonts lol)
  nixpkgs = {
    config = {
      # keep a check and remove it asap
      # permittedInsecurePackages = [
      #   "openssl-1.1.1u"
      # ];
      allowUnfree = true;
      allowBroken = false;
    };
  };

  # faster rebuilding
  documentation = {
    enable = true;
    doc.enable = false;
    man.enable = true;
    dev.enable = false;
  };

  # Collect garbage and delete generation every 6 day. Will help to get some storage space.
  # Better to atleast keep it for few days, as you do major update (unstable), if something breaks you can roll back.
  nix = {
    gc = {
      automatic = true;
      dates = "daily";
      options = "--delete-older-than 15d";
    };

    # pin the registry to avoid downloading and evaling a new nixpkgs version every time
    registry = lib.mapAttrs (_: value: { flake = value; }) inputs;  

    # This will additionally add your inputs to the system's legacy channels  
    # Making legacy nix commands consistent as well, awesome!  
    nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;  

    # Free up to 1GiB whenever there is less than 100MiB left.
    extraOptions = ''
      experimental-features = nix-command flakes
      keep-outputs = true
      warn-dirty = false
      keep-derivations = true
      min-free = ${toString (100 * 1024 * 1024)}
      max-free = ${toString (1024 * 1024 * 1024)}
    '';

    # substituters are cachix domain, where some package binaries are available (eg : Hyprland & Emacs 30)
    # NOTE : You should do a simple rebuild with these substituters line first,
    # and then install packages from there, as a rebuild will register these cachix into /etc/nix/nix.conf file.
    # If you continue without a rebuild, Emacs will start compiling.
    # So rebuild and make sure you see these substituters in /etc/nix/nix.conf and then add packages.
    settings = {
      auto-optimise-store = true;
      builders-use-substitutes = true;
      trusted-users = ["root" "@wheel"];
      max-jobs = "auto";
      # use binary cache, its not gentoo
      # substituters = [
      #   "https://cache.nixos.org"
      # ];
      # # Keys for the sustituters cachix
      # trusted-public-keys = [
      #   "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      # ];
    };
  };
  system.autoUpgrade.enable = false;
  system.stateVersion = "23.05"; # DONT TOUCH THIS (See about state version on nixos manual)

#+end_src
** Boot loader
Configure the boot loader to use UEFI.
#FIXME Use grub if you prefer that.
#+begin_src nix
  boot = {
    # Uses bleeding edge latest kernel.
    kernelPackages = pkgs.linuxPackages_latest;
    kernelModules = ["tcp_bbr"];

    kernel.sysctl = {
      # The Magic SysRq key is a key combo that allows users connected to the
      # system console of a Linux kernel to perform some low-level commands.
      # Disable it, since we don't need it, and is a potential security concern.
      "kernel.sysrq" = 0;

      ## TCP hardening
      # Prevent bogus ICMP errors from filling up logs.
      "net.ipv4.icmp_ignore_bogus_error_responses" = 1;
      # Reverse path filtering causes the kernel to do source validation of
      # packets received from all interfaces. This can mitigate IP spoofing.
      "net.ipv4.conf.default.rp_filter" = 1;
      "net.ipv4.conf.all.rp_filter" = 1;
      # Do not accept IP source route packets (we're not a router)
      "net.ipv4.conf.all.accept_source_route" = 0;
      "net.ipv6.conf.all.accept_source_route" = 0;
      # Don't send ICMP redirects (again, we're on a router)
      "net.ipv4.conf.all.send_redirects" = 0;
      "net.ipv4.conf.default.send_redirects" = 0;
      # Refuse ICMP redirects (MITM mitigations)
      "net.ipv4.conf.all.accept_redirects" = 0;
      "net.ipv4.conf.default.accept_redirects" = 0;
      "net.ipv4.conf.all.secure_redirects" = 0;
      "net.ipv4.conf.default.secure_redirects" = 0;
      "net.ipv6.conf.all.accept_redirects" = 0;
      "net.ipv6.conf.default.accept_redirects" = 0;
      # Protects against SYN flood attacks
      "net.ipv4.tcp_syncookies" = 1;
      # Incomplete protection again TIME-WAIT assassination
      "net.ipv4.tcp_rfc1337" = 1;

      ## TCP optimization
      # TCP Fast Open is a TCP extension that reduces network latency by packing
      # data in the sender‚Äôs initial TCP SYN. Setting 3 = enable TCP Fast Open for
      # both incoming and outgoing connections:
      "net.ipv4.tcp_fastopen" = 3;
      # Bufferbloat mitigations + slight improvement in throughput & latency
      "net.ipv4.tcp_congestion_control" = "bbr";
      "net.core.default_qdisc" = "cake";
    };

    loader = {
      # FIXME change first line if you want to use Grub
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
      timeout = 1;
    };

    supportedFilesystems = [ "ntfs" ];
    tmp.cleanOnBoot = true;
  };
#+end_src
** Network
#+begin_src nix :noweb yes
  networking = {
    hostName = "<<my-hostname>>";
    # dns
    networkmanager = {
      enable = true;
      unmanaged = ["docker0" "rndis0"];
      wifi.macAddress = "random";
    };

    # Killer feature, Its a must these days.
    # Adblocker!! It uses steven black hosts.
    stevenBlackHosts = {
      enable = true;
      blockFakenews = true;
      blockGambling = true;
      blockPorn = true;
      blockSocial = false;
    };

    # Firewall uses iptables underthehood
    # Rules are for syncthing
    firewall = {
      enable = true;
      # For syncthing
      allowedTCPPorts = [8384 22000];
      allowedUDPPorts = [22000 21027];
      allowPing = false;
      logReversePathDrops = true;
    };
  };
  # Avoid slow boot time
  systemd.services.NetworkManager-wait-online.enable = false;
#+end_src
** Secure core
Some security features which are good enough to have.
I use ~doas~ replacing ~sudo~. Even if you type sudo in terminal it will use doas
#+begin_src nix :noweb yes
  security.rtkit.enable = true;
  security.polkit.enable = true;
  security.sudo.enable = false;
  # Configure doas
  security.doas = {
    enable = true;
    extraRules = [{
      users = [ "<<my-username>>" ];
      keepEnv = true;
      persist = true;  
    }];
  };
#+end_src
** Services
Certain services, just enable = true; gets the work done for most of the stuffs.
#+begin_src nix :noweb yes
  services = {
    dbus = {
      packages = with pkgs; [dconf udisks2 gcr];
      enable = true;
    };
    # udev.packages = with pkgs; [gnome.gnome-settings-daemon];

    journald.extraConfig = ''
      SystemMaxUse=50M
      RuntimeMaxUse=10M
    '';
    # To mount drives with udiskctl command
    udisks2.enable = true;
    # gnome.at-spi2-core.enable = true;

    # tlp.enable = true;     # TLP and auto-cpufreq for power management
    auto-cpufreq.enable = true;

    # For Laptop, make lid close and power buttom click to suspend
    logind = {
      lidSwitch = "suspend";
      extraConfig = ''
    HandlePowerKey = suspend
    '';
    };

    atd.enable = true;
    fstrim.enable = true;
    # See if you want bluetooth setup
    # blueman.enable = true;

    # For android file transfer via usb, or better check on KDE connect 
    gvfs.enable = true;

    # configuring syncthing
    syncthing = {
      enable = true;
      user = "<<my-username>>";
      configDir = "/home/<<my-username>>/.config/syncthing";
      overrideDevices = true;     # overrides any devices added or deleted through the WebUI
      overrideFolders = true;     # overrides any folders added or deleted through the WebUI
      devices = {
	"realme" = { id = "CEV3U3M-EJFLUJ3-UXFBEPG-KHX5EVK-3MSYH2W-BRNZEDH-TVJ4QWZ-X3G2CAW"; };
	#"device2" = { id = "DEVICE-ID-GOES-HERE"; };
      };
      folders = {
	"sync" = {
		path = "/home/<<my-username>>/d-sync";
		devices = [ "realme" ];
	};
	"emacs" = {
		path = "<<my-git-path>>";
		devices = [ "realme" ];
	};
	"theme" = {
		path = "/home/<<my-username>>/d-git/d-theme";
		devices = [ "realme" ];
	};
	"site" = {
		path = "/home/<<my-username>>/d-git/d-site";
		devices = [ "realme" ];
	};
      };
    };

    # This makes the user '<<my-username>>' to autologin in all tty
    # Depends on you if you want login manager or prefer entering password manually
    getty.autologinUser = "<<my-username>>" ;

    # Pipewire setup, just these lines enought to make sane default for it
    pipewire = {
      enable = true;
      alsa = {
	enable = true;
	support32Bit = true;
      };
      wireplumber.enable = true;
      pulse.enable = true;
      jack.enable = true;
    };
  };


#+end_src
*** Systemd
Make systemd services if required
#+begin_src nix

  systemd.services = {
    # For wayland users
    seatd = {
      enable = true;
      description = "Seat management daemon";
      script = "${pkgs.seatd}/bin/seatd -g wheel";
      serviceConfig = {
        Type = "simple";
        Restart = "always";
        RestartSec = "1";
      };
      wantedBy = ["multi-user.target"];
    };
  };

#+end_src
** System Packages
Install packages need by all users system wide.
#+begin_src nix
  environment.systemPackages = with pkgs; [
    gitFull
    neovim helix
  ];

#+end_src

** Overlay
Use overlay for emacs and Nix user repo (firefox extensions)
You can add your choice of overlay (eg: Discord, helix...)
#+begin_src nix
  # Add other overlays here
  # nixpkgs.overlays = with inputs; [emacs-overlay.overlay];
#+end_src
** Opengl Hardware
To use Opengl hardware acceleration using VA-API.
Useful to use in firefox and mpv. Idk why, but wayland requires it I guess.
When i removed this block, wayland (sway and hyprland) did not open at all.
#+begin_src nix

  hardware = {
    opengl = {
      enable = true;
      extraPackages = with pkgs; [
        vaapiVdpau
        libvdpau-va-gl
        intel-media-driver
        vaapiIntel
      ];
    };
  };
#+end_src
** Custom package
My fork of recursive font, which has nerd icons patched.
#+begin_src nix :tangle (format "%s/pkgs/code-d-font.nix" (get-named-src-block-contents "my-hostname" t)) :tangle-mode (identity #o444) :mkdirp yes
  { lib, fetchgit, stdenvNoCC }:

  stdenvNoCC.mkDerivation rec {
    pname = "code-d-font";
    version = "1.085";

    src = fetchgit {
      url = "https://github.com/idlip/code-d-font";
      sparseCheckout = [
	"fonts"
      ];
      sha256 = "sha256-PkJOX+zYQYs0J+T92y4oTXsYXKJ960/TSELDjykw52Q=";
    };

    installPhase = ''
      install -D -t $out/share/fonts/truetype/ $(find $src -type f -name '*.ttf')
    '';


    meta = with lib; {
      homepage = "https://github.com/arrowtype/recursive-code-config/";
      description = "A variable font family for code & UI";
      license = licenses.ofl;
      maintainers = [ maintainers.idlip ];
      platforms = platforms.all;
    };
  }
#+end_src

** System Fonts
Enables additional fonts system wide. See how easy it is to manage fonts with nix!
#+begin_src nix
  fonts = {
    fonts = with pkgs; [
      noto-fonts unifont
      symbola noto-fonts-emoji maple-mono
      (callPackage ./pkgs/code-d-font.nix {})

      (nerdfonts.override {fonts = [ "JetBrainsMono"  ];})
    ];

    enableDefaultFonts = false;

    # this fixes emoji stuff
    fontconfig = {
      defaultFonts = {
	monospace = [
		"Code D OnePiece"
		"JetBrainsMono Nerd Font"
		"Noto Color Emoji"
	];
	sansSerif = [ "Code D Haki" "Noto Sans" "Noto Serif" ];
	serif = [ "Code D Ace" "Noto Sans" "Noto Serif"];
	emoji = [ "Noto Color Emoji" "Code D Lip" "Symbola" "Noto Sans" ];
      };
    };
  };
#+end_src
** Env
#+begin_src nix
  environment = {
    variables = {
      NIXOS_OZONE_WL = "1";
      EDITOR = "nvim";
      BROWSER = "firefox";
      MOZ_ENABLE_WAYLAND = "1";
    };
  };

#+end_src
** System Users
*** i
Configure system permission for the primary user
#+begin_src nix :noweb yes

  users.users.<<my-username>> = {
                                isNormalUser = true;
                                extraGroups = [
                                  "wheel"
                                  "gitea"
                                  "docker"
                                  "systemd-journal"
                                  "audio"
                                  "plugdev"
                                  "wireshark"
                                  "video"
                                  "input"
                                  "lp"
                                  "networkmanager"
                                  "power"
                                  "nix"
                                ];
                                uid = 1000;
                                # Use fish if you prefer it
                                shell = pkgs.zsh;

                                # Or else login to root (which you will create while rebuilding) and run passwd USERNAME 
                                # initialPassword = "changeme";
                              };
  programs.zsh.enable = true;

#+end_src
** Closing Statement
End of Nix Configuration block
#+begin_src nix
  }
#+end_src
* üë§ User Configurations
User specific configuration
** i-home
:PROPERTIES:
:header-args: :tangle-mode (identity #o444) :noweb yes :mkdirp yes :tangle (format "./%s/i-home/homeman.nix" (get-named-src-block-contents "my-hostname" t))
:END:
Home config, and a pretty place (?)
*** Default-nix
#+begin_src nix :tangle-mode  (identity #o444) :mkdirp yes :tangle (format "./%s/i-home/default.nix" (get-named-src-block-contents "my-hostname" t))

  { inputs, pkgs, config, lib, self, ...}:
  {
    config.home.stateVersion = "23.05";
    config.home.extraOutputsToInstall = ["doc" "devdoc"];
    imports = [
      ./homeman.nix
      # inputs.nur.nixosModules.nur
    ];
  }

#+end_src
*** Main Body
**** Tangled File Warning
Places a warning at the top of the target file.
#+begin_src nix
  # WARNING : This file was generated by d-setup.org
  # DO NOT MODIFY THIS FILE!
  # Any changes made here will be overwritten.
#+end_src
**** Inherited Sources
#+begin_src nix
  { inputs, pkgs, self, lib, config, ... }:

#+end_src
**** Opening Statement
Opening brace that contains the rest of the configuration file.
#+begin_src nix
  {
#+end_src
**** Shell Configuration
***** System Shell
#+begin_src nix :noweb yes
  programs = {
    # Starship
    starship = {
      enable = true;
      enableZshIntegration = true;
      settings = {
	add_newline = true;
	scan_timeout = 5;
	character = {
		error_symbol = " [ÓÉÄ](#df5b61)";
		success_symbol = "[ÔÅî](#6791c9)";
		vicmd_symbol = "[](bold yellow)";
		format = "$directory$all$character](bold)[ ÔÅî ](bold blue)";
	};
	git_commit = {commit_hash_length = 4;};
	line_break.disabled = false;
	lua.symbol = "[Û∞¢±](blue) ";
	python.symbol = "[Ó§®](blue) ";
	directory.read_only = " Ô†Ω";
	nix_shell.symbol = "Ôåì ";
	hostname = {
		ssh_only = true;
		format = "[$hostname](bold blue) ";
		disabled = false;
	};
      };
    };

    zsh = {
      enable = true;
      dotDir = ".config/shell";
      enableCompletion = true;
      enableAutosuggestions = true;
      history.extended = true;
      sessionVariables = {
	LC_ALL = "en_US.UTF-8";
	ZSH_AUTOSUGGEST_USE_ASYNC = "true";
	NIXOS_OZONE_WL = "1";
	BROWSER = "librewolf";
	MOZ_ENABLE_WAYLAND = "1";
      };

      envExtra = ''
	  export PATH="$PATH:<<my-bin>>:$HOME/.local/bin/d"
	  export EDITOR="emacsclient -nw -a 'nvim'"
	  export BEMENU_OPTS="-i -s -l 10 -R 20 -p 'Ôåì ' -c -B 2 -W 0.5 --hp 15 --fn 'Code D Ace 20' --nb '#121212' --ab '#121212' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#9aff9a' --hf '#121212' --fb '#121212' --ff '#a6e3a1' --tb '#121212' --tf '#f9e2af' ";
	  export VISUAL=$EDITOR
	  export STARDICT_DATA_DIR="$HOME/.local/share/stardict"
	  export GRIM_DEFAULT_DIR="$HOME/pics/sshots/"

	  if [ -z $DISPLAY ] && [ "$(tty)" = "/dev/tty1" ]; then
	    exec Hyprland
	  fi
	  '';

      initExtra = lib.mkAfter ''
	  source <<my-config-path>>/sources.sh

	  source "${pkgs.zsh-syntax-highlighting}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
	  source "${pkgs.zsh-history-substring-search}/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
	  source "${pkgs.zsh-autosuggestions}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
	  source "${pkgs.nix-zsh-completions}/share/zsh/plugins/nix/nix-zsh-completions.plugin.zsh"
	  source "${pkgs.zsh-nix-shell}/share/zsh-nix-shell/nix-shell.plugin.zsh"
	  source "${pkgs.zsh-autopair}/share/zsh/zsh-autopair/autopair.zsh"

	  # For vterm, needs to be at last!
	  function vterm_prompt_end() {
	      printf "\e]%s\e\\" "$1" "51;A$(whoami)@$(hostname):$(pwd)"
	      }
	      setopt PROMPT_SUBST
	      PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'                       
	  '';

      history = {
	save = 10000;
	size = 10000;
	expireDuplicatesFirst = true;
	ignoreDups = true;
      };
    };
  };

      #+end_src
***** Sources.sh
This is easy to manage and also get the syntax highlighing for shell, as nix also paste same texts into path.
#+begin_src shell :noweb yes :tangle (format "%s/sources.sh" (get-named-src-block-contents "my-configs" t))
  eval "$(starship init zsh)"
  # eval "$(direnv hook zsh)"
  # Removed starship and going default minimal way!

  # Make zsh better simply
  autoload -U colors && colors  # Load colors
  # PS1="%B%{$fg[yellow]%}[%{$fg[cyan]%}%~%{$fg[yellow]%}]
   # %{$fg[blue]%}ÔÅî %b%{$reset_color%}%b"
  # setopt autocd		# Auto cd
  stty stop undef		# Disable ctrl-s to freeze terminal.
  setopt interactive_comments

  # Basic auto/tab complete:
  autoload -U compinit
  zstyle ':completion:*' menu select
  zmodload zsh/complist
  compinit
  _comp_options+=(globdots)		# Include hidden files.

  # Use vim keys in tab complete menu:
  bindkey -M menuselect 'h' vi-backward-char
  bindkey -M menuselect 'k' vi-up-line-or-history
  bindkey -M menuselect 'l' vi-forward-char
  bindkey -M menuselect 'j' vi-down-line-or-history

  bindkey -e
  WORDCHARS='*?_.[]~=&;!$%^(){}<>'

  # Aliases
  alias cleanup="doas nix-collect-garbage --delete-older-than 7d"
  alias bloat="nix path-info -Sh /run/current-system"
  alias ytmp3="yt-dlp -x --continue --add-metadata --embed-thumbnail --audio-format mp3 --audio-quality 0 --metadata-from-title='%(artist)s - %(title)s' --prefer-ffmpeg -o '%(title)s.%(ext)s' "
  alias cat="bat --style=plain"
  alias grep='rg'
  alias du='du-dust'
  alias ps='procs'
  alias m="mkdir -p"
  alias ls="exa -h --git --icons --color=auto --group-directories-first -s extension"
  alias l="ls -lF --time-style=long-iso --icons"
  alias la="exa -lah --tree"
  alias tree="exa --tree --icons --tree"
  alias http="python3 -m http.server"
  alias burn="pkill -9"
  alias diff="diff --color=auto"
  alias kys="doas shutdown now"
  alias killall="pkill"
  alias ".1"="cd .."
  alias ".2"="cd ../.."
  alias ".3"="cd ../../.."
  alias c="clear"
  alias v="nvim"
  alias emd="pkill emacs; emacs --daemon"
  alias cp="cp -iv"
  alias mv="mv -iv"
  alias rm="rm -vI"
  alias bc="bc -ql"
  alias mkd="mkdir -pv"
  alias ytfzf="ytfzf -D"
  alias hyprcaps="hyprctl keyword input:kb_options caps:caps"
  alias gc="git clone --depth=1"
  alias sudo="doas"

  # export BEMENU_OPTS="-i -l 10 -p 'Ôåì ' -c -B 2 -W 0.5 --hp 15 --fn 'ComicCodeLigatures Nerd Font 20' --nb '#121212' --ab '#121212' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#9aff9a' --hf '#121212' --fb '#121212' --ff '#a6e3a1' --tb '#121212' --tf '#f9e2af' ";

  # neovim as manpager, if not using emacs
  export MANPAGER='nvim +Man! +"set nocul" +"set noshowcmd" +"set noruler" +"set noshowmode" +"set laststatus=0" +"set showtabline=0" +"set nonumber"'


  # Functions
  function ytdl() {
      yt-dlp --embed-metadata --embed-subs -f 22 "$1"
  }

  function fcd() {
      cd "$(find -type d | fzf)"
  }

  function shellnix() {
      nix shell nixpkgs#"$1"
  }

  ## Emacs all time

  function {e,find-file,'emacsclient -t','emacsclient -nw'} () {
      if [ "$INSIDE_EMACS" = "vterm" ]; then
	  emacsclient $1 >/dev/null 2>&1 || echo "Give a file to open"
      else
	  emacsclient -t $1 || echo "Start emacs daemon"
      fi
  }

  function manp () { # use emacs as man pager or neovim
      if [ "$INSIDE_EMACS" = "vterm" ]; then
	  emacsclient -e "(progn (man \"$1\") (delete-window))"
      elif [ "$(pgrep emacs)"  ]; then
	  emacsclient -nw -e "(progn (man \"$1\") (delete-window))"
      else
	  man $1
      fi
  }


  if [ -n "${commands[fzf-share]}" ]; then
    source "$(fzf-share)/key-bindings.zsh"
    source "$(fzf-share)/completion.zsh"
  fi

  # precmd() {
  #     print ""
  # }


#+end_src
**** User Packages
Installs packages for this user only.
***** Opening Statement
#+begin_src nix
  home.packages = with pkgs; [
#+end_src
***** Wayland
#+begin_src nix
  # wayland
  libnotify libsixel bemenu
  wf-recorder brightnessctl pamixer slurp grim 
  wl-clipboard wtype swaybg swayidle gammastep
#+end_src
***** Media
#+begin_src nix
  # media
  mpc_cli pulsemixer imv
  yt-dlp jq ytfzf ani-cli youtube-tui
#+end_src
***** cli-tools
#+begin_src nix
  # cli tools
  pcmanfm libreoffice pandoc groff mupdf
  # wkhtmltopdf-bin
  fzf neovim unzip  
  aspell aspellDicts.en-science aspellDicts.en hunspell hunspellDicts.en-us
  ffmpeg sdcv nq
  #mu isync
  syncthing dconf keepassxc
#+end_src
***** Themes
#+begin_src nix
  # themes
  gruvbox-gtk-theme
  orchis-theme
  bibata-cursors
  papirus-icon-theme
#+end_src
***** Browsers
#+begin_src nix
  # pioneer of web
  mullvad-browser librewolf brave ungoogled-chromium
#+end_src
***** LSP -IDE
#+begin_src nix
  nodePackages.bash-language-server
  # nodePackages.vscode-langservers-extracted
  # python311Packages.python-lsp-server
  nodePackages.pyright
  python3 gcc gnumake
  R rPackages.languageserver rPackages.lintr
  tree-sitter
  texlive.combined.scheme-full
#+end_src
***** Closing Statement
#+begin_src nix
  ];
#+end_src
**** Package Specific configs
Additional Setting for individual applications.
You can copy and use your old config file only, no need to tweak nix way.
There will be not much of a difference.
***** Gtk Theme
#+begin_src nix
  gtk = {
    enable = true;
    theme = {
      name = "Gruvbox-Dark-B";
    };
    iconTheme = {
      name = "Papirus";
    };
    font = {
      name = "Code D Haki";
      size = 17;
    };
    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
    };
    gtk2.extraConfig = ''
      gtk-xft-antialias=1
      gtk-xft-hinting=1
      gtk-xft-hintstyle="hintslight"
      gtk-xft-rgba="rgb"
    '';
  };

  # cursor theme
  home.pointerCursor = {
    name = "Bibata-Modern-Classic";
    package = pkgs.bibata-cursors;
    size = 24;
    gtk.enable = true;
  };


#+end_src
***** Aria
Aria is fantastic download manager as well does torrents. So minimal and gets the job done.
#+begin_src nix :noweb yes
  programs = {
    aria2 = {
      enable = true;
      settings = {
        dir = "/home/<<my-username>>/dloads";
        file-allocation = "none";
        log-level = "warn";
        split = "10";
        max-connection-per-server = 10;
        min-split-size = "5M";
        bt-max-peers = "0";
        bt-request-peer-speed-limit = "0";
        max-overall-upload-limit = "512k";
        bt-external-ip = "127.0.0.1";
        dht-listen-port = "6882";
        enable-dht = "true";
        enable-peer-exchange = "true";
        listen-port = "6881";
        bt-force-encryption = "true";
        bt-min-crypto-level = "arc4";
        bt-require-crypto = "true";
        follow-torrent = "mem";
        seed-ratio = "100";
        seed-time = "0";
        socket-recv-buffer-size = "1M";
        event-poll = "epoll";
        realtime-chunk-checksum = "true";
        allow-overwrite = "true";
        always-resume = "true";
        auto-file-renaming = "false";
        continue = "true";
        rpc-save-upload-metadata = "false";
      };
    };
  };
#+end_src
***** Cli tools
The better cli alternative!
#+begin_src nix
  programs = {
    exa = {
      enable = true;
      extraOptions = ["--group-directories-first" "--header"];
      icons = true;
    };
    bat = {
      enable = true;
      extraPackages = with pkgs.bat-extras; [ batdiff batman batgrep batwatch ];
      # config = {
      #   theme = "gruvbox-dark";
      # };
    };
    ripgrep = {
      enable = true;
      arguments = [
	"--max-columns-preview"
	"--colors=line:style:bold"
      ];
    };
    btop = {
      enable = true;  
      settings = {
	color_theme = "Default";
	theme_background = false;
	vim_keys = true;
	shown_boxes = "proc cpu";
	rounded_corners = true ;
	graph_symbol = "block";
	proc_sorting = "memory";
	proc_reversed = false;
	proc_gradient = true;
      };
    };
  };
#+end_src
***** Dunst
#+begin_src nix :noweb yes
  services.dunst = {
    enable = true;
    iconTheme = {
      package = pkgs.papirus-icon-theme;
      name = "Papirus";
    };
    settings = {
      global = {
	monitor = 0;
	background = "#050505";
	frame_color = "#2e8b57";
	transparency = 0;
	follow = "none";
	width = 900;
	height = 900;
	idle_threshold = 120;
	origin = "top-right";
	offset = "10x50";
	scale = 0;
	notification_limit = 0;
	progress_bar = "true";
	alignment = "center";
	progress_bar_height = 10;
	progress_bar_frame_width = 1;
	progress_bar_min_width = 150;
	progress_bar_max_width = 500;
	indicate_hidden = "yes";
	separator_height = 2;
	padding = 20;
	horizontal_padding = 12;
	text_icon_padding = 8;
	frame_width = 3;
	separator_color = "frame";
	sort = "yes";
	font = "Code D Ace 20";
	line_height = 0;
	markup = "full";
	stack_duplicates = "true";
	vertical_alignment = "center";
	show_age_threshold = 60;
	ellipsize = "middle";
	ignore_newline = "no";
	show_indicators = "yes";
	icon_position = "left";
	max_icon_size = 32;
	sticky_history = "yes";
	history_length = 20;
	browser = "<<my-bin>>/d-stuff";
	always_run_script = "true";
	title = "Dunst";
	class = "Dunst";
	corner_radius = 20;
	ignore_dbusclose = false;
	force_xwayland = "false";
	layer = "overlay";
	mouse_left_click = "do_action";
	mouse_middle_click = "do_action";
	mouse_right_click = "close_all";
	};

	reminder = {
	 category = "reminder";
	 background = "#33333390";
	 foreground = "#ffffff";
	 timeout = 0;
	 script="d-notif";
      };

      urgency_low = {
	background = "#050505";
	foreground = "#ffffff";
	timeout = 5;
      };
      urgency_normal = {
	background = "#050505";
	foreground = "#ffffff";
	timeout = 6;
      };
      urgency_critical = {
	background = "#050505";
	foreground = "#ffffff";
	frame_color = "#f38ba8";
	timeout = 0;
      };
    };
  };
#+end_src
***** Foot
#+begin_src nix

  programs.foot = {
    enable = true;
    # doesnt work properly; Enable it in hyprland or sway config
    server.enable = false;
    settings = {
      main = {
	term = "xterm-256color";
	font = "Code D OnePiece:size=12, Noto Color Emoji:size=15";
	font-bold = "Code D Lip:size=12, Noto Color Emoji:size=15";
	letter-spacing = "1";
	 box-drawings-uses-font-glyphs = "no";
      };
      scrollback = {
	lines = "1000";
      };
      key-bindings = {
	clipboard-copy = "Control+Shift+c Mod1+w";
	clipboard-paste = "Control+Shift+v Control+y";
	primary-paste = "Shift+Insert";

      };
      colors = {
       background="050505";
       foreground="ffffff";
       regular0="030303";
       regular1="ff8059";
       regular2="44bc44";
       regular3="d0bc00";
       regular4="2fafff";
       regular5="feacd0";
       regular6="00d3d0";
       regular7="bfbfbf";
       bright0="595959";
       bright1="ef8b50";
       bright2="70b900";
       bright3="c0c530";
       bright4="79a8ff";
       bright5="b6a0ff";
       bright6="6ae4b9";
       bright7="ffffff";
	alpha= "1.0";
      };
      mouse = {
	hide-when-typing = "yes";
      };
    };
  };
#+end_src
***** Hyprland
#+begin_src nix :noweb yes

  # Symlinking the file (hyprland.conf) from the path of repo so we can edit and have immediate effects without requiring to rebuild
    xdg.configFile."hypr/hyprland.conf".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/hypr/hyprland.conf";

#+end_src
****** Hyprland config
#+begin_src conf  :tangle (format "%s/hypr/hyprland.conf" (get-named-src-block-contents "my-configs" t))
  monitor = ,preferred,auto,1

  # ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà
  # ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ ‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ

  env = XDG_CURRENT_DESKTOP,Hyprland 
  env = XDG_SESSION_TYPE,wayland 
  env = XDG_SESSION_DESKTOP,Hyprland 

  env = GDK_BACKEND,wayland
  env = QT_QPA_PLATFORM,wayland
  env = QT_QPA_PLATFORMTHEME,qt5ct #env = QT_STYLE_OVERRIDE,kvantum
  env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1
  env = QT_AUTO_SCREEN_SCALE_FACTOR,1
  env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1

  env = SDL_VIDEODRIVER,wayland 
  env = _JAVA_AWT_WM_NONREPARENTING,1
  env = WLR_NO_HARDWARE_CURSORS,1 

  env = MOZ_DISABLE_RDD_SANDBOX,1
  env = MOZ_ENABLE_WAYLAND,1 

  env = OZONE_PLATFORM,wayland

  # ---- Autostart Apps ----

  # exec-once=waybar
  exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
  exec-once = wl-paste --type text --watch cliphist store
  exec-once = wl-paste --type image --watch cliphist store
  exec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
  exec-once=swayidle timeout 150 'hyprctl dispatch dpms off' resume 'hyprctl dispatch dpms on'
  exec-once=gammastep -l 19:72 -t 6500:4100
  exec-once=d-walls
  exec-once=foot --server

  # --- Local var ---
  $notifycmd = notify-send -h string:x-canonical-private-synchronous:hypr-cfg -u low

  input {
  kb_layout=us
  kb_options=ctrl:nocaps
  follow_mouse=0
  #    repeat_delay=250

  touchpad {
  natural_scroll=no
  disable_while_typing=0
  clickfinger_behavior=1
  middle_button_emulation=1
  tap-to-click=1
  }

  sensitivity=0 # -1.0 - 1.0, 0 means no modification.
  }

  # Disable laptop keyboard
  device:at-translated-set-2-keyboard {
  enabled=false
  }

  general {
  gaps_in=5
  gaps_out=5
  border_size=2
  no_border_on_floating = true
  col.active_border = rgba(e5b9c6ff) rgba(c293a3ff) 45deg
  col.inactive_border = 0xff382D2E
  no_border_on_floating = false # enable border on float window
  layout = dwindle
  no_cursor_warps = true
  }

  misc {
  disable_hyprland_logo = true
  disable_splash_rendering = true
  mouse_move_enables_dpms = true
  enable_swallow = true
  swallow_regex = ^(foot)$
  }

  decoration {
  rounding=16
  multisample_edges = true
  inactive_opacity=0.8
  active_opacity=0.9
  fullscreen_opacity=1.0
  dim_inactive = false
  blur=1
  blur_size=6
  blur_passes=3
  blur_new_optimizations=1
  blur_xray = true
  blur_ignore_opacity = true
  }

  animations {
  enabled=1
  }

  dwindle {
  pseudotile = true
  preserve_split=true
  force_split=true
  no_gaps_when_only=false
  default_split_ratio=1.0
  }

  master {
  new_is_master=false
  new_on_top=false
  allow_small_split=true
  no_gaps_when_only=false
  }

  gestures {
  workspace_swipe=1
  workspace_swipe_distance=400
  workspace_swipe_invert=1
  workspace_swipe_min_speed_to_force=30
  workspace_swipe_cancel_ratio=0.5
  }

  # ‚ñà‚ñë‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ñë‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ
  # ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñÑ‚ñà

  # Opacity 
  windowrulev2 = opacity 0.90 0.90,class:^(Brave-browser)$
  windowrulev2 = opacity 0.80 0.80,class:^(pcmanfm)$

  # Position
  windowrulev2 = float,title:^(Media viewer)$
  windowrulev2 = float,title:^(Volume Control)$
  windowrulev2 = float,title:^(Picture-in-Picture)$
  windowrulev2 = float,class:^(Viewnior)$
  windowrulev2 = float,title:^(DevTools)$
  windowrulev2 = float,class:^(file_progress)$
  windowrulev2 = float,class:^(confirm)$
  windowrulev2 = float,class:^(dialog)$
  windowrulev2 = float,class:^(download)$
  windowrulev2 = float,class:^(notification)$
  windowrulev2 = float,class:^(error)$
  windowrulev2 = float,class:^(confirmreset)$
  windowrulev2 = float,title:^(Open File)$
  windowrulev2 = float,title:^(branchdialog)$
  windowrulev2 = float,title:^(Confirm to replace files)
  windowrulev2 = float,title:^(File Operation Progress)

  windowrulev2 = move 75 44%,title:^(Volume Control)$

  # Size
  windowrulev2 = size 800 600,class:^(download)$
  windowrulev2 = size 800 600,title:^(Open File)$
  windowrulev2 = size 800 600,title:^(Save File)$
  windowrulev2 = size 800 600,title:^(Volume Control)$

  windowrulev2 = idleinhibit focus,class:^(mpv)$
  windowrulev2 = idleinhibit fullscreen,class:^(Brave-browser)$

  # xwaylandvideobridge
  windowrulev2 = opacity 0.0 override 0.0 override,class:^(xwaylandvideobridge)$
  windowrulev2 = noanim,class:^(xwaylandvideobridge)$
  windowrulev2 = nofocus,class:^(xwaylandvideobridge)$
  windowrulev2 = noinitialfocus,class:^(xwaylandvideobridge)$

  windowrule=opacity 1.0,chromium

  windowrule=float,ncmpcpp
  windowrule=float,viewnior

  windowrule=float,mpv
  windowrule=opaque,mpv
  windowrule=noanim,mpv
  windowrule=noblur,mpv
  windowrulev2 = move 80% 65%, class:^(mpv)$, title:^(podcast)$
  windowrulev2 = workspace special, class:^(mpv)$, title:^(podcast)$

  windowrulev2=fullscreen,class:(brave)
  windowrulev2=fullscreen,class:(chromium)
  windowrulev2 = float, class:^(firefox)$, title:^(Firefox ‚Äî Sharing Indicator)$
  windowrule=opaque,imv

  windowrulev2 = size 60% 70%,title:^(BrowserInput.*)$
  windowrulev2 = center,title:^(BrowserInput.*)
  windowrulev2 = float,title:^(BrowserInput.*)
  #windowrulev2 = workspace special, title:^(BrowserInput.*)
  windowrulev2 = size 800 600,class:^(download)$
  windowrulev2 = size 800 600,title:^(Open File)$
  windowrulev2 = size 800 600,title:^(Save File)$
  windowrulev2 = size 800 600,title:^(Volume Control)$

  windowrulev2 = idleinhibit focus,class:^(mpv)$
  windowrulev2 = idleinhibit fullscreen,class:^(Brave-browser)$


  #blurls=waybar
  # blurls=wofi
  # blurls=rofi
  # blurls=launcher
  # blurls=menu
  blurls=gtk-layer-shell
  blurls=notifications


  # ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ
  # ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ
  bind=SUPER,e,exec,d-note
  bind=SUPER,y,exec,ytfzf -D
  bind=SUPER,x,exec,d-power
  # bind=SUPER,period,exec,d-dict
  bind=SUPERSHIFT,b,exec,d-bookmark
  bind=SUPER,m,exec,d-urls
  bind=SUPER,Insert,exec,d-urls

  bind=SUPER,grave,exec,d-unicodes
  bind=SUPER,Delete,exec,pkill -INT wf-recorder

  bind=CONTROL,F1,exec,hyprctl dispatch dpms on                               
  bind=SUPER,F1,exec,d-keys
  bind=SUPER,F2,exec,brightnessctl set 2%-
  bind=SUPER,F3,exec,brightnessctl set +2%
  bind=SUPER,F5,exec,d-walls
  bind=SUPER,F8,exec,mpv --untimed --geometry=35%-30-30 --no-cache --no-osc --no-input-default-bindings --profile=low-latency --input-conf=/dev/null --title=webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)
  bind=SUPER,F11,exec,d-mpdplay
  bind=SUPER,F10,exec,mpc prev
  bind=SUPER,F12,exec,mpc next


  # ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÄ‚ñà‚ñÄ
  # ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñë‚ñà‚ñë
  bind=,Print,exec,d-sshot
  bind=CONTROL,Insert,exec,d-sshot
  bind=SUPER,F4,exec,d-record


  # ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ
  # ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ
  bind = SUPER, RETURN, exec, emacsclient -c -e "(multi-vterm)"
  bind = SUPERSHIFT, RETURN, exec, emacsclient -c -e "(multi-vterm-next)"
  bind = SUPERSHIFT, Q, killactive, 
  bind = SUPERSHIFT, R, exec, hyprctl reload
  bind = SUPERCONTROL, Q, exit, 
  bind = SUPER, F12, exec, emacsclient -c -e "(multi-vterm)"
  bind = SUPER, SPACE, togglefloating, 
  bind = SUPER, d, exec, bemenu-run -W 0.25 -l 8
  bind = SUPER, b, exec, pkill -SIGUSR1 waybar || pidof -x waybar || waybar

  bind=,XF86AudioRaiseVolume,exec,pamixer -ui 5
  bind=,XF86AudioLowerVolume,exec,pamixer -ud 5
  bind=,XF86AudioMute,exec,pamixer -t


  # ‚ñà‚ñë‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ñë‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñÄ‚ñà‚ñÄ
  # ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñë‚ñà‚ñë
  bind = SUPER,T,pseudo,
  bind = SUPER,F,fullscreen,
  bind = SUPER, S, togglesplit, # dwindle
  # Change Workspace Mode
  bind = SUPER SHIFT, Space, workspaceopt, allfloat
  bind = SUPER SHIFT, Space, exec, $notifycmd 'Toggled All Float Mode'
  bind = SUPER SHIFT, T, workspaceopt, allpseudo
  bind = SUPER SHIFT, T, exec, $notifycmd 'Toggled All Pseudo Mode'

  bind = SUPER ALT, j, cyclenext,
  bind = SUPER ALT, j, bringactivetotop,


  # ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ
  # ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÑ‚ñà
  bind = SUPER, h, movefocus, l
  bind = SUPER, l, movefocus, r
  bind = SUPER, k, movefocus, u
  bind = SUPER, j, movefocus, d

  # ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ
  # ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñà‚ñÑ
  bind = SUPER SHIFT, left, movewindow, l
  bind = SUPER SHIFT, right, movewindow, r
  bind = SUPER SHIFT, up, movewindow, u
  bind = SUPER SHIFT, down, movewindow, d

  bind = SUPER SHIFT, h, movewindow, l
  bind = SUPER SHIFT, l, movewindow, r
  bind = SUPER SHIFT, k, movewindow, u
  bind = SUPER SHIFT, j, movewindow, d

  # ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ
  # ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñÑ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ÄÉ‚ñà‚ñà‚ñÑ
  bind = SUPER CTRL, left, resizeactive, -20 0
  bind = SUPER CTRL, right, resizeactive, 20 0
  bind = SUPER CTRL, up, resizeactive, 0 -20
  bind = SUPER CTRL, down, resizeactive, 0 20

  bind = SUPER CTRL, h, resizeactive, -20 0
  bind = SUPER CTRL, l, resizeactive, 20 0
  bind = SUPER CTRL, k, resizeactive, 0 -20
  bind = SUPER CTRL, j, resizeactive, 0 20

  # ‚ñÄ‚ñà‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÑ
  # ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñÄ
  bind = SUPER, g, togglegroup
  bind = SUPER, tab, changegroupactive
  bind = SUPER, G, exec, $notifycmd 'Toggled Group Mode'

  # ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñë
  # ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ
  bind = SUPER, a, togglespecialworkspace
  bind = SUPERSHIFT, a, movetoworkspace, special
  # bind = SUPER, a, exec, $notifycmd 'Toggled Special Workspace'
  bind = SUPER, c, exec, hyprctl dispatch centerwindow

  # ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñë‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñÄ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñë‚ñà
  # ‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà
  bind = SUPER, 1, workspace, 1
  bind = SUPER, 2, workspace, 2
  bind = SUPER, 3, workspace, 3
  bind = SUPER, 4, workspace, 4
  bind = SUPER, 5, workspace, 5
  bind = SUPER, 6, workspace, 6
  bind = SUPER, 7, workspace, 7
  bind = SUPER, 8, workspace, 8
  bind = SUPER, 9, workspace, 9
  bind = SUPER, 0, workspace, 10
  bind = SUPER, TAB, workspace, e+1
  bind = SUPERSHIFT, TAB, workspace, e-1

  # ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ
  # ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñà‚ñÑ
  bind = SUPER SHIFT, 1, movetoworkspace, 1
  bind = SUPER SHIFT, 2, movetoworkspace, 2
  bind = SUPER SHIFT, 3, movetoworkspace, 3
  bind = SUPER SHIFT, 4, movetoworkspace, 4
  bind = SUPER SHIFT, 5, movetoworkspace, 5
  bind = SUPER SHIFT, 6, movetoworkspace, 6
  bind = SUPER SHIFT, 7, movetoworkspace, 7
  bind = SUPER SHIFT, 8, movetoworkspace, 8
  bind = SUPER SHIFT, 9, movetoworkspace, 9
  bind = SUPER SHIFT, 0, movetoworkspace, 10
  # Layout Change
  bind = SUPER, w, exec, hyprctl keyword general:layout "dwindle"
  bind = SUPERSHIFT, w, exec, hyprctl keyword general:layout "master"


  # ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ ‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ
  # ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà
  bindm = SUPER, mouse:272, movewindow
  bindm = SUPER, mouse:273, resizewindow
  bind = SUPER, mouse_down, workspace, e+1
  bind = SUPER, mouse_up, workspace, e-1

  # Key Chords
  bind=SUPER,period,submap,Wordz
  submap=Wordz
  bind=,d,exec,d-dict
  bind=,d,submap,reset

  bind=,a,exec,d-vocab
  bind=,a,submap,reset

  bind=,v,exec,wtype "$(cat ~/.local/share/dict/myglossary | bemenu | awk '{print $1}')"
  bind=,v,submap,reset

  bind=,escape,submap,reset
  bind=CONTROL,g,submap,reset
  submap=reset


  bind=SUPER,O,submap,Scripts
  submap=Scripts
  bind=,o,exec,d-menu
  bind=,o,submap,reset

  bind=,i,exec,d-stuff
  bind=,i,submap,reset

  bind=,p,exec,d-pirt
  bind=,p,submap,reset

  bind=,x,exec,d-power
  bind=,x,submap,reset

  bind=,escape,submap,reset
  bind=CONTROL,g,submap,reset
  submap=reset

  bind=SUPER,P,submap,Apps
  submap=Apps

  bind=,p,exec,sioyek
  bind=,p,submap,reset

  bind=,f,exec,firefox
  bind=,f,submap,reset

  bind=,b,exec,brave
  bind=,b,submap,reset

  bind=,w,exec,librewolf
  bind=,w,submap,reset

  bind=,c,exec,chromium
  bind=,c,submap,reset

  bind=,e,exec,emacsclient -c
  bind=,e,submap,reset

  bind=,escape,submap,reset
  bind=CONTROL,g,submap,reset
  submap=reset
#+end_src
***** Sway
Its more mature than hyprland. So... better to have it! I dont use sway that much.
#+begin_src nix
  wayland.windowManager.sway = {
    enable = true;
    config = null;
    extraConfig = ''
      # user config directory
  include $HOME/.config/sway/config.d/*

  # only enable this if every app you use is compatible with wayland
  xwayland disable
           '';
     wrapperFeatures.gtk = true;
  };
#+end_src
***** Emacs
#+begin_src nix :noweb yes

  # Symlinking emacs configs, so we can edit it in realtime and have immediate effect without requiring a rebuild.

  home.file.".config/emacs/early-init.el".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/emacs/early-init.el";
  home.file.".config/emacs/init.el".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/emacs/init.el";

  programs.emacs = {
    enable = true;
    package = pkgs.emacs29-pgtk;
    extraPackages = (epkgs: (with epkgs; [
      treesit-grammars.with-all-grammars
      vterm multi-vterm vundo undo-fu-session flycheck helpful ox-pandoc
      no-littering rainbow-delimiters rainbow-mode
      vertico orderless consult marginalia embark org-modern corfu cape corfu-terminal
      org olivetti nerd-icons async dirvish
      embark-consult consult-eglot consult-flycheck markdown-mode nix-mode
      reddigg hnreader mingus which-key magit webpaste org-present
      # pdf-tools nov (using built-in doc-view)
      shrface shr-tag-pre-highlight gcmh nov devdocs-browser
      org-mime beframe denote tempel tempel-collection
      sdcv elfeed elfeed-org link-hint powerthesaurus jinx meow
      doom-modeline hide-mode-line el-fetch ox-hugo
      ement kind-icon speed-type ess vc-backup aria2
    ])
    );
  };
#+end_src
***** FireFox
:PROPERTIES:
:header-args: :tangle no
:END:
****** initial set
beginning of the FireFox configuration block
#+begin_src nix
  programs.firefox = {
    enable = true;
#+end_src
****** User Profiles
******* Opening Statement
creates profile settings specific to a user, and sets my profile as the default
#+begin_src nix
  profiles.ihome = {
    isDefault = true;
    # extensions = with pkgs.nur.repos.rycee.firefox-addons; [
    #   #bypass-paywalls-clean
    #   cookies-txt
    #   ff2mpv
    #   vimium
    #   languagetool
    #   ublock-origin
    #   darkreader
    #   libredirect
    #   multi-account-containers
    # ];

#+end_src
******* Setting/Config
#+begin_src nix
  settings = {
    "app.update.auto" = false;
    "browser.startup.homepage" = "about:blank";
    "browser.urlbar.placeholderName" = "Brain";
    "privacy.webrtc.legacyGlobalIndicator" = true;
    "gfx.webrender.all" = true;
    "gfx.webrender.enabled" = true;
    "media.av1.enabled" = false;
    "media.ffmpeg.vaapi.enabled" = true;
    "media.hardware-video-decoding.force-enabled" = true;
    "media.navigator.mediadatadecoder_vpx_enabled" = true;
    "signon.rememberSignons" = false;
    "app.normandy.api_url" = "";
    "app.normandy.enabled" = false;
    "app.shield.optoutstudies.enabled" = false;
    "beacon.enabled" = false;
    "breakpad.reportURL" = "";
    "browser.aboutConfig.showWarning" = false;
    "browser.cache.offline.enable" = false;
    "browser.crashReports.unsubmittedCheck.autoSubmit" = false;
    "browser.crashReports.unsubmittedCheck.autoSubmit2" = false;
    "browser.crashReports.unsubmittedCheck.enabled" = false;
    "browser.disableResetPrompt" = true;
    "browser.newtab.preload" = false;
    "browser.newtabpage.activity-stream.section.highlights.includePocket" = false;
    "extensions.pocket.enabled" = false;
    "browser.newtabpage.enhanced" = false;
    "browser.newtabpage.introShown" = true;
    "browser.safebrowsing.appRepURL" = "";
    "browser.safebrowsing.blockedURIs.enabled" = false;
    "browser.safebrowsing.downloads.enabled" = false;
    "browser.safebrowsing.downloads.remote.enabled" = false;
    "browser.safebrowsing.downloads.remote.url" = "";
    "browser.safebrowsing.enabled" = false;
    "browser.safebrowsing.malware.enabled" = false;
    "browser.safebrowsing.phishing.enabled" = false;
    "browser.selfsupport.url" = "";
    "browser.send_pings" = false;
    "browser.sessionstore.privacy_level" = 2;
    "browser.startup.homepage_override.mstone" = "ignore";
    "browser.tabs.crashReporting.sendReport" = false;
    "browser.urlbar.groupLabels.enabled" = false;
    "browser.urlbar.quicksuggest.enabled" = false;
    "browser.urlbar.speculativeConnect.enabled" = false;
    "datareporting.healthreport.service.enabled" = false;
    "datareporting.healthreport.uploadEnabled" = false;
    "datareporting.policy.dataSubmissionEnabled" = false;
    "device.sensors.ambientLight.enabled" = false;
    "device.sensors.enabled" = false;
    "device.sensors.motion.enabled" = false;
    "device.sensors.orientation.enabled" = false;
    "device.sensors.proximity.enabled" = false;
    "dom.battery.enabled" = false;
    "dom.event.clipboardevents.enabled" = true;
    "dom.webaudio.enabled" = false;
    "experiments.activeExperiment" = false;
    "experiments.enabled" = false;
    "experiments.manifest.uri" = "";
    "experiments.supported" = false;
    "extensions.getAddons.cache.enabled" = false;
    "extensions.getAddons.showPane" = false;
    "extensions.greasemonkey.stats.optedin" = false;
    "extensions.greasemonkey.stats.url" = "";
    "extensions.shield-recipe-client.api_url" = "";
    "extensions.shield-recipe-client.enabled" = false;
    "extensions.webservice.discoverURL" = "";
    "fission.autostart" = true;
    "media.autoplay.default" = 1;
    "media.autoplay.enabled" = false;
    "media.eme.enabled" = false;
    "media.gmp-widevinecdm.enabled" = false;
    "media.navigator.enabled" = false;
    "media.video_stats.enabled" = false;
    "network.IDN_show_punycode" = true;
    "network.allow-experiments" = false;
    "network.captive-portal-service.enabled" = false;
    "network.cookie.cookieBehavior" = 1;
    "network.dns.disablePrefetch" = true;
    "network.dns.disablePrefetchFromHTTPS" = true;
    "network.http.referer.spoofSource" = true;
    "network.http.speculative-parallel-limit" = 0;
    "network.predictor.enable-prefetch" = false;
    "network.predictor.enabled" = false;
    "network.prefetch-next" = false;
    "network.trr.mode" = 5;
    "privacy.donottrackheader.enabled" = true;
    "privacy.donottrackheader.value" = 1;
    "privacy.firstparty.isolate" = true;
    "privacy.trackingprotection.cryptomining.enabled" = true;
    "privacy.trackingprotection.enabled" = true;
    "privacy.trackingprotection.fingerprinting.enabled" = true;
    "privacy.trackingprotection.pbmode.enabled" = true;
    "privacy.usercontext.about_newtab_segregation.enabled" = true;
    "security.ssl.disable_session_identifiers" = true;
    "services.sync.prefs.sync.browser.newtabpage.activity-stream.showSponsoredTopSite" = false;
    "browser.newtabpage.activity-stream.showSponsored" = false;
    "signon.autofillForms" = false;
    "toolkit.telemetry.archive.enabled" = false;
    "toolkit.telemetry.bhrPing.enabled" = false;
    "toolkit.telemetry.cachedClientID" = "";
    "toolkit.telemetry.enabled" = false;
    "toolkit.telemetry.firstShutdownPing.enabled" = false;
    "toolkit.telemetry.hybridContent.enabled" = false;
    "toolkit.telemetry.newProfilePing.enabled" = false;
    "toolkit.telemetry.prompted" = 2;
    "toolkit.telemetry.rejected" = true;
    "toolkit.telemetry.reportingpolicy.firstRun" = false;
    "toolkit.telemetry.server" = "";
    "toolkit.telemetry.shutdownPingSender.enabled" = false;
    "toolkit.telemetry.unified" = false;
    "toolkit.telemetry.unifiedIsOptIn" = false;
    "toolkit.telemetry.updatePing.enabled" = false;
    "webgl.disabled" = true;
    "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
    "webgl.renderer-string-override" = " ";
    "webgl.vendor-string-override" = " ";
  };

#+end_src

******* userCSS
 User css to make firefox elegant & minimal!
#+begin_src nix
  userChrome = ''

  /* Check this for updated! https://github.com/rockofox/firefox-minima/blob/main/userChrome.css  */

  /* User changable variables */

  :root {
          --tab-font-size: 0.8em; /* Font size of the tab labels */
          --tab-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; /* The font used for the tab labels */
          --max-tab-width: none; /* The maximum width a tab in the tab bar can use. Set this to none for no limit */
          --show-titlebar-buttons: none; /* Hide the buttons (close/minimize/maximize) in the title bar. Required on some platforms (e.g macOS) to fully hide the title bar. `none` hides them, `block` shows them */
          --tab-height: 20px;
  }

  /* Minima Source Code. Here be dragons. */
  /* Only change this if you know what you're doing */

  .titlebar-buttonbox-container {
          display: var(--show-titlebar-buttons);
  }

  :root:not([customizing]) #TabsToolbar {
          margin-left: 1px !important;
          margin-right: 1px !important;
          border-radius: 0 !important;
          padding: 0 !important;
  }
  .tabbrowser-tab * {
          margin:0 !important;
          border-radius: 0 !important;
          font-family: var(--tab-font-family) !important;
  }
  .tabbrowser-tab {
          height: var(--tab-height);
          font-size: var(--tab-font-size) !important;
          min-height: 0 !important;
  }
  .tabbrowser-tab[fadein]:not([pinned]) {
          max-width: var(--max-tab-width) !important;
  }
  .tab-close-button, #firefox-view-button, #scrollbutton-up, .tab-secondary-label {
          display: none !important;
  }
  .new-tab-button {
          display: right !important;
  }
  .tab-icon-image {
          height: auto !important;
          width: calc(var(--tab-height) / 1.5) !important;
          margin-right: 4px !important;
  }

  #tabs-newtab-button, #titlebar spacer {
          display: none !important;
  }

  :root:not([customizing]) #nav-bar
  {
          min-height : 2.5em       !important;
          height     : 2.5em       !important;
          margin     : 0 0 -2.5em  !important;
          z-index    : -1000       !important;
          opacity    : 0           !important;
  }

  :root:not([customizing]) #nav-bar:focus-within
  {
          z-index    : 1000        !important;
          opacity    : 1           !important;
  }

  #nav-bar{
          border-inline: var(--uc-window-drag-space-width) solid var(--toolbar-bgcolor);
  }
  #new-tab-button, #alltabs-button, #scrollbutton-down, .tab-loading-burst{
          display: none;
  }
  #titlebar {
          overflow: none !important;
  }

  /* Source file https://github.com/MrOtherGuy/firefox-csshacks/tree/master/chrome/hide_tabs_with_one_tab.css made available under Mozilla Public License v. 2.0
  See the above repository for updates as well as full license text. */

  /* Makes tabs toolbar items zero-height initially and sets enlarge them to fill up space equal to tab-min-height set on tabs. Optionally use privatemode_indicator_as_menu_button.css to replace main menu icon with private browsing indicator while tabs are hidden. */
  /* Firefox 65+ only */

  :root[sizemode="normal"] #nav-bar{ --uc-window-drag-space-width: 20px }

  #titlebar{ -moz-appearance: none !important; }
  #TabsToolbar{ min-height: 0px !important }

  #tabbrowser-tabs, #tabbrowser-tabs > .tabbrowser-arrowscrollbox, #tabbrowser-arrowscrollbox{ min-height: 0 !important; }

  :root:not([customizing]) #tabbrowser-tabs .tabs-newtab-button,
  :root:not([customizing]) #tabs-newtab-button,
  :root:not([customizing]) #TabsToolbar-customization-target > .toolbarbutton-1,
  :root:not([customizing]) #TabsToolbar .titlebar-button{
          -moz-appearance: none !important;
          height: 0px;
          padding-top: 0px !important;
          padding-bottom: 0px !important;
          -moz-box-align: stretch;
          margin: 0 !important;
  }

  .accessibility-indicator,
  .private-browsing-indicator{ 
          height: unset !important;
  }
  .accessibility-indicator > hbox{ padding-block: 0 !important }

  #tabbrowser-tabs tab:only-of-type {
          visibility: collapse !important;
  }

  /* Button re-styling */
  #tabs-newtab-button:hover,
  #tabbrowser-tabs .tabs-newtab-button:hover{ background-color: var(--toolbarbutton-hover-background) }

  #tabs-newtab-button > .toolbarbutton-icon,
  #tabbrowser-tabs .tabs-newtab-button > .toolbarbutton-icon{
          padding: 0 !important;
          transform: scale(0.6);
          background-color: transparent !important;
  }
  /* Extra top padding  in maximized window */
  @media (-moz-os-version: windows-win10){
          :root[sizemode="maximized"] #navigator-toolbox{ padding-top:7px !important; }
  }
  /* Fix window controls not being clickable */
  :root[tabsintitlebar] #toolbar-menubar[autohide="true"][inactive]{
          transition: height 0ms steps(1) 80ms;
  }
  #nav-bar{
          border-inline: var(--uc-window-drag-space-width) solid var(--toolbar-bgcolor);
  }
  #navigator-toolbox {
          appearance: toolbar !important; /* Pretty much anything except none */
  }

               '';
#+end_src

******* Closing Statement
Closes the User Profiles Code block
#+begin_src nix
  };
#+end_src
****** Closing Statement
Closes FireFox Block
#+begin_src nix
  };
#+end_src
***** Media
#+begin_src nix
  services.mpd = {
    enable = true;
    network = {
      listenAddress = "any";
      port = 6600;
    };
    musicDirectory = "~/d-sync/music";
    extraConfig = ''
	audio_output {
	  type    "pipewire"
	  name    "pipewire"
	}
	auto_update "yes"
      '';
  };

  programs= {
    ncmpcpp = {
      enable = true;
      settings = {
	ncmpcpp_directory = "~/.config/ncmpcpp";
	lyrics_directory = "~/.local/share/lyrics";
	message_delay_time = "1";
	song_list_format = "{$4%a - }{%t}|{$8%f$9}$R{$3(%l)$9}";
	song_status_format = "$b{{$8'%t'}} $3by {$4%a{ $3in $7%b{ (%y)}} $3}|{$8%f}";
	song_library_format = "{%n - }{%t}|{%f}";
	alternative_header_first_line_format = "$b$1$aqqu$/a$9 {%t}|{%f} $1$atqq$/a$9$/b";
	alternative_header_second_line_format = "{{$4$b%a$/b$9}{ - $7%b$9}{ ($4%y$9)}}|{%D}";
	current_item_prefix = "$(cyan)$r$b";
	current_item_suffix = "$/r$(end)$/b";
	current_item_inactive_column_prefix = "$(magenta)$r";
	current_item_inactive_column_suffix = "$/r$(end)";
	playlist_display_mode = "columns";
	browser_display_mode = "columns";
	progressbar_look = "->";
	media_library_primary_tag = "album_artist";
	media_library_albums_split_by_date = "no";
	startup_screen = "media_library";
	display_volume_level = "no";
	ignore_leading_the = "yes";
	external_editor = "nvim";
	use_console_editor = "yes";
	empty_tag_color = "magenta";
	main_window_color = "white";
	progressbar_color = "black:b";
	progressbar_elapsed_color = "blue:b";
	statusbar_color = "red";
	statusbar_time_color = "cyan:b";
      };
    };
    mpv = {
      enable = true;
      # scripts = with pkgs.mpvScripts; [ thumbnail sponsorblock];
    };
    yt-dlp = {
      enable = true;
      settings = {
	embed-thumbnail = true;
	embed-metadata = true;
	embed-subs = true;
	sub-langs = "all";
      };
    };
  };

#+end_src
***** Mpv 
mpv config which is tangled directly
****** mpv config
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/mpv/mpv.conf".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/mpv/mpv.conf";
#+end_src

#+begin_src conf :noweb yes :tangle (format "%s/mpv/mpv.conf" (get-named-src-block-contents "my-configs" t))
  # hwdec=vaapi
  # gpu-hwdec-interop=vaapi
  # vo=gpu
  # profile=gpu-hq
  # gpu-context=wayland
  force-window=yes
  osc=no
  sub-border-size=4.0
  sub-shadow-color=0.0/0.0/0.0
  sub-shadow-offset=1
  sub-auto=fuzzy
  msg-level=all=warn
  ytdl-format=[height<1080]
  save-position-on-quit=yes
  slang=eng,en,Eng,English
  alang=jp,jpn,en,eng
  sub-font=Impress BT
  autofit=50%
  sub-font-size=48
  speed=1.5

#+end_src
****** mpv input
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/mpv/input.conf".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/mpv/input.conf";
#+end_src

#+begin_src conf :noweb yes :tangle (format "%s/mpv/input.conf" (get-named-src-block-contents "my-configs" t))
l seek  5
h seek -5
k seek  30
j seek -30

# subtitles
J cycle sub 
K cycle sub down
#+end_src
***** Imv
Image viewer config
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/imv/config".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/imv/config";
#+end_src

#+begin_src conf :tangle (format "%s/imv/config" (get-named-src-block-contents "my-configs" t))
  [binds]

  # Delete and then close an open image by pressing 'X'
  <Shift+X> = exec rm "$imv_current_file"; close

  # Rotate the currently open image by 90 degrees by pressing 'R'
  <Shift+R> = exec mogrify -rotate 90 "$imv_current_file"

  p = prev
  n = next
#+end_src
***** Rofi
The best menu, I tried wofi, bemenu, fuzzel and others.. but they were not extensive, so since rofi has rofi-wayland, so I will stick to it.
****** Theme
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/rofi/theme.rasi".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/rofi/theme.rasi";
#+end_src

#+begin_src css :tangle (format "%s/rofi/theme.rasi" (get-named-src-block-contents "my-configs" t))
  // Modus theme
   ,* {
     background:     #050505AA;
     background-alt: #050505EE;
     foreground:     #FFFFFF;
     selected:       #9aff9a;
     active:         #79a8ff;
     urgent:         #E06B74FF;
   }

#+end_src
****** Config
Sane defaults go here
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/rofi/config.rasi".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/rofi/config.rasi";
#+end_src

#+begin_src conf :tangle (format "%s/rofi/config.rasi" (get-named-src-block-contents "my-configs" t))
  @import                          "theme.rasi"

  configuration {
  modi: "drun,run";

  font: "ComicCodeLigatures Nerd Font 20";

  case-insensitive: true;
  cycle: true;
  filter: "";
  scroll-method: 0;
  normalize-match: true;
  show-icons: true;
  icon-theme: "Papirus";
  steal-focus: true;
  matching: "normal";
  tokenize: true;

  drun-categories: "";
  drun-match-fields: "name,generic,exec,categories,keywords";
  drun-display-format: "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
  drun-show-actions: true;
  drun-use-desktop-cache: false;
  drun-reload-desktop-cache: false;
  drun {
  /** Parse user desktop files. */
  parse-user:   true;
  /** Parse system desktop files. */
  parse-system: true;
  }

  dmenu {
  case-insensitive: true;
  }

  run-command: "{cmd}";
  run-list-command: "";
  run-shell-command: "{terminal} -e {cmd}";


  disable-history: false;
  sorting-method: "normal";
  max-history-size: 25;


  display-drun:               "ÔÖπ Apps";
  display-run:                "ÔÑ† Run";
  display-filebrowser:        "ÔÅª Files";
  drun-display-format:        "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
  window-format:              "{w} ¬∑ {c} ¬∑ {t}";

  terminal: "rofi-sensible-terminal";

  sort: false;
  threads: 0;
  click-to-exit: true;


  kb-primary-paste: "Control+V,Shift+Insert";
  kb-secondary-paste: "Control+v,Insert";
  kb-clear-line: "Control+w";
  kb-move-front: "Control+a";
  kb-move-end: "Control+e";
  kb-move-word-back: "Alt+b,Control+Left";
  kb-move-word-forward: "Alt+f,Control+Right";
  kb-move-char-back: "Left,Control+b";
  kb-move-char-forward: "Right,Control+f";
  kb-remove-word-back: "Control+Alt+h,Control+BackSpace";
  kb-remove-word-forward: "Control+Alt+d";
  kb-remove-char-forward: "Delete,Control+d";
  kb-remove-char-back: "BackSpace,Shift+BackSpace,Control+h";
  kb-remove-to-eol: "Control+k";
  kb-remove-to-sol: "Control+u";
  kb-accept-entry: "Control+j,Control+m,Return,KP_Enter";
  kb-accept-custom: "Control+Return";
  kb-accept-custom-alt: "Control+Shift+Return";
  kb-accept-alt: "Shift+Return";
  kb-delete-entry: "Shift+Delete";
  kb-mode-next: "Shift+Right,Control+Tab";
  kb-mode-previous: "Shift+Left,Control+ISO_Left_Tab";
  kb-mode-complete: "Control+l";
  kb-row-left: "Control+Page_Up";
  kb-row-right: "Control+Page_Down";
  kb-row-down: "Down,Control+n";
  kb-page-prev: "Page_Up";
  kb-page-next: "Page_Down";
  kb-row-first: "Home,KP_Home";
  kb-row-last: "End,KP_End";
  kb-row-select: "Control+space";
  kb-screenshot: "Alt+S";
  kb-ellipsize: "Alt+period";
  kb-toggle-case-sensitivity: "grave,dead_grave";
  kb-toggle-sort: "Alt+grave";
  kb-cancel: "Escape,Control+g,Control+bracketleft";
  kb-custom-1: "Alt+1";
  kb-custom-2: "Alt+2";
  kb-custom-3: "Alt+3";
  kb-custom-4: "Alt+4";
  kb-custom-5: "Alt+5";
  kb-custom-6: "Alt+6";
  kb-custom-7: "Alt+7";
  kb-custom-8: "Alt+8";
  kb-custom-9: "Alt+9";
  kb-custom-10: "Alt+0";
  kb-custom-11: "Alt+exclam";
  kb-custom-12: "Alt+at";
  kb-custom-13: "Alt+numbersign";
  kb-custom-14: "Alt+dollar";
  kb-custom-15: "Alt+percent";
  kb-custom-16: "Alt+dead_circumflex";
  kb-custom-17: "Alt+ampersand";
  kb-custom-18: "Alt+asterisk";
  kb-custom-19: "Alt+parenleft";
  kb-select-1: "Super+1";
  kb-select-2: "Super+2";
  kb-select-3: "Super+3";
  kb-select-4: "Super+4";
  kb-select-5: "Super+5";
  kb-select-6: "Super+6";
  kb-select-7: "Super+7";
  kb-select-8: "Super+8";
  kb-select-9: "Super+9";
  kb-select-10: "Super+0";
  ml-row-left: "ScrollLeft";
  ml-row-right: "ScrollRight";
  ml-row-up: "ScrollUp";
  ml-row-down: "ScrollDown";
  me-select-entry: "MousePrimary";
  me-accept-entry: "MouseDPrimary";
  me-accept-custom: "Control+MouseDPrimary";

  }


   ,* {
  border-colour:               var(selected);
  handle-colour:               var(selected);
  background-colour:           var(background);
  foreground-colour:           var(foreground);
  alternate-background:        var(background-alt);
  normal-background:           var(background);
  normal-foreground:           var(foreground);
  urgent-background:           var(urgent);
  urgent-foreground:           var(background);
  active-background:           var(active);
  active-foreground:           var(background);
  selected-normal-background:  var(selected);
  selected-normal-foreground:  var(background);
  selected-urgent-background:  var(active);
  selected-urgent-foreground:  var(background);
  selected-active-background:  var(urgent);
  selected-active-foreground:  var(background);
  alternate-normal-background: var(background);
  alternate-normal-foreground: var(foreground);
  alternate-urgent-background: var(urgent);
  alternate-urgent-foreground: var(background);
  alternate-active-background: var(active);
  alternate-active-foreground: var(background);
  }

  window {
  transparency:                "real";
  location:                    center;
  anchor:                      center;
  fullscreen:                  false;
  width:                       50%;
  height:			     60%;
  x-offset:                    0px;
  y-offset:                    0px;

  enabled:                     true;
  margin:                      0px;
  padding:                     0px;
  border:                      0px solid;
  border-radius:               20px;
  border-color:                @border-colour;
  cursor:                      "default";
  background-color:            @background-colour;

  /* Angle Linear Gradient */
  // background-image:          linear-gradient(45, #eb0, #ebe, indigo);
  }

  mainbox {
  enabled:                     true;
  spacing:                     10px;
  margin:                      0px;
  padding:                     40px;
  border:                      0px solid;
  border-radius:               0px 0px 0px 0px;
  border-color:                @border-colour;
  background-color:            transparent;
  children:                    [ "inputbar", "message", "listview", "mode-switcher" ];
  }

  inputbar {
  enabled:                     true;
  spacing:                     10px;
  margin:                      0px;
  padding:                     0px;
  border:                      0px solid;
  border-radius:               0px;
  border-color:                @border-colour;
  background-color:            transparent;
  text-color:                  @foreground-colour;
  children:                    [ "prompt", "textbox-prompt-colon", "entry" ];
  }

  prompt {
  enabled:                     true;
  background-color:            inherit;
  text-color:                  inherit;
  }
  textbox-prompt-colon {
  enabled:                     true;
  expand:                      false;
  str:                         "::";
  background-color:            inherit;
  text-color:                  inherit;
  }
  entry {
  enabled:                     true;
  background-color:            inherit;
  text-color:                  inherit;
  cursor:                      text;
  placeholder:                 "Search...";
  placeholder-color:           inherit;
  }
  num-filtered-rows {
  enabled:                     true;
  expand:                      false;
  background-color:            inherit;
  text-color:                  inherit;
  }
  textbox-num-sep {
  enabled:                     true;
  expand:                      false;
  str:                         "/";
  background-color:            inherit;
  text-color:                  inherit;
  }
  num-rows {
  enabled:                     true;
  expand:                      false;
  background-color:            inherit;
  text-color:                  inherit;
  }
  case-indicator {
  enabled:                     true;
  background-color:            inherit;
  text-color:                  inherit;
  }

  listview {
  enabled:                     true;
  columns:                     2;
  lines:                       10;
  cycle:                       true;
  dynamic:                     true;
  scrollbar:                   false;
  layout:                      vertical;
  reverse:                     false;
  fixed-height:                false;
  fixed-columns:               false;

  spacing:                     5px;
  margin:                      0px;
  padding:                     0px;
  border:                      0px solid;
  border-radius:               0px;
  border-color:                @border-colour;
  background-color:            transparent;
  text-color:                  @foreground-colour;
  cursor:                      "default";
  }
  scrollbar {
  handle-width:                10px ;
  handle-color:                @handle-colour;
  border-radius:               10px;
  background-color:            @alternate-background;
  }

  element {
  enabled:                     true;
  spacing:                     10px;
  margin:                      0px;
  padding:                     5px 10px;
  border:                      0px solid;
  border-radius:               20px;
  border-color:                @border-colour;
  background-color:            transparent;
  text-color:                  @foreground-colour;
  cursor:                      pointer;
  }
  element normal.normal {
  background-color:            var(normal-background);
  text-color:                  var(normal-foreground);
  }
  element normal.urgent {
  background-color:            var(urgent-background);
  text-color:                  var(urgent-foreground);
  }
  element normal.active {
  background-color:            var(active-background);
  text-color:                  var(active-foreground);
  }
  element selected.normal {
  background-color:            var(selected-normal-background);
  text-color:                  var(selected-normal-foreground);
  }
  element selected.urgent {
  background-color:            var(selected-urgent-background);
  text-color:                  var(selected-urgent-foreground);
  }
  element selected.active {
  background-color:            var(selected-active-background);
  text-color:                  var(selected-active-foreground);
  }
  element alternate.normal {
  background-color:            var(alternate-normal-background);
  text-color:                  var(alternate-normal-foreground);
  }
  element alternate.urgent {
  background-color:            var(alternate-urgent-background);
  text-color:                  var(alternate-urgent-foreground);
  }
  element alternate.active {
  background-color:            var(alternate-active-background);
  text-color:                  var(alternate-active-foreground);
  }
  element-icon {
  background-color:            transparent;
  text-color:                  inherit;
  size:                        24px;
  cursor:                      inherit;
  }
  element-text {
  background-color:            transparent;
  text-color:                  inherit;
  highlight:                   inherit;
  cursor:                      inherit;
  vertical-align:              0.5;
  horizontal-align:            0.0;
  }

  mode-switcher{
  enabled:                     true;
  spacing:                     10px;
  margin:                      0px;
  padding:                     0px;
  border:                      0px solid;
  border-radius:               0px;
  border-color:                @border-colour;
  background-color:            transparent;
  text-color:                  @foreground-colour;
  }
  button {
  padding:                     5px 10px;
  border:                      0px solid;
  border-radius:               20px;
  border-color:                @border-colour;
  background-color:            @alternate-background;
  text-color:                  inherit;
  cursor:                      pointer;
  }
  button selected {
  background-color:            var(selected-normal-background);
  text-color:                  var(selected-normal-foreground);
  }

  message {
  enabled:                     true;
  margin:                      0px;
  padding:                     0px;
  border:                      0px solid;
  border-radius:               0px 0px 0px 0px;
  border-color:                @border-colour;
  background-color:            transparent;
  text-color:                  @foreground-colour;
  }
  textbox {
  padding:                     5px 10px;
  border:                      0px solid;
  border-radius:               20px;
  border-color:                @border-colour;
  background-color:            @alternate-background;
  text-color:                  @foreground-colour;
  vertical-align:              0.5;
  horizontal-align:            0.0;
  highlight:                   none;
  placeholder-color:           @foreground-colour;
  blink:                       true;
  markup:                      true;
  }
  error-message {
  padding:                     10px;
  border:                      2px solid;
  border-radius:               20px;
  border-color:                @border-colour;
  background-color:            @background-colour;
  text-color:                  @foreground-colour;
  }

#+end_src
******* For Emoji
Config for calling emoji menu
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/rofi/dmoji.rasi".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/rofi/dmoji.rasi";
#+end_src

#+begin_src conf :tangle (format "%s/rofi/dmoji.rasi" (get-named-src-block-contents "my-configs" t))

  @import				 "config.rasi"


  window {
  location:                    center;
  anchor:                      center;
  fullscreen:                  true;
  width:                       80%;
  height:			     80%;
  }

  listview {
  enabled:                     true;
  columns:                     14;
  lines:                       20;
  }
#+end_src
******* For smenu
Config for calling small menus
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/rofi/smenu.rasi".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/rofi/smenu.rasi";
#+end_src

#+begin_src conf :tangle (format "%s/rofi/smenu.rasi" (get-named-src-block-contents "my-configs" t))

  @import				 "config.rasi"


  window {
  location:                    center;
  anchor:                      center;
  fullscreen:                  false;
  width:                       50%;
  height:			     60%;
  }

  listview {
  enabled:                     true;
  columns:                     2;
  lines:                       20;
  }
#+end_src
******* For list
listing menus
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/rofi/list.rasi".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/rofi/list.rasi";
#+end_src

#+begin_src conf :tangle (format "%s/rofi/list.rasi" (get-named-src-block-contents "my-configs" t))

  @import				 "config.rasi"


  window {
  location:                    center;
  anchor:                      center;
  fullscreen:                  false;
  width:                       85%;
  height:			     80%;
  }

  listview {
  enabled:                     true;
  columns:                     1;
  lines:                       22;
  }
#+end_src
***** Sioyek
#+begin_src nix
  programs.sioyek = {
    enable = true;
  };
#+end_src
****** Sioyek config
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/sioyek/prefs_user.config".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/sioyek/prefs_user.config";
#+end_src

#+begin_src conf :tangle (format "%s/sioyek/prefs_user.config" (get-named-src-block-contents "my-configs" t)) :noweb yes

  background_color   0.0 0.0 0.0
  dark_mode_background_color    0.0 0.0 0.0
  custom_background_color   0.180 0.204 0.251
  custom_text_color   0.847 0.871 0.914

  dark_mode_contrast 			0.8
  text_highlight_color      1.0 1.0 0.0
  search_url_s  	https://scholar.google.com/scholar?q
  search_url_l  	http://gen.lib.rus.ec/scimag/?q
  search_url_g 	https://www.google.com/search?q
  middle_click_search_engine  s
  shift_middle_click_search_engine  	l
  zoom_inc_factor          1.2
  flat_toc                             0
  should_launch_new_instance				1

  should_launch_new_window				1

  default_dark_mode 	1
  sort_bookmarks_by_location  	1
  ui_font  'Code D Haki'
  font_size   24
  wheel_zoom_on_cursor   1
  status_bar_font_size  22
  collapsed_toc  1
  ruler_mode  1

  single_click_selects_words   1


  item_list_prefix   >

  #ignore_whitespace_in_presentation_mode  0

  prerender_next_page_presentation  1


#+end_src

****** Sioyek Keys
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/sioyek/keys_user.config".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/sioyek/keys_user.config";
#+end_src

#+begin_src conf :tangle (format "%s/sioyek/keys_user.config" (get-named-src-block-contents "my-configs" t))

  fit_to_page_width   <f9>
  fit_to_page_width_smart   <f10>
  toggle_fullscreen  f
  quit	 q
  toggle_custom_color     <f8>
  toggle_fullscreen    <f11>
  toggle_highlight    <f1>
  command              <A-x>
  toggle_dark_mode 	i
  toggle_presentation_mode 	<f5>
  toggle_statusbar  <S-b>

#+end_src
***** Mime Tools
#+begin_src nix
  services = {
    # udiskie = {
    # enable = true;
    # automount = true;
    # };
    gpg-agent = {
      enable = true;
      pinentryFlavor = "gnome3";
      enableSshSupport = true;
      enableZshIntegration = true;
    };
  };
  programs = {
    gpg.enable = true;
    man.enable = true;
    # direnv = {
    #   enable = true;
    #   nix-direnv.enable = true;
    # };
    tealdeer = {
      enable = true;
      settings = {
	display = {
	  compact = false;
	  use_pager = true;
	};
	updates = {
	  auto_update = true;
	};
      };
    };
  };
  xdg = {
    portal = {
      enable = true;
      extraPortals = [ pkgs.xdg-desktop-portal-gtk pkgs.xdg-desktop-portal-hyprland ];
    };
    userDirs = {
      enable = true;
      documents = "$HOME/docs";
      download = "$HOME/dloads";
      videos = "$HOME/vids";
      music = "$HOME/music";
      pictures = "$HOME/pics";
    };
    mimeApps.enable = true;
    mimeApps.associations.added = {
      "text/html" = ["firefox.desktop"];
      "x-scheme-handler/http" = ["firefox.desktop"];
      "x-scheme-handler/https" = ["firefox.desktop"];
      "x-scheme-handler/ftp" = ["firefox.desktop"];
      "x-scheme-handler/about" = ["firefox.desktop"];
      "x-scheme-handler/unknown" = ["firefox.desktop"];
      "application/x-extension-htm" = ["firefox.desktop"];
      "application/x-extension-html" = ["firefox.desktop"];
      "application/x-extension-shtml" = ["firefox.desktop"];
      "application/xhtml+xml" = ["firefox.desktop"];
      "application/x-extension-xhtml" = ["firefox.desktop"];
      "application/x-extension-xht" = ["firefox.desktop"];

      "audio/*" = ["mpv.desktop"];
      "video/*" = ["mpv.dekstop"];
      "image/*" = ["imv.desktop"];
      "application/json" = ["firefox.desktop"];
      "application/pdf" = ["sioyek.desktop"];
      "x-scheme-handler/magnet" = ["d-stuff.desktop"];
      "application/epub+zip" = ["sioyek.desktop"];
      "application/zip" = ["sioyek.desktop"];
      "application/x.bittorrent" = ["d-stuff.desktop"];
    };
    mimeApps.defaultApplications = {
      "text/html" = ["firefox.desktop"];
      "x-scheme-handler/http" = ["firefox.desktop"];
      "x-scheme-handler/https" = ["firefox.desktop"];
      "x-scheme-handler/ftp" = ["firefox.desktop"];
      "x-scheme-handler/about" = ["firefox.desktop"];
      "x-scheme-handler/unknown" = ["firefox.desktop"];
      "application/x-extension-htm" = ["firefox.desktop"];
      "application/x-extension-html" = ["firefox.desktop"];
      "application/x-extension-shtml" = ["firefox.desktop"];
      "application/xhtml+xml" = ["firefox.desktop"];
      "application/x-extension-xhtml" = ["firefox.desktop"];
      "application/x-extension-xht" = ["firefox.desktop"];

      "audio/*" = ["mpv.desktop"];
      "video/*" = ["mpv.dekstop"];
      "image/*" = ["imv.desktop"];
      "application/json" = ["firefox.desktop"];
      "application/pdf" = ["sioyek.desktop"];
      "x-scheme-handler/magnet" = ["d-stuff.desktop"];
      "application/epub+zip" = ["sioyek.desktop"];
      "application/zip" = ["sioyek.desktop"];
      "application/x.bittorrent" = ["d-stuff.desktop"];
    };
  };
#+end_src
***** Waybar
#+begin_src nix

  programs.waybar = {
    enable = true;
    # package = pkgs.waybar.overrideAttrs (oldAttrs: {
    #   mesonFlags = oldAttrs.mesonFlags ++ ["-Dexperimental=true"];
    # });

    settings = {
      mainBar = {
	layer = "top";
	position = "top";
	# height = 15;
	# spacing = 7;
	fixed-center = true;
	exclusive = true;
	modules-left = [
		"custom/launcher"
		"hyprland/workspaces"
		"hyprland/window"
		"hyprland/submap"
	];
	modules-center = [
		"clock" "mpd"
	];
	modules-right = ["network" "battery" "memory" "pulseaudio" "custom/power"];
	"hyprland/workspaces" = {
		format = "{icon}";
		active-only = false;
		on-click = "activate";
		format-icons = {
			active = "ÔÜí";
			default = "ÔÑë";
			"1" = "1";
			"2" = "2";	
			"3" = "3";
			"4" = "4";
			"5" = "5";
			"6" = "6";
		};
	};

	"hyprland/window" = {
		"format" = "üëÅ{}";
		"separate-outputs" = true;
		"rewrite" = {
		  "(.*) - Mozilla Firefox" = "ü¶ä $1";
		  "(.*) - zsh" = ">_ [$1]";
		};
	};

	"hyprland/submap" = {
		"format" = "ÔÖπ {}";
		"max-length" = 14;
		"tooltip" = false;
	};

	"custom/launcher" = {
		"format" = "Ôåì ";
		"tooltip" = false;
		"on-click" = "bemenu-run";
	};

	"battery" =  {
		"bat" =  "BAT0";
		"interval" =  30;
		"states" =  {
			"warning" =  50;
			"critical" =  30;
		};
		"format" =  "{capacity}% {icon}";
		"format-icons" =  ["ÔâÑ " "üî¥" "ü™´" "ÔâÇ " "ÔâÄ "];
		"max-length" =  25;
	};

	"mpd" = {
		"format" = "{stateIcon} {title} ÔÄÅ ";
		"format-disconnected" = " ÔÄÅ ";
		"format-stopped" = " ÔÄÅ ";
		"title-len" = 20;
		"interval" = 10;
		"on-click" = "mpc toggle";
		"state-icons" = {
			"paused" = "ÔÅå";
			"playing" = "ÔÅã";
		};
		"tooltip-format" = "Playing: {filename}";
		"tooltip-format-disconnected" = "";
	};
	      "custom/power" = {
		"format" = "‚èª";
		"on-click" = "d-power";
		"tooltip" = false;
	};
	"clock" = {
		"tooltip-format" = "{:%A %B %d %Y | %H:%M}";
		"format-alt" = "ÔÑ≥ {:%a %d %b ÔÄó %I:%M %p}";
		"format" = "ÔÑ≥ {:%H:%M} ";
		##"timezones" = [ "Kolkata" ];
		##"max-length" = 200;
		"interval" = 1;
	};
	"cpu" = {
		"format" = "Ô¨ô {usage: >3}%";
		"on-click" = "footclient -e btop";
	};
	"memory" = {
		"format" = "Óå¢ {: >3}%";
		"on-click" = "foot -e btop";
	};
	"network" = {
		"interface" = "wlp2s0";
		"format" = "‚ö† Disabled";
		"format-wifi" = "ÔÄô {bandwidthDownBytes} ÔÇì {bandwidthUpBytes}";
		"format-ethernet" = "ÔÉÅ {ifname}: {ipaddr}/{cidr}";
		"format-disconnected" = "‚ö† Disconnected";
		"on-click" = "foot -e nmtui";
		"interval" = 2;
	};
	"pulseaudio" = {
		"scroll-step" = 2;
		"format" = "{icon} {volume: >3}% ";
		"format-bluetooth" = "{icon} {volume: >3}%";
		"format-muted" ="ÔÄ¶ muted ";
		"on-click" = "pamixer -t";
		"format-icons" = {
			"headphones" = "ÔÄ•";
			"handsfree" = "ÔÄ•";
			"headset" = "ÔÄ•";
			"phone" = "ÔÇï";
			"portable" = "ÔÇï";
			"car" = "ÔÜπ";
			"default" = ["ÔÄß" "ÔÄ®"];
		};
	};
	"custom/wf-recorder" = {
		      "format" = "{}";
		      "interval" = "once";
		      "exec" = "echo 'Ôäç'";
		      "tooltip" = "false";
		      "exec-if" = "pgrep 'wf-recorder'";
		      "on-click" = "exec d-record";
		      "signal" = 8;
	      };
      };
    };
  };

#+end_src
****** Style.css
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/waybar/style.css".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/waybar/style.css";
#+end_src

#+begin_src css :tangle (format "%s/waybar/style.css" (get-named-src-block-contents "my-configs" t))
  @import "haki.css";

  ,* {
      font-family:Code D Ace;
      font-weight: bold;
      font-size: 20px;
  }

  #mode,
  #clock,
  #mpd,
  #cpu,
  #memory,
  #network.disabled,
  #battery,
  #network.disconnected,
  #pulseaudio,
  #pulseaudio.muted,
  #custom-launcher,
  #custom-power,
  #submap,
  #window,
  #workspaces {
      /* padding-bottom:3px; */
      border-style: solid;
      border-radius: 15px 15px 15px 15px;
      opacity: 1.0;
      border-color: @fg-alt;
      margin-top: 0px;
      margin-left: 8px;
      margin-right: 8px;
      margin-bottom: 3px;
      padding-left: 2px;
      padding-right: 2px;
      transition: none;
      /* color: transparent; */
      background: @bg-main;

  }

  window#waybar {
      background: @bg-main;
  }

  window#waybar.hidden {
      opacity: 0.2;
  }


  #mode {
      color: @heading-8;
  }

  #clock {
      color: @clock;
  }

  #mpd {
      color: @heading-3;
      font-family:Maple Mono;
      font-style: italic;
  }


  #cpu {
      color: @heading-4;
  }

  #memory {
      color: @heading-5;
  }

  #network.disabled {
      color: @done;
  }

  #network{
      color: @heading-6;
  }

  #battery {
      color: @heading-7;
  }

  #network.disconnected {
      color: @done;
  }

  #pulseaudio {
      color: @heading-9;
  }

  #pulseaudio.muted {
      color: @done;
  }

  #custom-launcher {
      /* background: linear-gradient(90deg, @title 28%, @heading-5 85%, @title 100%); */
      color: @fg-region;
  }

  #custom-power {
      /* color: linear-gradient(90deg, @error 28%, @error 85%, @error 100%); */
      color: @todo;
  }

  #submap {
      color: @code;
  }

  #window {
      color: @fg-region;
      color: @fg-main;
  }

  #workspaces {
      color: @bg-tag;
  }

  #workspaces button {
      color: @link;
  }
#+end_src
******* Haki theme
My own theme made for emacs. Using it for waybar too.
Theme: https://github.com/idlip/haki
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/waybar/haki.css".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/waybar/haki.css";
#+end_src

#+begin_src css :tangle (format "%s/waybar/haki.css" (get-named-src-block-contents "my-configs" t))
  /* My own theme (Haki) make for emacs */

  @define-color  bg-main	     #050505;
  @define-color  bg-dim	     #121212;
  @define-color  fg-main	     #ffffff;
  @define-color  fg-dim	     #D8DEE9;
  @define-color  fg-region     #2e8b6d;

  @define-color  title        #6ae4b9;
  @define-color  heading-1    #ab82ff;
  @define-color  heading-2    #ffec8b;
  @define-color  heading-3    #3cb6df;
  @define-color  heading-4    #9aff9a;
  @define-color  heading-5    #97ffff;
  @define-color  heading-6    #ffa07a;
  @define-color  heading-7    #eeb4b4;
  @define-color  heading-8    #ee4000;
  @define-color  heading-9    #cd96cd;

  @define-color  error      #ee6363;
  @define-color  link       #fcde69;
  @define-color  todo       #54ff9f;
  @define-color  done       #b4dddd;
  @define-color  code       #77ee77;
  @define-color  verbatim   #ee77ee;
  @define-color  clock      #eedc82;
  @define-color  bg-tag     #ffe1ff;
  @define-color  bracket    #ffeeee;
#+end_src
***** Ytfzf
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  home.file.".config/ytfzf/conf.sh".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/ytfzf/conf.sh";
#+end_src

#+begin_src conf :tangle (format "%s/ytfzf/conf.sh" (get-named-src-block-contents "my-configs" t))
  #video_pref="248+bestaudio/best"
  video_pref="[height<=1080]"
  #scrape 1 video link per channel instead of the default 2
  sub_link_count=1
  show_thumbnails=0
  ##}}}

  external_menu () {
  #    rofi -dmenu -i -theme-str '@import "menu.rasi" window {height:60%;width: 70%;}' -p "$1"
       #  rofi -dmenu -i -config ~/.config/rofi/list.rasi -p "ÔÖ™  Play "  
       # fuzzel -d -p " Ô•á Play " -w 90 -l 22
      # wofi -dib -W 90% -H 80% 
       bemenu -W 0.98 -l 24 -p 'ÔÖ™  Play '
  #    dmenu -i -l 20
  }

  thumbnail_quality=high
  scrape=youtube
  #is_sort=1
  #search_sort_by=upload_date

#+end_src
***** Youtube-tui
:PROPERTIES:
:header-args: :tangle-mode (identity #o777) :noweb yes :mkdirp yes
:END:
****** Main.yml
#+begin_src nix :noweb yes
  # We will tangle config files from git repo to home dir (Let nix manage the magics)

  ## There is an issue where youtube-tui is not working with symlink or read-only config files

  # home.file.".config/youtube-tui/main.yml".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/youtube-tui/main.yml";
  # home.file.".config/youtube-tui/commands.yml".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/youtube-tui/commands.yml";
  # home.file.".config/youtube-tui/keybindings.yml".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/youtube-tui/keybindings.yml";
  # home.file.".config/youtube-tui/pages.yml".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/youtube-tui/pages.yml";
  # home.file.".config/youtube-tui/appearance.yml".source = config.lib.file.mkOutOfStoreSymlink "<<my-config-path>>/youtube-tui/appearance.yml";
#+end_src

#+begin_src yaml :tangle ~/.config/youtube-tui/main.yml
  mouse_support: true
  invidious_instance: https://vid.puffyan.us
  max_watch_history: 50
  allow_unicode: true
  message_bar_default: All good :)
  images: Sixels
  refresh_after_modifying_search_filters: true
  image_index: 1
  provider: YouTube
  env:
    video-player: mpv
    browser: firefox
    download-path: ~/dloads/%(title)s-%(id)s.%(ext)s
    terminal-emulator: footclient -e
    youtube-downloader: yt-dlp
    save-path: ~/.local/share/youtube-tui/saved/
    link-hanlder: d-stuff
#+end_src

****** Commands.yml
#+begin_src yaml :tangle  ~/.config/youtube-tui/commands.yml
  launch_command: loadpage library ;; flush ;; history clear
  video:
  - Reload updated video: run rm '~/.cache/youtube-tui/info/${id}.json' ;; video ${id}
  - Play video: run ${video-player} '${embed-url}'
  - Play audio: run ${terminal-emulator} ${video-player} '${embed-url}' --no-video
  - Play audio (loop): run ${terminal-emulator} ${video-player} '${embed-url}' --no-video --loop-file=inf
  - View channel: channel ${channel-id}
  - Link Handler: run d-stuff '${url}'
  - Open in browser: run ${browser} '${url}'
  - Toggle bookmark: togglemark ${id}
  - Save video to library: bookmark ${id} ;; run rm -rf '${save-path}${id}.*' ;; run ${terminal-emulator} ${youtube-downloader} '${embed-url}' -o '${save-path}%(title)s[%(id)s].%(ext)s'
  - Save audio to library: bookmark ${id} ;; run rm -rf '${save-path}${id}.*' ;; run ${terminal-emulator} ${youtube-downloader} '${embed-url}' -x -o '${save-path}%(title)s[%(id)s].%(ext)s'
  - 'Mode: ${provider}': switchprovider
  saved_video:
  - Reload updated video: run rm '~/.cache/youtube-tui/info/${id}.json' ;; video ${id}
  - '[Offline] Play saved file': run find ${save-path} | grep ${id} | ${video-player} --playlist=- --force-window
  - '[Offline] Play saved file (audio)': run ${terminal-emulator} bash -c 'find ${save-path} | grep ${id} | ${video-player} --playlist=- --no-video'
  - '[Offline] Play saved file (audio loop)': run ${terminal-emulator} bash -c 'find ${save-path} | grep ${id} | ${video-player} --playlist=- --no-video --loop'
  - View channel: channel ${channel-id}
  - Link Handler: run d-stuff '${url}'
  - Open in browser: run ${browser} '${url}'
  - Toggle bookmark: togglemark ${id}
  - Redownload video to library: bookmark ${id} ;; run rm ${save-path}*${id}*.* ;; run ${terminal-emulator} ${youtube-downloader} ${embed-url} -o '${save-path}%(title)s[%(id)s].%(ext)s'
  - Redownload audio to library: bookmark ${id} ;; run rm ${save-path}*${id}*.* ;; run ${terminal-emulator} ${youtube-downloader} ${embed-url} -x -o '${save-path}%(title)s[%(id)s].%(ext)s'
  - Delete saved file: run rm ${save-path}*${id}*.*
  playlist:
  - Switch view: '%switch-view%'
  - Reload updated playlist: run rm ~/.cache/youtube-tui/info/${id}.json ;; reload
  - Play all (videos): run ${video-player} ${all-videos}
  - Play all (audio): run ${terminal-emulator} ${video-player} ${all-videos} --no-video
  - Shuffle play all (audio loop): run ${terminal-emulator} ${video-player} ${all-videos} --no-video --shuffle --loop-playlist=inf
  - View channel: channel ${channel-id}
  - Open in browser: run ${browser} '${url}'
  - Link Handler: run d-stuff '${url}'
  - Toggle bookmark: togglemark ${id}
  - Save playlist videos to library: bookmark ${id} ;; run rm -rf '${save-path}*${id}*' ;; run ${terminal-emulator} bash -c "${youtube-downloader} ${all-videos} -o '"'${save-path}${title}[${id}]/%(title)s[%(id)s].%(ext)s'"'"
  - Save playlist audio to library: bookmark ${id} ;; run rm -rf '${save-path}*${id}*' ;; run ${terminal-emulator} bash -c "${youtube-downloader} ${all-videos} -x -o '"'${save-path}${title}[${id}]/%(title)s[%(id)s].%(ext)s'"'"
  - 'Mode: ${provider}': switchprovider
  saved_playlist:
  - Switch view: '%switch-view%'
  - Reload updated playlist: run rm ~/.cache/youtube-tui/info/${id}.json ;; reload
  - '[Offline] Play all (videos)': run find ${save-path} | grep ${id} | ${video-player} --playlist=- --force-window
  - '[Offline] Play all (audio)': run ${terminal-emulator} bash -c 'find ${save-path} | grep ${id} | ${video-player} --playlist=- --no-video'
  - '[Offline] Shuffle play all (audio loop)': run ${terminal-emulator} bash -c 'find ${save-path} | grep ${id} | ${video-player} --playlist=- --no-video --loop-playlist=inf'
  - View channel: channel ${channel-id}
  - Open in browser: run ${browser} '${url}'
  - Toggle bookmark: togglemark ${id}
  - Redownload playlist videos to library: bookmark ${id} ;; run rm -rf ${save-path}*${id}* ;; run ${terminal-emulator} bash -c "${youtube-downloader} ${all-videos} -o '"'${save-path}${title}[${id}]/%(title)s[%(id)s].%(ext)s'"'"
  - Redownload playlist audio to library: bookmark ${id} ;; run rm -rf ${save-path}*${id}* ;; run ${terminal-emulator} bash -c "${youtube-downloader} ${all-videos} -x -o '"'${save-path}${title}[${id}]/%(title)s[%(id)s].%(ext)s'"'"
  - Delete saved files: run rm -rf ${save-path}*${id}*
#+end_src
****** keybindings.yml
#+begin_src yaml :tangle ~/.config/youtube-tui/keybindings.yml
  End:
    0: ClearHistory
  Down:
    0: MoveDown
  Esc:
    0: Deselect
  'l':
    0: MoveRight
  Home:
    0: FirstHistory
  F5:
    0: Reload
  'q':
    0: Exit
  Left:
    0: MoveLeft
    4: Back
  'r':
    2: Reload
  'h':
    0: MoveLeft
  'v':
    2: Paste
  ':':
    0: StartCommandCapture
  Backspace:
    0: Back
  'k':
    0: MoveUp
  Enter:
    0: Select
  Up:
    0: MoveUp
  'j':
    0: MoveDown
  Right:
    0: MoveRight
#+end_src
****** Commandbindings.yml
#+begin_src yaml :tangle ~/.config/youtube-tui/commandbindings.yml
  global:
    'f':
      2: run ${browser} '${url}'
    'c':
      2: cp ${url}
  search:
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
    'p':
      2: run mpv '${hover-url}'
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle
    'd':
      2: run d-stuff '${hover-url}'
  popular:
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle
    'p':
      2: run mpv '${hover-url}'
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
  trending:
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle
    'p':
      2: run mpv '${hover-url}'
  video: {}
  playlist:
    'p':
      2: run mpv '${hover-url}'
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle
  channel_main: {}
  channel_videos:
    'p':
      2: run mpv '${hover-url}'
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
  channel_playlists:
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle
    'p':
      2: run mpv '${hover-url}'
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
  watchhistory:
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
    'p':
      2: run mpv '${hover-url}'
  subscriptions: {}
  library:
    'p':
      2: run mpv '${hover-url}'
    'a':
      2: run ${terminal-emulator} mpv '${hover-url}' --no-video
    'A':
      1: run ${terminal-emulator} mpv '${hover-url}' --no-video --loop-playlist=inf --shuffle

#+end_src

****** Pages.yml
#+begin_src yaml :tangle ~/.config/youtube-tui/pages.yml
  main_menu:
    layout:
    - type: NonCenteredRow
      items:
      - SearchBar
      - SearchFilters
    - type: CenteredRow
      items:
      - Popular
      - Library
      - History
    - type: NonCenteredRow
      items:
      - ItemList
    - type: NonCenteredRow
      items:
      - MessageBar
    message: Loading main menu...
  search:
    layout:
    - type: NonCenteredRow
      items:
      - SearchBar
      - SearchFilters
    - type: NonCenteredRow
      items:
      - ItemList
    - type: NonCenteredRow
      items:
      - MessageBar
    message: Loading search results...
  singleitem:
    layout:
    - type: NonCenteredRow
      items:
      - SearchBar
      - SearchFilters
    - type: NonCenteredRow
      items:
      - SingleItemInfo
    - type: NonCenteredRow
      items:
      - MessageBar
    message: Loading item details...
  channeldisplay:
    layout:
    - type: NonCenteredRow
      items:
      - SearchBar
      - SearchFilters
    - type: CenteredRow
      items:
      - ChannelMain
      - ChannelVideos
      - ChannelPlaylists
    - type: NonCenteredRow
      items:
      - ChannelDisplay
    - type: NonCenteredRow
      items:
      - MessageBar
    message: Loading channel details...
#+end_src
****** Appearance.yml
#+begin_src yaml :tangle ~/.config/youtube-tui/appearance.yml
  borders: Rounded
  colors:
    text: Reset
    text_special: Reset
    text_secondary: Reset
    text_error: LightRed
    outline: Reset
    outline_selected: LightBlue
    outline_hover: LightRed
    outline_secondary: LightYellow
    message_outline: '#FF7F00'
    message_error_outline: LightRed
    message_success_outline: LightGreen
    command_capture: '#64FF64'
    item_info:
      tag: Gray
      title: LightBlue
      description: Gray
      author: LightGreen
      viewcount: LightYellow
      length: LightCyan
      published: LightMagenta
      video_count: '#838DFF'
      sub_count: '#65FFBA'
      likes: '#C8FF81'
      genre: '#FF75D7'
      page_turner: Gray
#+end_src
**** Closing Statement
Closes the Main Body Block
#+begin_src nix
  }
#+end_src

* üìÇ Additional Files
Don't worry about this, there is nothing from here.

Its just custom instructions
** First Time Set Up Script
:PROPERTIES:
:header-args: :tangle (format "./%s/init-setup.sh" (get-named-src-block-contents "my-hostname" t)) :shebang #!/usr/bin/env bash
:END:
*** Install System Flake

#+begin_src sh :noweb yes

  # Read and edit these once accordingly

  echo "Installing System Flake"
  sudo cp -f /etc/nixos/hardware-configuration.nix <<my-git-path>>/<<my-hostname>>/hardware-configuration.nix

  # Edit it your file path

  #cd <<my-git-path>>
  sudo nixos-rebuild switch --flake .#gdk
#+end_src
*** Copy First Time Installation Checklist
Places a copy of =manual-init-steps.org= in the home directory
#+begin_src sh
  echo "Copying Installation Checklist"
  cp ./gdk/manual-init-steps.org ~/manual-init-steps.org
#+end_src
*** Restart System
#+begin_src sh
  echo "Restarting System"
  reboot
#+end_src
** Manual Set Up Instructions
:PROPERTIES:
:header-args:  :tangle (format "./%s/manual-init-steps.org" (get-named-src-block-contents "my-hostname" t))
:END:
*** File Description
#+begin_src txt
This file describes steps that need to be taken during the first time set up of the computer after a new installation of NixOS
#+end_src

