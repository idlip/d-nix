#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil toc:5
#+PROPERTY: header-args :tangle-mode (identity #o444) :mkdirp yes
#+TITLE: Nix Organized with Emacs! NixOrg!
#+AUTHOR: iDlip

* Flake
+ Nobody can give correct explanation on flakes, in simple way its a nix way of pin the version/revision of channel or VC.
+ Could be future, but things are not sorted out that well.
+ I use four inputs:
  1. Nixpkgs - Ocean of packages and modules.
  2. Hosts - To block various domains.
  3. Nix-index - To extract nixpkgs db, and locate package/path.
  4. Home-Manager - to manager user/home modules.
+ A good resource to refer: https://nixos-and-flakes.thiscute.world/nixos-with-flakes/nixos-with-flakes-enabled
#+begin_src nix :tangle flake.nix
{
  description = "D Nixyfied ❄️ Flaky Station";

  inputs = {

    # Change it to stable, if you want stable channel (23.05)
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

    # For Adblocking and making internet usable
    hosts.url = "github:StevenBlack/hosts";

    # nix index to locate package/path
    nix-index-db = {
      url = "github:nix-community/nix-index-database";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Home to manage all user configs
    # You can you use normal config files,
    # just use an org heading and create block and tangle it directly to ~/.config/tool/file path.
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

  };

  outputs = {self, nixpkgs, ...}@inputs:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.x86_64-linux;

      vars = {
        username = "idlip";
        editor = "emacs";
      };

    in {

      devShells.x86_64-linux.default = pkgs.mkShell {
        packages = with pkgs; [
          alejandra deadnix git
        ];
        name = "dots";
        DIRENV_LOG_FORMAT = "";
      };

      nixosConfigurations = {
        gdk = nixpkgs.lib.nixosSystem {

          modules =
            [
              {networking.hostName = "gdk";}
              ./gdk/configuration.nix
              ./gdk/hardware-configuration.nix
              inputs.hosts.nixosModule
              inputs.home-manager.nixosModules.home-manager {
                home-manager = {
                  useUserPackages = true;
                  useGlobalPkgs = true;
                  extraSpecialArgs = {
                    inherit inputs;
                    inherit self vars;
                  };
                  users.${vars.username} = import ./gdk/home.nix;
                };
              }
            ];

          specialArgs = {
            inherit inputs;
            inherit vars system pkgs;
          };

        };
      };


    };
}

#+end_src
* Harware config
- certain hardware config, mostly autogenerated via ~nixos-generate-config~
#+begin_src nix :tangle ./gdk/hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "vmd" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.kernelParams = [ "i915.force_probe=a7a0"  ];
# "intel_pstate=disable"

  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/af0bbf7a-ca6f-4823-b548-cc25c63c3d5e";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/68E2-CF64";
      fsType = "vfat";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

#+end_src
* System: Nixos
:PROPERTIES:
:header-args: :tangle-mode (identity #o444) :mkdirp yes :tangle ./gdk/configuration.nix
:END:
** init
Places a warning at the top of the target file.
#+begin_src nix
# WARNING : This file was generated by d-setup.org
# DO NOT MODIFY THIS FILE!
# Any changes made here will be overwritten.

{pkgs, lib, vars, inputs, config, ...}:{
#+end_src
** bootloader
#+begin_src nix
boot = {
  # Uses bleeding edge latest kernel.
  kernelPackages = pkgs.linuxPackages_latest;
  # kernelModules = [ "tcp_bbr" "acpi_call" ];

  kernel.sysctl = {
    # The Magic SysRq key is a key combo that allows users connected to the
    # system console of a Linux kernel to perform some low-level commands.
    # Disable it, since we don't need it, and is a potential security concern.
    "kernel.sysrq" = 0;

    ## TCP hardening
    # Prevent bogus ICMP errors from filling up logs.
    "net.ipv4.icmp_ignore_bogus_error_responses" = 1;
    # Reverse path filtering causes the kernel to do source validation of
    # packets received from all interfaces. This can mitigate IP spoofing.
    "net.ipv4.conf.default.rp_filter" = 1;
    "net.ipv4.conf.all.rp_filter" = 1;
    # Do not accept IP source route packets (we're not a router)
    "net.ipv4.conf.all.accept_source_route" = 0;
    "net.ipv6.conf.all.accept_source_route" = 0;
    # Don't send ICMP redirects (again, we're on a router)
    "net.ipv4.conf.all.send_redirects" = 0;
    "net.ipv4.conf.default.send_redirects" = 0;
    # Refuse ICMP redirects (MITM mitigations)
    "net.ipv4.conf.all.accept_redirects" = 0;
    "net.ipv4.conf.default.accept_redirects" = 0;
    "net.ipv4.conf.all.secure_redirects" = 0;
    "net.ipv4.conf.default.secure_redirects" = 0;
    "net.ipv6.conf.all.accept_redirects" = 0;
    "net.ipv6.conf.default.accept_redirects" = 0;
    # Protects against SYN flood attacks
    "net.ipv4.tcp_syncookies" = 1;
    # Incomplete protection again TIME-WAIT assassination
    "net.ipv4.tcp_rfc1337" = 1;

    ## TCP optimization
    # TCP Fast Open is a TCP extension that reduces network latency by packing
    # data in the sender’s initial TCP SYN. Setting 3 = enable TCP Fast Open for
    # both incoming and outgoing connections:
    "net.ipv4.tcp_fastopen" = 3;
    # Bufferbloat mitigations + slight improvement in throughput & latency
    "net.ipv4.tcp_congestion_control" = "bbr";
    "net.core.default_qdisc" = "cake";
  };

  loader = {
    # FIXME change first line if you want to use Grub
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
    timeout = 1;
  };

  supportedFilesystems = [ "ntfs" ];
  tmp.cleanOnBoot = true;
  binfmt.emulatedSystems = ["aarch64-linux"];
};

#+end_src
** core
*** environment
#+begin_src nix
# enable zsh autocompletion for system packages (systemd, etc)
environment = {
  pathsToLink = ["/share/zsh"];
  variables = {
    EDITOR = "emacsclient -nw -a nvim";
    BROWSER = "brave";
    NIXOS_OZONE_WL = "1";
  };
  systemPackages = with pkgs; [
    gitFull
    (writeScriptBin "sudo" ''exec doas "$@"'')
  ];
};
#+end_src
*** console and locale set
#+begin_src nix

i18n = {
  defaultLocale = "en_US.UTF-8";
  # saves space
  supportedLocales = [
    "en_US.UTF-8/UTF-8"
    "ja_JP.UTF-8/UTF-8"
    "ro_RO.UTF-8/UTF-8"
  ];
};

# Sets big font for bootloader, as I have small laptop.
# You can remove font and packages line to have default font kernel chooses.
console = {
  earlySetup = true;
  font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
  packages = with pkgs; [ terminus_font ];
  keyMap = "us";
};
#+end_src
*** time zone
#+begin_src nix
# obviously your timezone here. Have a nice day or good night sleep ;)
# Don't waste more time on nixos lol, be healthy and have some sleep. Stay healthy!
time = {
  timeZone = "Asia/Kolkata";
  hardwareClockInLocalTime = true;
};
#+end_src
*** adduser
#+begin_src nix
users.users.${vars.username} = {
  isNormalUser = true;
  shell = pkgs.zsh;
  extraGroups = ["adbusers" "input" "libvirtd" "networkmanager" "plugdev" "transmission" "video" "wheel"];
};
#+end_src
*** zramswap
#+begin_src nix
# compresses half the ram for use as swap
zramSwap = {
  enable = true;
  memoryPercent = 50;
  algorithm = "zstd";
};
#+end_src
*** sleep
- for laptop hibernation.
- Note: Hibernation wont be enabled with zramSwap.
#+begin_src nix :tangle no
systemd.sleep.extraConfig = ''
   AllowSuspendThenHibernate=yes
   HibernateDelaySec=3600
   '';
#+end_src
*** programs
- some programs to manage in core
  | name    | desc                      | link      | exec |
  |---------+---------------------------+-----------+------|
  | less    | less pager                | [[https://www.greenwoodsoftware.com/less/][greenwood]] | less |
  | thefuck | corrects previous command | [[https://github.com/nvbn/thefuck][git]]       | fuck |
  | abd     | android debugger          | [[https://github.com/nmeum/android-tools][git]]       | adb  |
  | ssh     | secure shell              | [[https://www.openssh.com/][web]]       | ssh  |
  | zsh     | z shell                   | [[https://www.zsh.org/][web]]       | zsh  |

#+begin_src nix
# enable programs
programs = {

  less.enable = true;
  # type "fuck" to fix the last command that made you go "fuck"
  thefuck.enable = true;

  # help manage android devices via command line
  adb.enable = true;

  # ssh.startAgent = true;

  zsh = {
    enable = true;
    autosuggestions.enable = true;
    syntaxHighlighting = {
      enable = true;
      patterns = {"rm -rf *" = "fg=black,bg=red";};
      styles = {"alias" = "fg=magenta";};
      highlighters = ["main" "brackets" "pattern"];
    };
  };
};

#+end_src

** networking
- block hosts from stevenBlackHosts
- setup some dns oriented settings, and enable networkManager.
- firewall with certain rules to let syncthing and kdeconnect operate as expected.
#+begin_src nix
networking = {

  # Killer feature, Its a must these days.
  # Adblocker!! It uses steven black hosts.
  stevenBlackHosts = {
    enable = true;
    blockFakenews = true;
    blockGambling = true;
    blockPorn = true;
    blockSocial = false;
  };

  # dns
  # mullvad dns
  nameservers = [ "194.242.2.5" "194.242.2.9" ];
  dhcpcd = {
    wait = "background";
    extraConfig = "noarp";
  };

  # NetworkManager replaces wpa_supplicant
  wireless.enable = false;

  networkmanager = {
    enable = true;
    unmanaged = ["docker0" "rndis0" "interface-name:ve-*" ];
    wifi.macAddress = "random";
    dns = "systemd-resolved";
    wifi.powersave = true;
  };

  # Firewall uses iptables underthehood
  # Rules are for syncthing
  firewall = rec {
    enable = true;
    # For syncthing & kdeconnect
    allowedTCPPortRanges = [ { from = 1714; to = 1764; } ];
    allowedUDPPortRanges = allowedTCPPortRanges;
    allowedTCPPorts = [8384 22000];
    allowedUDPPorts = [22000 21027];
    allowPing = false;
    logReversePathDrops = true;
  };

  nat = { # for container or vm
    enable = false;
    internalInterfaces = ["ve-+"];
    externalInterface = "wlp0s20f3";
    # Lazy IPv6 connectivity for the container
    enableIPv6 = true;
  };

};
#+end_src
*** services
- networking oriented services.
- enable openssh for ssh access
#+begin_src nix
services = {
  # network discovery, mDNS
  avahi = {
    enable = true;
    nssmdns = true;
    publish = {
      enable = true;
      domain = true;
      userServices = true;
    };
  };

  openssh = {
    enable = true;
    settings.UseDns = true;
  };

  # DNS resolver
  resolved = {
    enable = true;
    dnssec = "false";
    fallbackDns = [ "194.242.2.5" "194.242.2.9" ];
  };

  dnscrypt-proxy2 = {
    enable = true;
    settings = {
      ipv6_servers = true;
      require_dnssec = true;

      sources.public-resolvers = {
        urls = [
          "https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md"
          "https://download.dnscrypt.info/resolvers-list/v3/public-resolvers.md"
        ];
        cache_file = "/var/lib/dnscrypt-proxy2/public-resolvers.md";
        minisign_key = "RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3";
      };
    };
  };

};

#+end_src
*** systemd
- systemd need not wait for network to check online.
#+begin_src nix
# Don't wait for network startup
systemd = {
  services = {
    # speed up boot
    NetworkManager-wait-online.enable = false;
  };
};

#+end_src
** security
#+begin_src nix
# this makes our system more secure
# note that it might break some stuff, eg webcam

security = {
  protectKernelImage = true;
  lockKernelModules = false;
  rtkit.enable = true;
  polkit.enable = true;

  # required for lockscreens
  # also for finger print
  pam = {
    services.gtklock = {
      text = "auth include login";
    };
  };

  doas = {
    enable = true;
    extraRules = [{
      users = [ "${vars.username}" ];
      keepEnv = true;
      persist = true;
    }];
  };

  sudo.enable = false;
};
#+end_src
** nix
*** environment
- to inherit the flake-channels from out built config only.
#+begin_src nix
environment = {
  # set channels (backwards compatibility)
  etc = {
    "nix/flake-channels/nixpkgs".source = inputs.nixpkgs;
    "nix/flake-channels/home-manager".source = inputs.home-manager;
  };
};
#+end_src
*** nixpkgs tweaks
#+begin_src nix
nixpkgs = {
  config = {
    allowUnfree = false;
    allowBroken = false;
  };
};
#+end_src
*** documentation
#+begin_src nix
# TODOTHIS: Got some error on docbook,
# see-> https://github.com/NixOS/nixpkgs/blob/nixos-unstable/nixos/modules/misc/documentation.nix

# faster rebuilding
documentation = {
  enable = true;
  nixos.enable = true;
  doc.enable = true;
  info.enable = true;
  man = {
    enable = true;
    generateCaches = true; # will take little time
  };
  dev.enable = true;
};
#+end_src
*** nix conf
#+begin_src nix
# Collect garbage and delete generation every 6 day. Will help to get some storage space.
# Better to atleast keep it for few days, as you do major update (unstable), if something breaks you can roll back.
nix = {
  optimise.automatic = true;
  gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
  };

  # Make builds run with low priority so my system stays responsive
  daemonCPUSchedPolicy = "idle";
  daemonIOSchedClass = "idle";

  # pin the registry to avoid downloading and evaling a new nixpkgs version every time
  registry = lib.mapAttrs (_: value: { flake = value; }) inputs;

  # This will additionally add your inputs to the system's legacy channels
  # Making legacy nix commands consistent as well, awesome!
  nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;

  settings = {
    flake-registry = "/etc/nix/registry.json";
    auto-optimise-store = true;
    builders-use-substitutes = true;
    # allow sudo users to mark the following values as trusted
    allowed-users = ["@wheel"];
    # only allow sudo users to manage the nix store
    trusted-users = ["@wheel" "root"];
    keep-outputs = true;
    warn-dirty = false;
    keep-derivations = true;
    sandbox = true;
    max-jobs = "auto";
    # continue building derivations if one fails
    keep-going = true;
    log-lines = 20;
    extra-experimental-features = ["flakes" "nix-command" ];

    # use binary cache, its not gentoo
    substituters = [
      "https://nix-community.cachix.org"
    ];

    trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };
};
#+end_src
- system upgrade: to disable autoupgrading system
#+begin_src nix
system.autoUpgrade.enable = false;
#+end_src
** syncthing
#+begin_src nix
services.syncthing = {
  enable = true;
  user = "${vars.username}";
  configDir = "/home/${vars.username}/.config/syncthing";
  dataDir = "/home/${vars.username}/.local/share/syncthing";
  overrideDevices = true;     # overrides any devices added or deleted through the WebUI
  overrideFolders = true;     # overrides any folders added or deleted through the WebUI
  settings = {
    devices = {
      "realme" = { id = "CEV3U3M-EJFLUJ3-UXFBEPG-KHX5EVK-3MSYH2W-BRNZEDH-TVJ4QWZ-X3G2CAW"; };
      #"device2" = { id = "DEVICE-ID-GOES-HERE"; };
    };
    folders = {
      "sync" = {
	      path = "~/d-sync";
	      devices = [ "realme" ];
      };
      "emacs" = {
	      path = "~/d-git/d-nix";
	      devices = [ "realme" ];
      };
      "theme" = {
	      path = "~/d-git/d-theme";
	      devices = [ "realme" ];
      };
      "site" = {
	      path = "~/d-git/d-site";
	      devices = [ "realme" ];
      };
    };
  };
};
#+end_src
** desktop/laptop
*** programs
#+begin_src nix
programs = {
  dconf.enable = true;
  noisetorch.enable = true; # virtual noise suppressor
};
#+end_src
*** power
#+begin_src nix
powerManagement = {
  enable = true;
  powertop.enable = true;
};
#+end_src
*** service
#+begin_src nix
services = {

  dbus = {
    packages = with pkgs; [dconf gcr udisks2];
    enable = true;
  };
  udev.packages = with pkgs; [ android-udev-rules ];

  journald.extraConfig = ''
      SystemMaxUse=50M
      RuntimeMaxUse=10M
    '';

  # To mount drives with udiskctl command
  udisks2.enable = true;
  printing.enable = true;

  fprintd = {
    enable = true;
    package = pkgs.fprintd;
  };

  # for intel 13th gen tlp works better than autocpu-freq
  thermald.enable = true;
  tlp = {
    enable = true;
    settings = {
      CPU_SCALING_GOVERNOR_ON_AC = "balance_performance";
      CPU_SCALING_GOVERNOR_ON_BAT = "powersave";

      CPU_ENERGY_PERF_POLICY_ON_BAT = "balance_power";
      CPU_ENERGY_PERF_POLICY_ON_AC = "balance_performance";

      USB_AUTOSUSPEND = 1;
      DEVICES_TO_DISABLE_ON_STARTUP = "bluetooth";
      DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE = "bluetooth";

      CPU_BOOST_ON_AC = 0;
      CPU_BOOST_ON_BAT = 0;
      CPU_HWP_DYN_BOOST_ON_AC = 1;
      CPU_HWP_DYN_BOOST_ON_BAT = 0;

      CPU_MIN_PERF_ON_AC = 0;
      CPU_MAX_PERF_ON_AC = 70;
      CPU_MIN_PERF_ON_BAT = 0;
      CPU_MAX_PERF_ON_BAT = 30;
    };
  };


  # For Laptop, make lid close and power buttom click to suspend
  logind = {
    lidSwitch = "suspend-then-hibernate";
    lidSwitchExternalPower = "lock";
    extraConfig = ''
        HandlePowerKey=suspend-then-hibernate
        HibernateDelaySec=3600
      '';

  };

  # This makes the user to autologin in all tty
  # Depends on you if you want login manager or prefer entering password manually
  # getty.autologinUser = "${vars.username}";

  atd.enable = true;
  fstrim.enable = true;
  upower.enable = true;

  # For android file transfer via usb, or better check on KDE connect
  gvfs.enable = true;

  # Pipewire setup, just these lines enough to make sane default for it
  pipewire = {
    enable = true;
    alsa = {
      enable = true;
      support32Bit = true;
    };
    wireplumber.enable = true;
    pulse.enable = true;
    jack.enable = true;
  };
};
#+end_src
*** audio/video
#+begin_src nix
sound.enable = true;

hardware = {
  pulseaudio.enable = lib.mkForce false;
  opengl = {
    enable = true;
    extraPackages = with pkgs; [
      libva intel-media-driver
      vaapiVdpau vaapiIntel
      libvdpau-va-gl
    ];
  };
};
#+end_src
*** fonts
#+begin_src nix
fonts = {
  packages = with pkgs; [
    noto-fonts unifont
    # symbola # this font is unfree
    noto-fonts-emoji maple-mono julia-mono
    (callPackage ./pkgs/code-d-font.nix {})

    (nerdfonts.override {fonts = [ "JetBrainsMono"  ];})
  ];

  enableDefaultPackages = true;

  # this fixes emoji stuff
  fontconfig = {
    defaultFonts = {
      monospace = [
	      "Code D OnePiece"
	      "JetBrainsMono Nerd Font"
	      "Noto Color Emoji"
      ];
      sansSerif = [ "Code D Haki" "Noto Sans" "Noto Serif" ];
      serif = [ "Code D Haki" "Noto Sans" "Noto Serif"];
      emoji = [ "Noto Color Emoji" "Code D Lip" "Symbola" "Noto Sans" ];
    };
  };
};

#+end_src
**** code-d-font
#+begin_src nix :tangle gdk/pkgs/code-d-font.nix
{ lib, fetchgit, stdenvNoCC }:

stdenvNoCC.mkDerivation rec {
  pname = "code-d-font";
  version = "1.085";

  src = fetchgit {
    url = "https://github.com/idlip/code-d-font";
    sparseCheckout = [
      "fonts"
    ];
    sha256 = "sha256-+0yK0CEZsXJGoOxJY12ARrHvmWhaQGER+BXi0xzR7uk=";
  };

  installPhase = ''
    install -D -t $out/share/fonts/truetype/ $(find $src -type f -name '*.ttf')
  '';


  meta = with lib; {
    homepage = "https://github.com/arrowtype/recursive-code-config/";
    description = "A variable font family for code & UI";
    license = licenses.ofl;
    maintainers = [ maintainers.idlip ];
    platforms = platforms.all;
  };
}

#+end_src
*** xdg
#+begin_src nix
xdg.portal = {
  enable = true;
  extraPortals = [ pkgs.xdg-desktop-portal-gtk pkgs.xdg-desktop-portal-hyprland ];
  configPackages = [ pkgs.xdg-desktop-portal-hyprland ];
};
#+end_src
*** bluetooth
#+begin_src nix :tangle no
hardware.bluetooth = {
  enable = true;
  package = pkgs.bluez;
  settings = {
    General = {
      FastConnectable = true;
      JustWorksRepairing = "always";
      Privacy = "device";
      Experimental = true;
    };
  };
};

# https://github.com/NixOS/nixpkgs/issues/114222
systemd.user.services.telephony_client.enable = false;
#+end_src
*** seatd
- idk what it does, maybe wayland needs it?
#+begin_src nix :tangle no
systemd.services = {
  seatd = {
    enable = true;
    description = "Seat management daemon";
    script = "${pkgs.seatd}/bin/seatd -g wheel";
    serviceConfig = {
      Type = "simple";
      Restart = "always";
      RestartSec = "1";
    };
    wantedBy = ["multi-user.target"];
  };
};

#+end_src
** EOF
#+begin_src nix
# stateVersion
# NEVER EVER TOUCH THIS ⚠️
system.stateVersion = lib.mkDefault "23.05"; # OR CRY WITH BROKE SYS
}

# configuration.nix ends here
#+end_src
* Home
:PROPERTIES:
:header-args: :tangle-mode (identity #o444) :mkdirp yes :tangle ./gdk/home.nix
:END:
** init
Places a warning at the top of the target file.
#+begin_src nix
# WARNING : This file was generated by d-setup.org
# DO NOT MODIFY THIS FILE!
# Any changes made here will be overwritten.

{pkgs, lib, config, vars, ...}: {
#+end_src
** nix-index
#+begin_src nix :tangle no
imports = [
  inputs.nix-index-db.hmModules.nix-index
];
#+end_src
** home packages
#+begin_src nix :noweb yes
home.packages  = with pkgs; [
  <<way-pkgs>>
  <<cli-pkgs>>
  <<em-pkgs>>
  <<hm-pkgs>>
  <<code-pkgs>>
  <<game-pkgs>>
  <<media-pkgs>>
];
#+end_src
** wayland
*** hyprland
#+begin_src nix
# the thing is you won't get xdg-portal-hyprland
# refer: https://github.com/nix-community/home-manager/issues/1167
# # enable hyprland
wayland.windowManager.hyprland = {
  enable = true;
  systemd.enable = true;

  extraConfig = ''
    source					= ~/.config/hypr/hyprsea.conf
    '';

  settings = {

    decoration = {
      rounding = 10;
      inactive_opacity = 0.8;
      active_opacity = 0.9;
      fullscreen_opacity = 1.0;
      dim_inactive = false;
      shadow_offset = "0 5";
      "col.shadow" = "rgba(00000099)";

      blur = {
        enabled = 1;
        size = 6;
        passes = 3;
        new_optimizations = true;
        ignore_opacity = true;
      };
    };

    "$mod" = "SUPER";

    input = {
      kb_layout = "us";
      kb_options = "ctrl:nocaps";
      follow_mouse = 0;
      sensitivity = 0.1;
      #    repeat_delay = 250

      touchpad = {
        natural_scroll = "no";
        disable_while_typing = 1;
        clickfinger_behavior = 0; # double tap > right click
        middle_button_emulation = 1;
        tap-to-click = 1;
      };
    };

    "device:at-translated-set-2-keyboard" = {
      enabled=true;
    };

    general  =  {
      gaps_in = 5;
      gaps_out = 15;
      border_size = 2;
      "col.active_border"  =  "rgba(e5b9c6ff) rgba(c293a3ff) 45deg";
      "col.inactive_border"  =  "0xff382D2E";
      no_border_on_floating  =  false; # enable border on float window
      layout  =  "dwindle";
      no_cursor_warps  =  false;
    };

    misc = {
      disable_hyprland_logo = true;
      disable_splash_rendering = true;
      mouse_move_enables_dpms = true;
      enable_swallow = true;
      swallow_regex = "^(foot)$";
      vrr = false;
    };

    animations = {
      enabled = true;
    };

    dwindle = {
      pseudotile = true;
      preserve_split = true;
      force_split = true;
      no_gaps_when_only = false;
      default_split_ratio = 1.0;
      smart_split = false;
    };

    master = {
      new_is_master = false;
      new_on_top = false;
      allow_small_split = true;
      no_gaps_when_only = false;
    };

    gestures  =  {
      workspace_swipe = 1;
      workspace_swipe_distance = 400;
      workspace_swipe_invert = 1;
      workspace_swipe_min_speed_to_force = 30;
      workspace_swipe_cancel_ratio = 0.5;
    };

    bindm = [
      # mouse movements
      "$mod, mouse:272, movewindow"
      "$mod, mouse:273, resizewindow"
      "$mod ALT, mouse:272, resizewindow"
    ];


  };
};

# naming it main.conf becuase HM writes hyprland.conf, so just as an import
xdg.configFile."hypr/hyprsea.conf".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/hyprsea.conf";
#+end_src
*** hyprland.conf
- more additional hyprland conf for quick reloads
#+begin_src conf :tangle ./gdk/configs/hyprsea.conf
monitor = ,2880x1800@60,auto,auto
monitor = HDMI-A-1,1920x1080,0x0,1
# monitor = HDMI-A-1,1920x1080,0x0,1,mirror,eDP-1

# ---- Autostart Apps ----

exec-once=waybar
# exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = wl-paste --type text --watch cliphist store
exec-once = wl-paste --type image --watch cliphist store
# exec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
# exec-once = hyprctl setcursor Bibata-Modern-Classic
#exec-once = swayidle timeout 150 'gtklock -b black & sleep 1 && systemctl suspend' before-sleep 'loginctl lock-session' lock 'gtklock -b black'
exec-once = swayidle -w timeout 200 'gtklock -b black -d' timeout 210 'hyprctl dispatch dpms off' resume 'hyprctl dispatch dpms on' timeout 30 'if pgrep gtklock; then hyprctl dispatch dpms off; fi' resume 'if pgrep gtklock; then hyprctl dispatch dpms on; fi' before-sleep 'gtklock -b black -d' lock 'gtklock -b black -d' timeout 500 'systemctl suspend'
# exec-once = gammastep -l 19:72 -t 6500:4100
exec-once = d-walls
exec-once = foot --server
exec-once = emacs --bg-daemon

# --- Local var ---
# misc {
# swallow_regex=^(footclient)$
# }

general {
   col.active_border=rgba(2e8b57ff) rgba(87cefaff) 45deg
  col.inactive_border=0xff382D2E
}


# █░█░█ █ █▄░█ █▀▄ █▀█ █░█░█   █▀█ █░█ █░░ █▀▀ █▀
# ▀▄▀▄▀ █ █░▀█ █▄▀ █▄█ ▀▄▀▄▀   █▀▄ █▄█ █▄▄ ██▄ ▄█

# Opacity
# windowrulev2 = opacity 0.90 0.90,class:^(Brave-browser)$
# windowrulev2 = opacity 0.80 0.80,class:^(pcmanfm)$

# Position
windowrulev2 = float,title:^(Media viewer)$
windowrulev2 = float,title:^(Volume Control)$
windowrulev2 = float,title:^(Picture-in-Picture)$
windowrulev2 = float,class:^(Viewnior)$
windowrulev2 = float,title:^(DevTools)$
windowrulev2 = float,class:^(file_progress)$
windowrulev2 = float,class:^(confirm)$
windowrulev2 = float,class:^(dialog)$
windowrulev2 = float,class:^(download)$
windowrulev2 = float,class:^(notification)$
windowrulev2 = float,class:^(error)$
windowrulev2 = float,class:^(confirmreset)$
windowrulev2 = float,title:^(Open File)$
windowrulev2 = float,title:^(branchdialog)$
windowrulev2 = float,title:^(Confirm to replace files)
windowrulev2 = float,title:^(File Operation Progress)

windowrulev2 = move 75 44%,title:^(Volume Control)$

# Size
windowrulev2 = size 800 600,class:^(download)$
windowrulev2 = size 800 600,title:^(Open File)$
windowrulev2 = size 800 600,title:^(Save File)$
windowrulev2 = size 800 600,title:^(Volume Control)$

windowrulev2 = idleinhibit fullscreen,class:^(Brave-browser)$

# xwaylandvideobridge
windowrulev2 = opacity 0.0 override 0.0 override,class:^(xwaylandvideobridge)$
windowrulev2 = noanim,class:^(xwaylandvideobridge)$
windowrulev2 = nofocus,class:^(xwaylandvideobridge)$
windowrulev2 = noinitialfocus,class:^(xwaylandvideobridge)$

windowrule = opaque,chromium
windowrule = opaque,firefox
windowrule = opaque,emacs
windowrule = opaque,foot

windowrule = float,ncmpcpp
windowrule = float,viewnior

windowrule = float,mpv
windowrule = opaque,mpv
windowrule = noanim,mpv
windowrule = noblur,mpv
windowrulev2 = move 80% 65%, class:^(mpv)$, title:^(podcast)$
windowrulev2 = workspace special, class:^(mpv)$, title:^(podcast)$

windowrulev2 = fullscreen,class:(chromium)
windowrulev2 = fullscreen,class:(emacs)
windowrulev2 = float, class:^(firefox)$, title:^(Firefox — Sharing Indicator)$
windowrule = opaque,imv

windowrulev2 = size 60% 70%,title:^(BrowserInput.*)$
windowrulev2 = center,title:^(BrowserInput.*)
windowrulev2 = float,title:^(BrowserInput.*)
#windowrulev2 = workspace special, title:^(BrowserInput.*)
windowrulev2 = size 800 600,class:^(download)$
windowrulev2 = size 800 600,title:^(Open File)$
windowrulev2 = size 800 600,title:^(Save File)$
windowrulev2 = size 800 600,title:^(Volume Control)$

windowrulev2 = idleinhibit fullscreen,class:^(Brave-browser)$


blurls = rofi
blurls = waybar
blurls = menu
blurls = gtk-layer-shell
blurls = notifications

# █▄▀ █▀▀ █▄█ █▄▄ █ █▄░█ █▀▄
# █░█ ██▄ ░█░ █▄█ █ █░▀█ █▄▀
bind = SUPER,e,exec,d-note
bind = SUPER,y,exec,ytfzf -D
bind = SUPER,x,exec,d-power
# bind = SUPER,period,exec,d-dict
bind = SUPERSHIFT,b,exec,d-bookmark
bind = SUPER,m,exec,d-urls
bind = SUPER,Insert,exec,d-urls

bind = SUPER,grave,exec,d-unicodes
bind = SUPER,Delete,exec,pkill -INT wl-screenrec

bind = CONTROL,F1,exec,hyprctl dispatch dpms on
bind = SUPER,F1,exec,d-keys
bind = SUPER,F2,exec,brightnessctl set 2%-
bind = SUPER,F3,exec,brightnessctl set +2%
bind = SUPER,F5,exec,d-walls
bind = SUPER,F8,exec,mpv --untimed --geometry = 35%-30-30 --no-cache --no-osc --no-input-default-bindings --profile = low-latency --input-conf = /dev/null --title = webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)
bind = SUPER,F11,exec,d-mpdplay
bind = SUPER,F10,exec,mpc prev
bind = SUPER,F12,exec,mpc next


# █▀ █▀▀ █▀█ █▀▀ █▀▀ █▄░█ █▀ █░█ █▀█ ▀█▀
# ▄█ █▄▄ █▀▄ ██▄ ██▄ █░▀█ ▄█ █▀█ █▄█ ░█░
bind=,Print,exec,d-sshot
bind=CONTROL,Insert,exec,d-sshot
bind=SUPER,F4,exec,d-record


# █▀▄▀█ █ █▀ █▀▀
# █░▀░█ █ ▄█ █▄▄
bind = SUPER, RETURN, exec, pgrep emacs && emacsclient -c -e "(eshell)" || footclient
bind = SUPERSHIFT, RETURN, exec, footclient
bind = SUPERSHIFT, Q, killactive,
bind = SUPERSHIFT, R, exec, hyprctl reload
bind = SUPERCONTROL, Q, exit,
bind = SUPER, F12, exec, emacsclient -c -e "(multi-vterm)"
bind = SUPER, SPACE, togglefloating,

# bind = SUPER, d, exec, bemenu-run -W 0.25 -l 8
bind = SUPER, d, exec, rofi -show drun

bind = SUPER, b, exec, pkill -SIGUSR1 waybar || pidof -x waybar || waybar

bind=,XF86AudioRaiseVolume,exec,d-volume up
bind=,XF86AudioLowerVolume,exec,d-volume down
bind=,XF86AudioMute,exec,d-volume mute
bind=,XF86MonBrightnessUp, exec, brightnessctl set +2%
bind=,XF86MonBrightnessDown, exec, brightnessctl set 2%-


# █░█░█ █ █▄░█ █▀▄ █▀█ █░█░█   █▀▄▀█ ▄▀█ █▄░█ ▄▀█ █▀▀ █▀▄▀█ █▀▀ █▄░█ ▀█▀
# ▀▄▀▄▀ █ █░▀█ █▄▀ █▄█ ▀▄▀▄▀   █░▀░█ █▀█ █░▀█ █▀█ █▄█ █░▀░█ ██▄ █░▀█ ░█░
bind = SUPER,T,pseudo,
bind = SUPER,F,fullscreen,
bind = SUPER, S, togglesplit, # dwindle
# Change Workspace Mode
bind = SUPER SHIFT, Space, workspaceopt, allfloat
bind = SUPER SHIFT, Space, exec, $notifycmd 'Toggled All Float Mode'
bind = SUPER SHIFT, T, workspaceopt, allpseudo
bind = SUPER SHIFT, T, exec, $notifycmd 'Toggled All Pseudo Mode'

bind = SUPER ALT, j, cyclenext,
bind = SUPER ALT, j, bringactivetotop,


# █▀▀ █▀█ █▀▀ █░█ █▀
# █▀░ █▄█ █▄▄ █▄█ ▄█
bind = SUPER, k, cyclenext
bind = SUPER, j, cyclenext

# █▀▄▀█ █▀█ █░█ █▀▀
# █░▀░█ █▄█ ▀▄▀ ██▄
bind = SUPER SHIFT, left, movewindow, l
bind = SUPER SHIFT, right, movewindow, r
bind = SUPER SHIFT, up, movewindow, u
bind = SUPER SHIFT, down, movewindow, d

bind = SUPER SHIFT, h, movewindow, l
bind = SUPER SHIFT, l, movewindow, r
bind = SUPER SHIFT, k, movewindow, u
bind = SUPER SHIFT, j, movewindow, d

# █▀█ █▀▀ █▀ █ ▀█ █▀▀
# █▀▄ ██▄ ▄█ █ █▄ ██▄
bind = SUPER CTRL, left, resizeactive, -20 0
bind = SUPER CTRL, right, resizeactive, 20 0
bind = SUPER CTRL, up, resizeactive, 0 -20
bind = SUPER CTRL, down, resizeactive, 0 20

bind = SUPER CTRL, h, resizeactive, -20 0
bind = SUPER CTRL, l, resizeactive, 20 0
bind = SUPER CTRL, k, resizeactive, 0 -20
bind = SUPER CTRL, j, resizeactive, 0 20

# ▀█▀ ▄▀█ █▄▄ █▄▄ █▀▀ █▀▄
# ░█░ █▀█ █▄█ █▄█ ██▄ █▄▀
bind = SUPER, g, togglegroup
bind = SUPER, t, changegroupactive

# █▀ █▀█ █▀▀ █▀▀ █ ▄▀█ █░░
# ▄█ █▀▀ ██▄ █▄▄ █ █▀█ █▄▄
bind = SUPER, a, togglespecialworkspace
bind = SUPERSHIFT, a, movetoworkspace, special
# bind = SUPER, a, exec, $notifycmd 'Toggled Special Workspace'
bind = SUPER, c, exec, hyprctl dispatch centerwindow

# █▀ █░█░█ █ ▀█▀ █▀▀ █░█
# ▄█ ▀▄▀▄▀ █ ░█░ █▄▄ █▀█
bind = SUPER, 1, workspace, 1
bind = SUPER, 2, workspace, 2
bind = SUPER, 3, workspace, 3
bind = SUPER, 4, workspace, 4
bind = SUPER, 5, workspace, 5
bind = SUPER, 6, workspace, 6
bind = SUPER, 7, workspace, 7
bind = SUPER, 8, workspace, 8
bind = SUPER, 9, workspace, 9
bind = SUPER, 0, workspace, 10
bind = SUPER, TAB, workspace, e+1
bind = SUPERSHIFT, TAB, workspace, e-1

# █▀▄▀█ █▀█ █░█ █▀▀
# █░▀░█ █▄█ ▀▄▀ ██▄
bind = SUPER ALT, 1, movetoworkspace, 1
bind = SUPER ALT, 2, movetoworkspace, 2
bind = SUPER ALT, 3, movetoworkspace, 3
bind = SUPER ALT, 4, movetoworkspace, 4
bind = SUPER ALT, 5, movetoworkspace, 5
bind = SUPER ALT, 6, movetoworkspace, 6
bind = SUPER ALT, 7, movetoworkspace, 7
bind = SUPER ALT, 8, movetoworkspace, 8
bind = SUPER ALT, 9, movetoworkspace, 9
bind = SUPER ALT, 0, movetoworkspace, 10
# Layout Change
bind = SUPER, w, exec, hyprctl keyword general:layout "dwindle"
bind = SUPERSHIFT, w, exec, hyprctl keyword general:layout "master"


# █▀▄▀█ █▀█ █░█ █▀ █▀▀   █▄▄ █ █▄░█ █▀▄ █ █▄░█ █▀▀
# █░▀░█ █▄█ █▄█ ▄█ ██▄   █▄█ █ █░▀█ █▄▀ █ █░▀█ █▄█
bindm = SUPER, mouse:272, movewindow
bindm = SUPER, mouse:273, resizewindow
bind = SUPER, mouse_down, workspace, e+1
bind = SUPER, mouse_up, workspace, e-1

# Move window silently to workspace Super + Alt + [0-9]
bind = SUPER SHIFT, 1, movetoworkspacesilent, 1
bind = SUPER SHIFT, 2, movetoworkspacesilent, 2
bind = SUPER SHIFT, 3, movetoworkspacesilent, 3
bind = SUPER SHIFT, 4, movetoworkspacesilent, 4
bind = SUPER SHIFT, 5, movetoworkspacesilent, 5
bind = SUPER SHIFT, 6, movetoworkspacesilent, 6
bind = SUPER SHIFT, 7, movetoworkspacesilent, 7
bind = SUPER SHIFT, 8, movetoworkspacesilent, 8
bind = SUPER SHIFT, 9, movetoworkspacesilent, 9
bind = SUPER SHIFT, 0, movetoworkspacesilent, 10


# Key Chords
bind=SUPER,period,submap,Wordz
submap=Wordz
bind=,d,exec,d-dict
bind=,d,submap,reset

bind=,a,exec,d-vocab
bind=,a,submap,reset

bind=,v,exec,wtype "$(cat ~/.local/share/dict/myglossary | bemenu | awk '{print $1}')"
bind=,v,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset


bind=SUPER,O,submap,Scripts
submap=Scripts
bind=,o,exec,d-menu
bind=,o,submap,reset

bind=,i,exec,d-stuff
bind=,i,submap,reset

bind=,p,exec,d-pirt
bind=,p,submap,reset

bind=,x,exec,d-power
bind=,x,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset

bind=SUPER,P,submap,Apps
submap=Apps

bind=,p,exec,sioyek
bind=,p,submap,reset

bind=,f,exec,firefox
bind=,f,submap,reset

bind=,b,exec,brave
bind=,b,submap,reset

bind=,w,exec,librewolf
bind=,w,submap,reset

bind=,c,exec,chromium
bind=,c,submap,reset

bind=,e,exec,emacsclient -c
bind=,e,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset

bind=SUPER,C,submap,Controls
submap=Controls

bind=SHIFT,equal,exec, pamixer -ui 5
bind=,minus,exec, pamixer -ud 5
bind=,m,exec, pamixer -t
bind=,m,submap,reset
bind=,p,exec, mpc toggle
bind=,p,submap,reset

bind=,escape,submap,reset
bind=CONTROL,g,submap,reset
submap=reset

#+end_src
*** tray
- fake a tray to let apps start
- https://github.com/nix-community/home-manager/issues/2064
#+begin_src nix
systemd.user.targets.tray = {
  Unit = {
    Description = "Home Manager System Tray";
    Requires = ["graphical-session-pre.target"];
  };
};

#+end_src
*** wlsunset
- replacing redshift for wayland. Protecting blue light during evenings
#+begin_src nix
services= {
  wlsunset = {
    enable = true;
    latitude = "19.0";
    longitude = "72.0";
    temperature.day = 6500;
    temperature.night = 4000;
    systemdTarget = "graphical-session.target";
  };
};
#+end_src
*** waybar
#+begin_src nix
programs.waybar = {
  enable = true;

  settings = {
    mainBar = {
      layer = "top";
      position = "top";
      # height = 15;
      # spacing = 7;
      fixed-center = true;
      exclusive = true;

      modules-left = [
	      "custom/launcher"
	      "hyprland/workspaces"
        "wlr/taskbar"
	      "hyprland/window"
	      "hyprland/submap"
      ];

      modules-center = [
	      "custom/recorder" "clock" "mpd" "mpris"
      ];

      modules-right = [ "tray" "network" "battery" "memory" "pulseaudio" "custom/power" ];

      "hyprland/workspaces" = {
	      format = "{icon}";
        disable-scroll = true;
        all-outputs = true;
	      active-only = false;
        show-special = true;
	      on-click = "activate";
	      format-icons = {
		      active = "";
		      default = "";
		      "1" = "1";
		      "2" = "2";
		      "3" = "3";
		      "4" = "4";
		      "5" = "5";
		      "6" = "6";
	      };
      };

      "hyprland/window" = {
	      "format" = "{}";
	      "separate-outputs" = true;
        "max-length" = 35;
	      "rewrite" = {
		      "(.*) - Mozilla Firefox" = "🦊 $1";
		      "(.*) - LibreWolf" = "🐺 $1";
		      "(.*) - Brave" = "🦁 $1";
		      "(.*) - GNU Emacs (.*)" = " $1";
		      "(.*).epub(.*)" = "󰂽 $1";
		      "(.*)foot" = " Terminal $1";
	      };
      };

      "hyprland/submap" = {
	      "format" = " {}";
	      "max-length" = 14;
	      "tooltip" = false;
      };

	    "wlr/taskbar"=  {
		    "format"=  "{icon}";
		    "icon-size"=  18;
        "spacing"=  0;
		    "tooltip-format"=  "{title}";
		    "on-click"=  "activate";
		    "on-click-middle"=  "close";
	    };


      "custom/launcher" = {
	      "format" = "";
	      "tooltip" = false;
	      "on-click" = "rofi -show drun";
        "interval" = 86400;
      };

      "battery" =  {
	      "bat" =  "BAT1";
	      "interval" =  60;
	      "states" =  {
          "good" = 95;
		      "warning" = 40;
		      "critical" = 20;
	      };
	      "max-length" =  25;
        "format" = "{icon} {capacity}%";
        "format-charging" = " {capacity}%";
        "format-plugged" = " {capacity}%";
        "format-alt" = "{time} {icon}";
        "format-icons" = ["󰂎" "󰁺" "󰁻" "󰁼" "󰁽" "󰁾" "󰁿" "󰂀" "󰂁" "󰂂" "󰁹"];

      };

      "mpd" = {
	      "format" = "{stateIcon} {title}  ";
	      "format-disconnected" = "  ";
	      "format-stopped" = "  ";
	      "title-len" = 20;
	      "interval" = 10;
	      "on-click" = "mpc toggle";
	      "state-icons" = {
		      "paused" = "";
		      "playing" = "";
	      };
	      "tooltip-format" = "Mpd Connected";
	      "tooltip-format-disconnected" = "";
      };

      "mpris" = {
	      "format" = " {player_icon} {dynamic}";
	      "format-paused" = "{status_icon} <i>{dynamic}</i>";
	      "player-icons" = {
		      "default" = "▶";
		      "mpv" = "🎵";
	      };
	      "status-icons" = {
		      "paused" = "⏸";
	      };
	      "max-length" = 20;
      };

	    "custom/power" = {
	      "format" = "⏻";
	      "on-click" = "d-power";
	      "tooltip" = false;
        "interval" = 86400;
      };

      "clock" = {
	      "tooltip-format" = "{:%A %B %d %Y | %H:%M}";
	      "format-alt" = " {:%a %d %b  %I:%M %p}";
	      "format" = " {:%H:%M}";
	      ##"timezones" = [ "Kolkata" ];
	      ##"max-length" = 200;
	      "interval" = 1;
      };

      "tray" = {
        "icon-size" = 23;
        "spacing" = 10;
      };

      "cpu" = {
	      "format" = "﬙ {usage: >3}%";
	      "on-click" = "footclient -e btop";
      };

      "memory" = {
	      "on-click" = "foot -e btop";
        "interval" = 30;
        "format" = "󰾆 {percentage}%";
        "format-alt" = "󰾅 {used}GB";
        "max-length" = 10;
        "tooltip" = true;
        "tooltip-format" = " {used =0.1f}GB/{total =0.1f}GB";
      };

      "network" = {
	      # "interface" = "wlp2s0";
	      "format" = "⚠ Disabled";
	      "format-wifi" = " {bandwidthDownBytes}  {bandwidthUpBytes}";
        "format-ethernet" = " {bandwidthDownBytes}  {bandwidthUpBytes}";
	      "format-disconnected" = "⚠ Disconnected";
	      "on-click" = "d-wifi";
	      "interval" = 2;
      };

      "pulseaudio" = {
	      "scroll-step" = 2;
	      "format" = "{icon} {volume: >3}%";
	      "format-bluetooth" = "{icon} {volume: >3}%";
	      "format-muted" =" muted";
	      "on-click" = "pamixer -t";
	      "format-icons" = {
		      "headphones" = "";
		      "handsfree" = "";
		      "headset" = "";
		      "phone" = "";
		      "portable" = "";
		      "car" = "";
		      "default" = ["" ""];
	      };
      };

      "custom/recorder" = {
		    "format" = "{}";
		    "interval" = "once";
		    "exec" = "echo ' '";
		    "tooltip" = "false";
		    "exec-if" = "pgrep wl-screenrec";
		    "on-click" = "exec d-record";
		    "signal" = 8;
	    };

    };
  };
};

home.file.".config/waybar/style.css".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/style.css";

#+end_src
**** style.css
#+begin_src css :tangle ./gdk/configs/style.css
/* My own theme (Haki) made for emacs */

@define-color  bg-main	     #050505;
@define-color  bg-dim	     #121212;
@define-color  fg-main	     #ffffff;
@define-color  fg-dim	     #D8DEE9;
@define-color  fg-region     #2e8b6d;

@define-color  title        #6ae4b9;
@define-color  heading-1    #ab82ff;
@define-color  heading-2    #ffec8b;
@define-color  heading-3    #3cb6df;
@define-color  heading-4    #9aff9a;
@define-color  heading-5    #97ffff;
@define-color  heading-6    #ffa07a;
@define-color  heading-7    #eeb4b4;
@define-color  heading-8    #ee4000;
@define-color  heading-9    #cd96cd;

@define-color  error      #ee6363;
@define-color  link       #fcde69;
@define-color  todo       #54ff9f;
@define-color  done       #b4dddd;
@define-color  code       #77ee77;
@define-color  verbatim   #ee77ee;
@define-color  clock      #eedc82;
@define-color  bg-tag     #ffe1ff;
@define-color  bracket    #ffeeee;

,* {
    border: none;
    border-radius: 0px;
    font-family: "Code D Ace";
    font-weight: bold;
    font-size: 15px;
    min-height: 10px;
}

window#waybar {
    background: @bg-main;
}

tooltip {
    background: @bg-main;
    color: @fg-main;
    border-radius: 7px;
    border-width: 0px;
}

#workspaces button,
#taskbar button {
    box-shadow: none;
	text-shadow: none;
    padding: 0px;
    border-radius: 9px;
    margin-top: 3px;
    margin-bottom: 3px;
    padding-left: 3px;
    padding-right: 3px;
    color: @fg-main;
    animation: gradient_f 20s ease-in infinite;
    transition: all 0.5s cubic-bezier(.55,-0.68,.48,1.682);
}

#workspaces button.active,
#taskbar button.active {
    background: @fg-region;
    color: @bg-main;
    margin-left: 3px;
    padding-left: 12px;
    padding-right: 12px;
    margin-right: 3px;
    animation: gradient_f 20s ease-in infinite;
    transition: all 0.3s cubic-bezier(.55,-0.68,.48,1.682);
}

#workspaces button:hover,
#taskbar button:hover {
    background: @bg-dim;
    color: @fg-dim;
    padding-left: 3px;
    padding-right: 3px;
    animation: gradient_f 20s ease-in infinite;
    transition: all 0.3s cubic-bezier(.55,-0.68,.48,1.682);
}


#mode,
#clock,
#mpd,
#mpris,
#cpu,
#tray,
#memory,
#network,
#battery,
#pulseaudio,
#pulseaudio.muted,
#custom-launcher,
#custom-power,
#submap,
#window,
#workspaces {
    color: @fg-main;
    background: @bg-main;
    opacity: 1;
    margin: 4px 0px 4px 0px;
    padding-left: 4px;
    padding-right: 4px;

    /* color: transparent; */
}

/* /\* for window name *\/ */
/* #window { */
/*     color: @fg-region; */
/*     color: @fg-main; */
/* } */

/* window#waybar { */
/*     /\* background: @bg-main; *\/ */
/*     background: transparent; */
/* } */

/* window#waybar.hidden { */
/*     opacity: 0.2; */
/* } */

/* window#waybar.foot { */
/*     /\* border: 2px solid @code; *\/ */
/* } */
/* window#waybar.footclient { */
/*     /\* border: 2px solid @code; *\/ */
/* } */

/* window#waybar.emacs { */
/*     /\* border: 2px solid @heading-1; *\/ */
/* } */
/* window#waybar.brave { */
/*     /\* border: 2px solid @link; *\/ */
/* } */

/* #workspaces button { */
/*     color: @fg-main; */
/* } */

#battery.charging{
    color: @heading-4;
}

#battery.warning { background: orange; }
#battery.critical { background: red; }


#tray{
    color: @bg-tag;
}

#workspaces,
#taskbar {
    padding: 0px;
}


/* #mode { */
/*     color: @heading-8; */
/* } */

/* #clock { */
/*     color: @clock; */
/* } */

/* #mpd { */
/*     color: @heading-3; */
/*     font-family:Maple Mono; */
/*     font-style: italic; */
/* } */


/* #cpu { */
/*     color: @heading-4; */
/* } */

/* #memory { */
/*     color: @heading-5; */
/* } */

/* #network.disabled { */
/*     color: @done; */
/* } */

/* #network{ */
/*     color: @heading-6; */
/* } */


/* #network.disconnected { */
/*     color: @done; */
/* } */

/* #pulseaudio { */
/*     color: @heading-9; */
/* } */

/* #pulseaudio.muted { */
/*     color: @done; */
/* } */

/* #custom-launcher { */
/*     /\* background: linear-gradient(90deg, @title 28%, @heading-5 85%, @title 100%); *\/ */
/*     color: @fg-region; */
/* } */

/* #custom-power { */
/*     /\* color: linear-gradient(90deg, @error 28%, @error 85%, @error 100%); *\/ */
/*     color: @todo; */
/* } */

/* #submap { */
/*     color: @code; */
/* } */

#+end_src
*** wayland-packages
#+name: way-pkgs
#+begin_src nix :tangle no
# screenshot
grim
slurp

libnotify libsixel bemenu
brightnessctl
wtype swaybg swayidle gtklock
rofi-wayland

# utils
# ocrScript
wl-screenrec
wl-clipboard
#+end_src
** shell
*** cli
#+begin_src nix
programs = {
  # nix-index.enable = true;
  eza = {
    enable = true;
    extraOptions = ["--group-directories-first" "--header"];
    icons = true;
    enableAliases = false;
  };

  ripgrep = {
    enable = true;
    arguments = [
      "--max-columns-preview"
      "--colors=line:style:bold"
      "--ignore-case"
    ];
  };

  btop = {
    enable = true;
    settings = {
      color_theme = "Default";
      theme_background = false;
      vim_keys = true;
      shown_boxes = "proc cpu";
      rounded_corners = true ;
      graph_symbol = "block";
      proc_sorting = "memory";
      proc_reversed = false;
      proc_gradient = true;
    };
  };

  bat = {
    enable = true;
    extraPackages = with pkgs.bat-extras; [ batdiff batman batgrep batwatch ];
    config = {
      pager = "less -FR";
      theme = "TwoDark";
    };
  };

  ssh.enable = true;

  skim = {
    enable = true;
    enableZshIntegration = true;
    defaultCommand = "rg --files --hidden";
    changeDirWidgetOptions = [
      "--preview 'eza --icons --git --color always -T -L 3 {} | head -200'"
      "--exact"
    ];
  };
};
#+end_src
*** git
#+begin_src nix
programs.git = {
  enable = true;
  package = pkgs.gitFull;

  delta = {
    enable = true;
    # TODOTHIS
    # options.map-styles = "bold purple => syntax ${default.xcolors.mauve}, bold cyan => syntax ${default.xcolors.blue}";
  };

  extraConfig = {
    diff.colorMoved = "default";
    merge.conflictstyle = "diff3";
  };

  aliases = {
    a = "add";
    b = "branch";
    c = "commit";
    ca = "commit --amend";
    cm = "commit -m";
    cho = "checkout";
    d = "diff";
    ds = "diff --staged";
    p = "push";
    pf = "push --force-with-lease";
    pl = "pull";
    l = "log";
    r = "rebase";
    s = "status --short";
    ss = "status";
    forgor = "commit --amend --no-edit";
    graph = "log --all --decorate --graph --oneline";
    logrep = "log --decorate --oneline --grep=";
    oops = "checkout --";
  };

  ignores = ["*~" "*.swp" "*result*" ".direnv" "node_modules"];

  # signing = {
  #   key = "";
  #   signByDefault = true;
  # };

  userEmail = "igoldlip@gmail.com";
  userName = "Dilip";
  # editor = "";
};
#+end_src
*** direnv
#+begin_src nix
programs.direnv = {
  enable = true;
  nix-direnv.enable = true;
  enableZshIntegration = true;
};
#+end_src
*** zsh
#+begin_src nix
# symlink normal shell file to source for zsh
home.file.".config/shell/source.sh".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/source.sh";

programs.zsh = {
  enable = true;
  dotDir = ".config/shell";
  autocd = true;
  enableCompletion = true;
  enableAutosuggestions = true;
  history.extended = true;

  dirHashes = {
    dl = "$HOME/dloads";
    docs = "$HOME/docs";
    code = "$HOME/d-git/codes";
    dots = "$HOME/d-git/d-nix";
    pics = "$HOME/pics";
    vids = "$HOME/vids";
    nixpkgs = "$HOME/d-git/forks/nixpkgs";
  };

  envExtra = ''
    export PATH="$PATH:$HOME/d-git/d-bin/bin:$HOME/.local/bin"
  	export EDITOR="emacsclient -nw -a 'nvim'"
    export BEMENU_OPTS="-i -s -l 10 -R 20 -p ' ' -c -B 2 -W 0.5 --hp 15 --fn 'Code D Ace 16' --nb '#121212' --ab '#121212' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#9aff9a' --hf '#121212' --fb '#121212' --ff '#a6e3a1' --tb '#121212' --tf '#f9e2af' ";
    export VISUAL=$EDITOR
    export STARDICT_DATA_DIR="$HOME/.local/share/stardict"
    export GRIM_DEFAULT_DIR="$HOME/pics/sshots/"

    	#if [ -z $DISPLAY ] && [ "$(tty)" = "/dev/tty1" ]; then
      #  exec Hyprland
     	#fi
  	'';

  initExtra = ''
	source ~/.config/shell/source.sh

	source "${pkgs.zsh-syntax-highlighting}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
	source "${pkgs.zsh-history-substring-search}/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
	source "${pkgs.zsh-autosuggestions}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
	source "${pkgs.nix-zsh-completions}/share/zsh/plugins/nix/nix-zsh-completions.plugin.zsh"
	source "${pkgs.zsh-nix-shell}/share/zsh-nix-shell/nix-shell.plugin.zsh"
	source "${pkgs.zsh-autopair}/share/zsh/zsh-autopair/autopair.zsh"

	'';

  history = {
    save = 10000;
    size = 10000;
    expireDuplicatesFirst = true;
    ignoreDups = true;
    path = "${config.xdg.configHome}/shell/zsh_history";
  };
};
#+end_src
**** source
#+begin_src bash :tangle ./gdk/configs/source.sh

# Make zsh better simply
autoload -U colors && colors  # Load colors
# PS1="%B%{$fg[yellow]%}[%{$fg[cyan]%}%~%{$fg[yellow]%}]
 # %{$fg[blue]%} %b%{$reset_color%}%b"
PS1=" %B%{$fg[blue]%}◉ %{$fg[yellow]%}[%{$fg[cyan]%}%~%f%}%{$fg[yellow]%}]
 %F{green}%f "
# setopt autocd		# Auto cd
stty stop undef		# Disable ctrl-s to freeze terminal.
# setopt interactive_comments

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.

# search history based on what's typed in the prompt
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^[OA" history-beginning-search-backward-end
bindkey "^[OB" history-beginning-search-forward-end

# case insensitive tab completion
zstyle ':completion:*' completer _complete _ignored _approximate
zstyle ':completion:*' list-colors '\'
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' verbose true
_comp_options+=(globdots)


# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# get emacs bindings
bindkey -e
# useful for deleting words backwards like bash (M-DEL)
WORDCHARS='*?[]~=&;!$%^(){}<>'

# Aliases
alias cleanup="doas nix-collect-garbage --delete-older-than 7d"
alias bloat="nix path-info -Sh /run/current-system"
alias ytmp3="yt-dlp -x --continue --add-metadata --embed-thumbnail --audio-format mp3 --audio-quality 0 --metadata-from-title='%(artist)s - %(title)s' --prefer-ffmpeg -o '%(title)s.%(ext)s' "
alias cat="bat --style=plain"
alias grep='rg'
alias du='dust'
# alias ps='procs'
alias m="mkdir -p"
alias ls="exa -h --git --icons --color=auto --group-directories-first -s extension"
alias l="ls -lF --time-style=long-iso --icons"
alias la="exa -lah --tree"
alias tree="exa --tree --icons --tree"
alias http="python3 -m http.server"
alias burn="pkill -9"
alias diff="diff --color=auto"
alias kys="doas shutdown now"
alias killall="pkill"
alias ".1"="cd .."
alias ".2"="cd ../.."
alias ".3"="cd ../../.."
alias c="clear"
alias v="nvim"
alias emd="pkill emacs; emacs --daemon"
alias cp="cp -iv"
alias mv="mv -iv"
alias rm="rm -vI"
alias bc="bc -ql"
alias mkd="mkdir -pv"
alias ytfzf="ytfzf -D"
alias gc="git clone --depth=1"
alias sudo="doas"
alias sioyek="sioyek --new-window"

# export BEMENU_OPTS="-i -l 10 -p ' ' -c -B 2 -W 0.5 --hp 15 --fn 'ComicCodeLigatures Nerd Font 20' --nb '#121212' --ab '#121212' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#9aff9a' --hf '#121212' --fb '#121212' --ff '#a6e3a1' --tb '#121212' --tf '#f9e2af' ";

# neovim as manpager, if not using emacs
# export MANPAGER='nvim +Man! +"set nocul" +"set noshowcmd" +"set noruler" +"set noshowmode" +"set laststatus=0" +"set showtabline=0" +"set nonumber"'
export MANPAGER='nvim +Man!'

export STARDICT_DATA_DIR="$HOME/d-git/d-bin/treasure/dict/"

# Functions
function ytdl() {
    yt-dlp --embed-metadata --embed-subs -f 22 "$1"
}

function fcd() {
    cd "$(fd -t d | fzf)"
}

function shellnix() {
    nix shell nixpkgs#"$1"
}

## Emacs all time

function {e,find-file,'emacsclient -t','emacsclient -nw'} () {
    if [ -n "$INSIDE_EMACS" ]; then
	emacsclient $1 >/dev/null 2>&1 || echo "Give a file to open"
    else
	emacsclient -t $1 || echo "Start emacs daemon"
    fi
}

function manp () { # use emacs
    if [[ $(man -k $1) ]]; then
        if [ -n "$INSIDE_EMACS" ]; then
	          emacsclient -e "(funcall 'man (apply 'eshell-flatten-and-stringify '($1 $2)))"
        elif [ "$(pgrep emacs)" ]; then
	        emacsclient -nw -e "(funcall 'man (apply 'eshell-flatten-and-stringify '($1 $2)))"
        else
	          man $1
        fi
    else
        $1 --help
    fi
}

whichpath () {
    realpath $(which $1)
}

# TODOTHIS
d-test () {
    local editor="nvim"
    local tmpf="$(mktemp)"
    printf '%s\n' "$READLINE_LINE" >| "$tmpf"
    "$editor" "$tmpf"
    READLINE_LINE="$(<"$tmpf")"
    READLINE_POINT="${#READLINE_LINE}"
    rm -f "$tmpf" >/dev/null 2>&1
}

# zle -N d-test
# bindkey '^o' 'd-test'


function prefetch-sri() {
    nix-prefetch-url "$1" | xargs nix hash to-sri --type sha256
}

depends-on-installed () {
  nix-store --query --referrers $(which $1)
}

dependencies-installed () {
  nix-store --query --references $(which $1)
}

depends-on () {
  nix-store --query --referrers\
    $(nix-instantiate '<nixpkgs>' -A $1) | rg -v home-manager-path
}

dependencies () {
  nix-store --query --references\
    $(nix-instantiate '<nixpkgs>' -A $1)
}

if [ -n "${commands[fzf-share]}" ]; then
  source "$(fzf-share)/key-bindings.zsh"
  source "$(fzf-share)/completion.zsh"
fi



[ -n "$EAT_SHELL_INTEGRATION_DIR" ] && source "$EAT_SHELL_INTEGRATION_DIR/zsh"


# precmd() {
#     print ""
# }

#+end_src
*** terminal
- foot is decent, but emacs tho has got it covered too!
#+begin_src nix
programs = {

  foot = {
    enable = true;

    # doesnt work properly; Enable it in hyprland or sway config
    server.enable = false;

    settings = {
      main = {
        term = "xterm-256color";
        font = "Code D OnePiece:size=12, Noto Color Emoji:size=15";
        font-bold = "Code D Lip:size=12, Noto Color Emoji:size=15";
        letter-spacing = "1";
        box-drawings-uses-font-glyphs = "no";
        pad = "0x0center";
        notify = "notify-send -a \${app-id} -i \${app-id} \${title} \${body}";
        selection-target = "clipboard";
	      dpi-aware = "true";
      };

      scrollback = {
        lines = 10000;
        multiplier = 3;
      };

      url = {
        launch = "d-stuff \${url}";
        label-letters = "sadfjklewcmpgh";
        osc8-underline = "url-mode";
        protocols = "http, https, ftp, ftps, file";
        uri-characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.,~:;/?#@!$&%*+=\"'()[]";
      };

      key-bindings = {
        clipboard-copy = "Control+Shift+c";
        clipboard-paste = "Control+Shift+v Control+y";
        primary-paste = "Shift+Insert";

      };

      colors = {
        background = "050505";
        foreground = "ffffff";
        regular0 = "030303";
        regular1 = "ff8059";
        regular2 = "44bc44";
        regular3 = "d0bc00";
        regular4 = "2fafff";
        regular5 = "feacd0";
        regular6 = "00d3d0";
        regular7 = "bfbfbf";
        bright0 = "595959";
        bright1 = "ef8b50";
        bright2 = "70b900";
        bright3 = "c0c530";
        bright4 = "79a8ff";
        bright5 = "b6a0ff";
        bright6 = "6ae4b9";
        bright7 = "ffffff";
        alpha = "0.9";
      };

      mouse = {
        hide-when-typing = "yes";
      };

    };
  };

  zellij = {
    enable = true;
    settings = {

    };
  };

};
#+end_src
*** helix
- just to test the cool editor right now.
#+begin_src nix :tangle no
programs.helix = {
  enable = true;

  settings = {
    theme = "gruvbox_dark_hard";

    keys.normal = {
      "{" = "goto_prev_paragraph";
      "}" = "goto_next_paragraph";
      "X" = "extend_line_above";
      "esc" = ["collapse_selection" "keep_primary_selection"];
      space.space = "file_picker";
      space.w = ":w";
      space.q = ":bc";
      "C-q" = ":xa";
      space.u = {
        f = ":format"; # format using LSP formatter
        w = ":set whitespace.render all";
        W = ":set whitespace.render none";
      };
    };

    keys.insert = {
      A-x = "normal_mode";
      j = { k = "normal_mode"; };
    };

    keys.select = {
      "%" = "match_brackets";
    };

    editor = {
      line-number = "relative";
      cursorline = true;
      auto-completion = true;
      auto-format = true;
      mouse = true;
      color-modes = true;
      idle-timeout = 1;
      scrolloff = 5;
      bufferline = "always";
      true-color = true;
      rulers = [80];
      indent-guides = {
        render = true;
      };
      gutters = ["diagnostics" "line-numbers" "spacer" "diff"];

      statusline = {
        separator = "";
        left = ["mode" "selections" "spinner" "file-name" "total-line-numbers"];
        center = [];
        right = ["diagnostics" "file-encoding" "file-line-ending" "file-type" "position-percentage" "position"];
        mode = {
          normal = "NORMAL";
          insert = "INSERT";
          select = "SELECT";
        };
      };

      whitespace.characters = {
        space = "·";
        nbsp = "⍽";
        tab = "→";
        newline = "⤶";
      };

      cursor-shape = {
        insert = "bar";
        normal = "block";
        select = "block";
      };

      auto-pairs = {
        "(" = ")";
        "{" = "}";
        "[" = "]";
        "\"" = "\"";
        "`" = "`";
        "<" = ">";
      };

      lsp = {
        enable = true;
        display-messages = true;
        display-inlay-hints = true;
        snippets = true;
      };

    };
  };

};
#+end_src
*** helpful tool
#+begin_src nix
programs = {
  man = {
    enable = true;
    generateCaches = true; # will take little time
  };

  gpg = {
    enable = true;
    homedir = "${config.xdg.dataHome}/gnupg";
  };

  tealdeer = {
    enable = true;
    settings = {
      display = {
	      compact = false;
	      use_pager = true;
      };
      updates = {
	      auto_update = true;
      };
    };
  };
};
#+end_src
*** cli-packages
#+name: cli-pkgs
#+begin_src nix :tangle no
  # archives
  zip
  unzip

  fzf
  # wonderful spells
  aspell aspellDicts.en-science aspellDicts.en hunspell hunspellDicts.en-us

  ffmpeg-full sdcv nq
  # utils
  file
  du-dust
  fd
  wget

#+end_src
*** coding package
#+name: code-pkgs
#+begin_src nix :tangle no
  # better to manage it via development shell

  # shell
  nodePackages.bash-language-server

  # basic stack
  # nodePackages.vscode-langservers-extracted
  hugo monolith

  ### python
  # python311Packages.python-lsp-server
  # nodePackages.pyright
  (python311.withPackages(ps: with ps; [
    python-lsp-server
    biopython
    python-lsp-black
    python-lsp-ruff
  ]))

  # core comp
  gcc gnumake tree-sitter
  parallel

  # science
  # blast
  julia

  # R
  (rWrapper.override {
    packages = with rPackages; [
      ggplot2
      # dplyr
      # tidyverse # set of 9 packages
      languageserver
      lintr
      # stringr
      BiocManager
      # httr
      # ggvis
      # shiny
      # rio
      # rmarkdown
    ]; })

  # nix
  # nixd # or nil

  # alltex
  # texlive.combined.scheme-full
  texliveSmall
#+end_src
*** starship
- for beautiful prompt
- I have stopped using it, it makes shell little slow.
#+begin_src nix :tangle no
programs.starship = {
  enable = true;
  enableZshIntegration = true;

  settings = {
    add_newline = true;
    scan_timeout = 5;

    line_break.disabled = false;

    hostname = {
	    ssh_only = true;
	    format = "[$hostname](bold blue) ";
	    disabled = false;
    };
  };
};
#+end_src
** gui
*** gpg-agent
#+begin_src nix
services = {
  gpg-agent = {
    enable = true;
    enableSshSupport = true;
    enableZshIntegration = true;
    pinentryFlavor = "gnome3";
  };
};
#+end_src
*** aria2
#+begin_src nix
programs.aria2 = {
  enable = true;
  settings = {
    dir = "$HOME/dloads";
    file-allocation = "none";
    log-level = "warn";
    split = "10";
    max-connection-per-server = 10;
    min-split-size = "5M";
    bt-max-peers = "0";
    bt-request-peer-speed-limit = "0";
    max-overall-upload-limit = "512k";
    bt-external-ip = "127.0.0.1";
    dht-listen-port = "6882";
    enable-dht = "true";
    enable-peer-exchange = "true";
    listen-port = "6881";
    bt-force-encryption = "true";
    bt-min-crypto-level = "arc4";
    bt-require-crypto = "true";
    follow-torrent = "mem";
    seed-ratio = "100";
    seed-time = "0";
    socket-recv-buffer-size = "1M";
    event-poll = "epoll";
    realtime-chunk-checksum = "true";
    allow-overwrite = "true";
    always-resume = "true";
    auto-file-renaming = "false";
    continue = "true";
    rpc-save-upload-metadata = "false";
  };
};
#+end_src
*** browser
#+begin_src nix
programs = {

  firefox = {
    enable = true;
    # package = pkgs.firefox-wayland; # is there difference?
    profiles.ihome = {
      isDefault = true;
      # extensions = with pkgs.nur.repos.rycee.firefox-addons; [
      #   ff2mpv
      #   vimium
      #   languagetool
      #   ublock-origin
      #   darkreader
      #   libredirect
      #   multi-account-containers
      #   vertical-tabs-reloaded
      # ];

      settings = {
        "browser.startup.homepage" = "about:blank";
        "browser.urlbar.placeholderName" = "Time to get Productive...";
        "gfx.webrender.all" = true;
        "gfx.webrender.enabled" = true;
        "media.av1.enabled" = false;
        "media.ffmpeg.vaapi.enabled" = true;
        "media.hardware-video-decoding.force-enabled" = true;
        "media.navigator.mediadatadecoder_vpx_enabled" = true;
        "signon.rememberSignons" = false;
        "app.normandy.api_url" = "";
        "app.normandy.enabled" = false;
        "app.shield.optoutstudies.enabled" = false;
        "beacon.enabled" = false;
        "breakpad.reportURL" = "";
        "browser.aboutConfig.showWarning" = false;
        "browser.cache.offline.enable" = false;
        "browser.crashReports.unsubmittedCheck.autoSubmit" = false;
        "browser.crashReports.unsubmittedCheck.autoSubmit2" = false;
        "browser.crashReports.unsubmittedCheck.enabled" = false;
        "browser.disableResetPrompt" = true;
        "browser.newtab.preload" = false;
        "browser.newtabpage.activity-stream.section.highlights.includePocket" = false;
        "extensions.pocket.enabled" = false;
        "browser.newtabpage.enhanced" = false;
        "browser.newtabpage.introShown" = true;
        "browser.safebrowsing.appRepURL" = "";
        "browser.safebrowsing.blockedURIs.enabled" = false;
        "browser.safebrowsing.downloads.enabled" = false;
        "browser.safebrowsing.downloads.remote.enabled" = false;
        "browser.safebrowsing.downloads.remote.url" = "";
        "browser.safebrowsing.enabled" = false;
        "browser.safebrowsing.malware.enabled" = false;
        "browser.safebrowsing.phishing.enabled" = false;
        "browser.selfsupport.url" = "";
        "browser.send_pings" = false;
        "browser.sessionstore.privacy_level" = 2;
        "browser.startup.homepage_override.mstone" = "ignore";
        "browser.tabs.crashReporting.sendReport" = false;
        "browser.urlbar.groupLabels.enabled" = false;
        "browser.urlbar.quicksuggest.enabled" = false;
        "browser.urlbar.speculativeConnect.enabled" = false;
        "datareporting.healthreport.service.enabled" = false;
        "datareporting.healthreport.uploadEnabled" = false;
        "datareporting.policy.dataSubmissionEnabled" = false;
        "device.sensors.ambientLight.enabled" = false;
        "device.sensors.enabled" = false;
        "device.sensors.motion.enabled" = false;
        "device.sensors.orientation.enabled" = false;
        "device.sensors.proximity.enabled" = false;
        "dom.battery.enabled" = false;
        "dom.event.clipboardevents.enabled" = true;
        "dom.webaudio.enabled" = false;
        "experiments.activeExperiment" = false;
        "experiments.enabled" = false;
        "experiments.manifest.uri" = "";
        "experiments.supported" = false;
        "extensions.getAddons.cache.enabled" = false;
        "extensions.getAddons.showPane" = false;
        "extensions.greasemonkey.stats.optedin" = false;
        "extensions.greasemonkey.stats.url" = "";
        "extensions.shield-recipe-client.api_url" = "";
        "extensions.shield-recipe-client.enabled" = false;
        "extensions.webservice.discoverURL" = "";
        "fission.autostart" = true;
        "media.autoplay.default" = 1;
        "media.autoplay.enabled" = false;
        "media.eme.enabled" = false;
        "media.gmp-widevinecdm.enabled" = false;
        "media.navigator.enabled" = false;
        "media.video_stats.enabled" = false;
        "network.IDN_show_punycode" = true;
        "network.allow-experiments" = false;
        "network.captive-portal-service.enabled" = false;
        "network.cookie.cookieBehavior" = 1;
        "network.dns.disablePrefetch" = true;
        "network.dns.disablePrefetchFromHTTPS" = true;
        "network.http.referer.spoofSource" = true;
        "network.http.speculative-parallel-limit" = 0;
        "dom.security.https_only_mode" = true;
        "network.predictor.enable-prefetch" = false;
        "network.predictor.enabled" = false;
        "network.prefetch-next" = false;
        "network.trr.mode" = 5;
        "privacy.donottrackheader.enabled" = true;
        "privacy.donottrackheader.value" = 1;
        "privacy.firstparty.isolate" = true;
        "privacy.trackingprotection.cryptomining.enabled" = true;
        "privacy.trackingprotection.enabled" = true;
        "privacy.trackingprotection.fingerprinting.enabled" = true;
        "privacy.trackingprotection.pbmode.enabled" = true;
        "privacy.usercontext.about_newtab_segregation.enabled" = true;
        "security.ssl.disable_session_identifiers" = true;
        "services.sync.prefs.sync.browser.newtabpage.activity-stream.showSponsoredTopSite" = false;
        "browser.newtabpage.activity-stream.showSponsored" = false;
        "signon.autofillForms" = false;
        "toolkit.telemetry.archive.enabled" = false;
        "toolkit.telemetry.bhrPing.enabled" = false;
        "toolkit.telemetry.cachedClientID" = "";
        "toolkit.telemetry.enabled" = false;
        "toolkit.telemetry.firstShutdownPing.enabled" = false;
        "toolkit.telemetry.hybridContent.enabled" = false;
        "toolkit.telemetry.newProfilePing.enabled" = false;
        "toolkit.telemetry.prompted" = 2;
        "toolkit.telemetry.rejected" = true;
        "toolkit.telemetry.reportingpolicy.firstRun" = false;
        "toolkit.telemetry.server" = "";
        "toolkit.telemetry.shutdownPingSender.enabled" = false;
        "toolkit.telemetry.unified" = false;
        "toolkit.telemetry.unifiedIsOptIn" = false;
        "toolkit.telemetry.updatePing.enabled" = false;
        "webgl.disabled" = true;
        "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
        "webgl.renderer-string-override" = " ";
        "webgl.vendor-string-override" = " ";
        "browser.urlbar.update2.engineAliasRefresh" = true;
        "signon.passwordEditCapture.enabled" = false;
        "browser.search.hiddenOneOffs" = "Google,Yahoo,Bing,Amazon.com,Twitter";
        "browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts" = false;
        "browser.urlbar.trimURLs" = false;
        "findbar.modalHighlight" = true;
        "browser.fullscreen.autohide" = true;
        "browser.newtabpage.activity-stream.topSitesRows" = 0;
        "browser.urlbar.quickactions.enabled" = true;
        "pdfjs.annotationEditorMode" = 0;
        "pdfjs.annotationmode" = 2;
        "layers.acceleration.force-enabled" = true;
        "layout.css.backdrop-filter.enabled" = true;
        "svg.context-properties.content.enabled" = true;
      };

      search = {
        default = "DuckDuckGo";
        force = true;
        engines = {
          "Nixpkgs-Package Search" = {
            urls = [{ template = "https://search.nixos.org/packages?channel=unstable&size=250&sort=relevance&type=packages&query={searchTerms}"; }];
            iconUpdateURL = "https://nixos.org/favicon.png";
            updateInterval = 24 * 60 * 60 * 1000; # every day
            definedAliases = [ "@nps" ];
          };

          "Nixpkgs-Modules Search" = {
            urls = [{ template = "https://search.nixos.org/options?channel=unstable&size=200&sort=relevance&query={searchTerms}"; }];
            iconUpdateURL = "https://nixos.org/favicon.png";
            updateInterval = 24 * 60 * 60 * 1000; # every day
            definedAliases = [ "@nms" ];
          };

          "NixOS-Wiki Search" = {
            urls = [{ template = "https://nixos.wiki/index.php?search={searchTerms}&go=Go"; }];
            iconUpdateURL = "https://nixos.org/favicon.png";
            updateInterval = 24 * 60 * 60 * 1000; # every day
            definedAliases = [ "@nws" ];
          };

          "Home-Manager Search" = {
            urls = [{ template = "https://mipmip.github.io/home-manager-option-search/?query={searchTerms}"; }];
            iconUpdateURL = "https://nixos.org/favicon.png";
            updateInterval = 24 * 60 * 60 * 1000; # every day
            definedAliases = [ "@hms" ];
          };

          "GitHub-Code Search" = {
            urls = [{ template = "https://github.com/search?q={searchTerms}&type=code"; }];
            iconUpdateURL = "https://github.githubassets.com/favicons/favicon-dark.svg";
            updateInterval = 24 * 60 * 60 * 1000; # every day
            definedAliases = [ "@gcs" ];
          };

          "Noogle.dev Search" = {
            urls = [{ template = "https://noogle.dev/?term=%22{searchTerms}%22"; }];
            iconUpdateURL = "https://noogle.dev/favicon.png";
            updateInterval = 24 * 60 * 60 * 1000; # every day
            definedAliases = [ "@ngd" "@nog" ];
          };

          "Nixpkgs PRs" = {
            urls = [{ template = "https://nixpk.gs/pr-tracker.html?pr={searchTerms}"; }];
            iconUpdateURL = "https://nixos.org/favicon.png";
            updateInterval = 24 * 60 * 60 * 1000; # every day
            definedAliases = [ "@npr" ];
          };
        };

        order = [
          "DuckDuckGo"
        ];
      };

      userChrome = builtins.readFile ./configs/userChrome.css;

    };
  };

  librewolf = {
    enable = true;
    settings = {
      "gfx.webrender.all" = true;
      "gfx.webrender.enabled" = true;
      "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
      "layers.acceleration.force-enabled" = true;
      "layout.css.backdrop-filter.enabled" = true;
      "media.av1.enabled" = false;
      "media.ffmpeg.vaapi.enabled" = true;
      "media.hardware-video-decoding.force-enabled" = true;
    };
  };

  chromium = {
    enable = true;
    package = pkgs.brave;
    commandLineArgs = ["--enable-features=TouchpadOverscrollHistoryNavigation"];
    extensions = [
      {id = "cjpalhdlnbpafiamejdnhcphjbkeiagm";} # ublock origin
      {id = "dbepggeogbaibhgnhhndojpepiihcmeb";} # vimium
      {id = "eimadpbcbfnmbkopoojfekhnkhdbieeh";} # dark-reader
      {id = "lljedihjnnjjefafchaljkhbpfhfkdic";} # jiffy reader
      {id = "mnjggcdmjocbbbhaepdhchncahnbgone";} # sponsorblock
    ];
  };
};
#+end_src
**** userChrome.css
#+begin_src css :tangle ./gdk/configs/userChrome.css
/*
  __  __   _           _
 |  \/  | (_)         (_)
 | \  / |  _   _ __    _   _ __ ___     __ _
 | |\/| | | | | '_ \  | | | '_ ` _ \   / _` |
 | |  | | | | | | | | | | | | | | | | | (_| |
 |_|  |_| |_| |_| |_| |_| |_| |_| |_|  \__,_|


,*/


/* User changable variables */

:root {
	--tab-font-size: 0.8em; /* Font size of the tab labels */
	--tab-font-family: -apple-system, BlinkMacSystemFont, "Code D Haki", Roboto, Helvetica, Arial, sans-serif; /* The font used for the tab labels */
	--max-tab-width: none; /* The maximum width a tab in the tab bar can use. Set this to none for no limit */
	--show-titlebar-buttons: none; /* Hide the buttons (close/minimize/maximize) in the title bar. Required on some platforms (e.g macOS) to fully hide the title bar. `none` hides them, `block` shows them */
	--tab-height: 20px;
}

/* Minima Source Code. Here be dragons. */
/* Only change this if you know what you're doing */

.titlebar-buttonbox-container {
	display: var(--show-titlebar-buttons);
}

:root:not([customizing]) #TabsToolbar {
	margin-left: 1px !important;
	margin-right: 1px !important;
	border-radius: 0 !important;
	padding: 0 !important;
}
.tabbrowser-tab * {
	margin:0 !important;
	border-radius: 0 !important;
	font-family: var(--tab-font-family) !important;
}
.tabbrowser-tab {
	height: var(--tab-height);
	font-size: var(--tab-font-size) !important;
	min-height: 0 !important;
	align-items: center !important;
}
.tabbrowser-tab[fadein]:not([pinned]) {
	max-width: var(--max-tab-width) !important;
}
.tab-close-button, .new-tab-button, #firefox-view-button, #scrollbutton-up, .tab-secondary-label {
	display: none !important;
}
.tab-icon-image {
	height: auto !important;
	width: calc(var(--tab-height) / 1.5) !important;
	margin-right: 4px !important;
}

#tabs-newtab-button, #titlebar spacer {
	display: none !important;
}

:root:not([customizing]) #nav-bar
{
	min-height : 2.5em       !important;
	height     : 2.5em       !important;
	margin     : 0 0 -2.5em  !important;
	z-index    : -1000       !important;
	opacity    : 0           !important;
}

:root:not([customizing]) #nav-bar:focus-within
{
	z-index    : 1000        !important;
	opacity    : 1           !important;
}

#nav-bar{
	border-inline: var(--uc-window-drag-space-width) solid var(--toolbar-bgcolor);
}
#new-tab-button, #alltabs-button, #scrollbutton-down, .tab-loading-burst{
	display: none;
}
#titlebar {
	overflow: none !important;
}

/* Source file https://github.com/MrOtherGuy/firefox-csshacks/tree/master/chrome/hide_tabs_with_one_tab.css made available under Mozilla Public License v. 2.0
See the above repository for updates as well as full license text. */

/* Makes tabs toolbar items zero-height initially and sets enlarge them to fill up space equal to tab-min-height set on tabs. Optionally use privatemode_indicator_as_menu_button.css to replace main menu icon with private browsing indicator while tabs are hidden. */
/* Firefox 65+ only */

:root[sizemode="normal"] #nav-bar{ --uc-window-drag-space-width: 20px }

#titlebar{ -moz-appearance: none !important; }
#TabsToolbar{ min-height: 0px !important }

#tabbrowser-tabs, #tabbrowser-tabs > .tabbrowser-arrowscrollbox, #tabbrowser-arrowscrollbox{ min-height: 0 !important; }

:root:not([customizing]) #tabbrowser-tabs .tabs-newtab-button,
:root:not([customizing]) #tabs-newtab-button,
:root:not([customizing]) #TabsToolbar-customization-target > .toolbarbutton-1,
:root:not([customizing]) #TabsToolbar .titlebar-button{
	-moz-appearance: none !important;
	height: 0px;
	padding-top: 0px !important;
	padding-bottom: 0px !important;
	-moz-box-align: stretch;
	margin: 0 !important;
}

.accessibility-indicator,
.private-browsing-indicator{
	height: unset !important;
}
.accessibility-indicator > hbox{ padding-block: 0 !important }

#tabbrowser-tabs tab:only-of-type {
	visibility: collapse !important;
}

/* Button re-styling */
#tabs-newtab-button:hover,
#tabbrowser-tabs .tabs-newtab-button:hover{ background-color: var(--toolbarbutton-hover-background) }

#tabs-newtab-button > .toolbarbutton-icon,
#tabbrowser-tabs .tabs-newtab-button > .toolbarbutton-icon{
	padding: 0 !important;
	transform: scale(0.6);
	background-color: transparent !important;
}
/* Extra top padding  in maximized window */
@media (-moz-os-version: windows-win10){
	:root[sizemode="maximized"] #navigator-toolbox{ padding-top:7px !important; }
}
/* Fix window controls not being clickable */
:root[tabsintitlebar] #toolbar-menubar[autohide="true"][inactive]{
	transition: height 0ms steps(1) 80ms;
}
#nav-bar{
	border-inline: var(--uc-window-drag-space-width) solid var(--toolbar-bgcolor);
}
#navigator-toolbox {
	appearance: toolbar !important; /* Pretty much anything except none */
}

#+end_src
*** dunst
#+begin_src nix
services.dunst = {
  enable = true;
  iconTheme = {
    package = pkgs.papirus-icon-theme;
    name = "Papirus";
  };
  settings = {
    global = {
      monitor = 0;
      background = "#050505";
      frame_color = "#2e8b57";
      transparency = 0;
      follow = "none";
      width = 400;
      height = 900;
      idle_threshold = 120;
      origin = "top-right";
      offset = "10x50";
      scale = 0;
      notification_limit = 0;
      progress_bar = "true";
      alignment = "center";
      progress_bar_height = 10;
      progress_bar_frame_width = 1;
      progress_bar_min_width = 150;
      progress_bar_max_width = 500;
      indicate_hidden = "yes";
      separator_height = 2;
      padding = 10;
      horizontal_padding = 5;
      text_icon_padding = 4;
      frame_width = 3;
      separator_color = "frame";
      sort = "yes";
      font = "Code D Ace 16";
      line_height = 0;
      markup = "full";
      stack_duplicates = "true";
      vertical_alignment = "center";
      show_age_threshold = 60;
      ellipsize = "middle";
      ignore_newline = "no";
      show_indicators = "yes";
      icon_position = "left";
      max_icon_size = 32;
      sticky_history = "yes";
      history_length = 20;
      browser = "d-stuff";
      always_run_script = "true";
      title = "Dunst";
      class = "Dunst";
      corner_radius = 20;
      ignore_dbusclose = false;
      force_xwayland = "false";
      layer = "overlay";
      mouse_left_click = "do_action";
      mouse_middle_click = "do_action";
      mouse_right_click = "close_all";
    };

    reminder = {
      category = "reminder";
      background = "#33333390";
      foreground = "#ffffff";
      timeout = 0;
      script="d-notif";
    };

    urgency_low = {
      background = "#050505";
      foreground = "#ffffff";
      timeout = 5;
    };
    urgency_normal = {
      background = "#050505";
      foreground = "#ffffff";
      timeout = 6;
    };
    urgency_critical = {
      background = "#050505";
      foreground = "#ffffff";
      frame_color = "#f38ba8";
      timeout = 0;
    };
  };
};
#+end_src
*** Emacs
#+begin_src nix
# does not read local path properly. so ~/.local/bin does not work
# services.emacs = {
#   enable = true;
#   socketActivation.enable = true;
# };

programs.emacs = {
  enable = true;
  package = pkgs.emacs29-pgtk;
  extraPackages = (epkgs: (with epkgs; [
    treesit-grammars.with-all-grammars
    eat vundo undo-fu-session flycheck helpful flycheck-languagetool
    no-littering rainbow-delimiters rainbow-mode
    vertico orderless consult marginalia embark org-modern corfu cape corfu-terminal
    org olivetti nerd-icons nerd-icons-completion nerd-icons-dired async dirvish
    embark-consult consult-eglot consult-flycheck markdown-mode nix-mode
    reddigg hnreader howdoyou mingus magit webpaste org-present
    shrface shr-tag-pre-highlight nov devdocs-browser
    beframe denote tempel tempel-collection avy
    sdcv elfeed elfeed-org powerthesaurus jinx meow
    doom-modeline el-fetch ox-hugo envrc dashboard
    ement kind-icon speed-type vc-backup aria2
    ess org-re-reveal auctex julia-mode
  ])
  );
};

xdg.configFile."emacs/init.el".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/d-emacs/init.el";

xdg.configFile."emacs/early-init.el".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/d-emacs/early-init.el";

#+end_src
- Packages for emacs doc-view and other utilities
#+name: em-pkgs
#+begin_src nix :tangle no
  languagetool
  mupdf poppler_utils ghostscript # for doc-view?
#+end_src
*** games
#+name: game-pkgs
#+begin_src nix :tangle no
  openttd
  zeroad
  superTux
  # superTuxkart
#+end_src
*** gtk
#+begin_src nix
# cursor theme
home.pointerCursor = {
  name = "Bibata-Modern-Classic";
  package = pkgs.bibata-cursors;
  size = 24;
  gtk.enable = true;
};

gtk = {
  enable = true;

  theme = {
    name = "adw-gtk3-dark";
    package = pkgs.adw-gtk3;
  };

  iconTheme = {
    name = "Papirus-Dark";
    package = pkgs.papirus-icon-theme;
  };

  font = {
    name = "Code D Haki";
    size = 17;
  };

  gtk2.configLocation = "${config.xdg.configHome}/gtk-2.0/gtkrc";

  gtk3.extraConfig = {
    gtk-xft-antialias = 1;
    gtk-xft-hinting = 1;
    gtk-xft-hintstyle = "hintslight";
    gtk-xft-rgba = "rgb";
  };

  gtk2.extraConfig = ''
    gtk-xft-antialias=1
    gtk-xft-hinting=1
    gtk-xft-hintstyle="hintslight"
    gtk-xft-rgba="rgb"
    '';

};
#+end_src
*** mpd
#+begin_src nix
services = {
  mpd = {
    enable = true;
    musicDirectory = config.xdg.userDirs.music;
    network = {
      listenAddress = "127.0.0.1";
      port = 6600;
      startWhenNeeded = true;
    };
    extraConfig = ''
      audio_output {
        type            "pipewire"
        name            "PipeWire Sound Server"
      }
      auto_update "yes"
    '';
  };

  playerctld.enable = true;

};

# if mpd not working, check here
# home.sessionVariables.MPD_HOST = config.services.mpd.network.listenAddress;
#+end_src
*** media packages
#+name: media-pkgs
#+begin_src nix :tangle no
  # audio control
  pavucontrol
  playerctl
  pulsemixer
  pamixer
  transmission_4-gtk

  mpc_cli
  ytfzf ani-cli ytmdl freetube
  mangal
#+end_src
*** ncmpcpp
#+begin_src nix
programs = {
  ncmpcpp = {
    enable = true;

    settings = {
      ncmpcpp_directory = "${config.xdg.configHome}/ncmpcpp";
      lyrics_directory = "${config.xdg.dataHome}/lyrics";
      message_delay_time = "1";
      song_list_format = "{$4%a - }{%t}|{$8%f$9}$R{$3(%l)$9}";
      song_status_format = "$b{{$8'%t'}} $3by {$4%a{ $3in $7%b{ (%y)}} $3}|{$8%f}";
      song_library_format = "{%n - }{%t}|{%f}";
      alternative_header_first_line_format = "$b$1$aqqu$/a$9 {%t}|{%f} $1$atqq$/a$9$/b";
      alternative_header_second_line_format = "{{$4$b%a$/b$9}{ - $7%b$9}{ ($4%y$9)}}|{%D}";
      current_item_prefix = "$(cyan)$r$b";
      current_item_suffix = "$/r$(end)$/b";
      current_item_inactive_column_prefix = "$(magenta)$r";
      current_item_inactive_column_suffix = "$/r$(end)";
      playlist_display_mode = "columns";
      browser_display_mode = "columns";
      progressbar_look = "->";
      media_library_primary_tag = "album_artist";
      media_library_albums_split_by_date = "no";
      startup_screen = "media_library";
      display_volume_level = "no";
      ignore_leading_the = "yes";
      external_editor = "nvim";
      use_console_editor = "yes";
      empty_tag_color = "magenta";
      main_window_color = "white";
      progressbar_color = "black:b";
      progressbar_elapsed_color = "blue:b";
      statusbar_color = "red";
      statusbar_time_color = "cyan:b";
    };

    bindings =
      [
        { key = "K"; command = [ "select_item" "scroll_up" ]; }
        { key = "+"; command = "show_clock"; }
        { key = "="; command = "volume_up"; }
        { key = "j"; command = "scroll_down"; }
        { key = "k"; command = "scroll_up"; }
        { key = "ctrl-u"; command = "page_up"; }
        { key = "ctrl-d"; command = "page_down"; }
        { key = "u"; command = "page_up"; }
        { key = "d"; command = "page_down"; }
        { key = "h"; command = [ "previous_column" "jump_to_parent_directory" ]; }
        { key = "l"; command = [ "next_column" "enter_directory" "run_action" "play_item" ]; }
        { key = "."; command = "show_lyrics"; }
        { key = "n"; command = "next_found_item"; }
        { key = "N"; command = "previous_found_item"; }
        { key = "J"; command = "move_sort_order_down"; }
        { key = "K"; command = "move_sort_order_up"; }
        { key = "m"; command = [ "show_media_library" "toggle_media_library_columns_mode" ]; }
        { key = "t"; command = "show_tag_editor"; }
        { key = "v"; command = "show_visualizer"; }
        { key = "G"; command = "move_end"; }
        { key = "g"; command = "move_home"; }
        { key = "U"; command = "update_database"; }
        { key = "s"; command = [ "reset_search_engine" "show_search_engine" ]; }
        { key = "f"; command = [ "show_browser" "change_browse_mode" ]; }
        { key = "x"; command = "delete_playlist_items"; }
        { key = "P"; command = "show_playlist"; }
      ];

  };
#+end_src
*** mpv
#+begin_src nix
mpv = {
  enable = true;
  scripts = with pkgs.mpvScripts; [ mpris ];

  bindings = {
    l = "seek  5";
    h = "seek -5";
    k = "seek  30";
    j = "seek -30";
    J = "cycle sub";
    K = "cycle sub down";
  };

  config = {
    force-window = true;
    osc = true;
    hwdec = "auto-safe";
    vo = "gpu";
    profile = "gpu-hq";
    gpu-context = "wayland";
    sub-border-size = 4.0;
    sub-shadow-color = "0.0/0.0/0.0";
    sub-shadow-offset = 1;
    sub-auto = "fuzzy";
    msg-level = "all=error";
    # ytdl-format = "bestvideo[height<=?1080]+bestaudio/best";
    ytdl-format = "best";
    save-position-on-quit = true;
    slang = "eng,en,Eng,English";
    alang = "jp,jpn,en,eng";
    sub-font = "Impress BT";
    autofit = "50%";
    sub-font-size = "48";
    speed = "1.5";
  };
};
#+end_src
*** imv
#+begin_src nix
imv = {
  enable = true;
  settings = { # check man imv(5))
    options.background = "050505";
    aliases.x = "close";
    binds = {
      p = "prev";
      n = "next";
      "Shift+d" = "exec rm \"$imv_current_file\"; close";
      r = "exec mogrify -rotate 90 \"$imv_current_file\"";
    };
  };
};
#+end_src
*** yt-dlp
#+begin_src nix
yt-dlp = {
  enable = true;
  settings = {
    embed-thumbnail = true;
    embed-metadata = true;
    embed-subs = true;
    sub-langs = "all";
  };
};
}; # for enclosing programs set
#+end_src
*** ytfzf
#+begin_src nix
xdg.configFile."ytfzf/conf.sh".text = ''
      #video_pref="248+bestaudio/best"
      video_pref="[height<=1080]"
      sub_link_count=1
      show_thumbnails=0
      invidious_instance="https://vid.puffyan.us"
      external_menu () {
           #bemenu -W 0.98 -l 24 -p '  Play '
           rofi -dmenu -i -config ~/.config/rofi/list.rasi -p '󰑈  Play'
      }

      thumbnail_quality=high
      scrape=youtube
      #is_sort=1
      #search_sort_by=upload_date

    '';
#+end_src
*** home packages
#+name: hm-pkgs
#+begin_src nix :tangle no
  # misc
  libnotify
  # xdg-utils

  pcmanfm
  libreoffice
  # pandoc
  groff mupdf
  keepassxc

  # pioneer of web
  # mullvad-browser
  ungoogled-chromium
#+end_src
** rofi
#+begin_src nix
xdg.configFile."rofi/config.rasi".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/home/programs/d-rofi/config.rasi";

xdg.configFile."rofi/smenu.rasi".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/home/programs/d-rofi/smenu.rasi";

xdg.configFile."rofi/list.rasi".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/home/programs/d-rofi/list.rasi";

xdg.configFile."rofi/grid.rasi".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/home/programs/d-rofi/grid.rasi";
#+end_src
*** config.rasi
#+begin_src conf :tangle gdk/configs/rofi/config.rasi
,* {
bg-main:	     #05050597;
bg-dim:	     #12121240;
fg-main:	     #ffffff;
fg-dim:	     #D8DEE9;
fg-region:     #2e8b6d;

fg-region:        #6ae4b9;
heading-1:    #ab82ff;
heading-2:    #ffec8b;
heading-3:    #3cb6df;
heading-4:    #9aff9a;
heading-5:    #97ffff;
heading-6:    #ffa07a;
heading-7:    #eeb4b4;
heading-8:    #ee4000;
heading-9:    #cd96cd;
error:      #ee6363;
link:       #fcde69;
todo:       #54ff9f;
done:       #b4dddd;
code:       #77ee77;
verbatim:   #ee77ee;
clock:      #eedc82;
bg-tag:     #ffe1ff;
bracket:    #ffeeee;

}

configuration {
modi: "drun,run,window";

font: "Code D OnePiece 16";

case-insensitive: true;
cycle: true;
filter: "";
scroll-method: 0;
normalize-match: true;
show-icons: true;
icon-theme: "Papirus";
steal-focus: true;
matching: "normal";
tokenize: true;

drun-categories: "";
drun-match-fields: "name,generic,exec,categories,keywords";
drun-display-format: "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
drun-show-actions: true;
drun-use-desktop-cache: false;
drun-reload-desktop-cache: false;
drun {
/** Parse user desktop files. */
parse-user:   true;
/** Parse system desktop files. */
parse-system: true;
}

dmenu {
case-insensitive: true;
}

run-command: "{cmd}";
run-list-command: "";
run-shell-command: "{terminal} -e {cmd}";


disable-history: false;
sorting-method: "normal";
max-history-size: 25;


display-drun:               "󱓞 Apps";
display-run:                " Run";
display-filebrowser:        " Files";
drun-display-format:        "{name} [<span weight='light' size='small'><i>({generic})</i></span>]";
window-format:              "{w} · {c} · {t}";

sort: false;
threads: 0;
click-to-exit: true;


kb-primary-paste: "Control+V,Shift+Insert";
kb-secondary-paste: "Control+v,Control+y,Insert";
kb-clear-line: "Control+w";
kb-move-front: "Control+a";
kb-move-end: "Control+e";
kb-move-word-back: "Alt+b,Control+Left";
kb-move-word-forward: "Alt+f,Control+Right";
kb-move-char-back: "Left,Control+b";
kb-move-char-forward: "Right,Control+f";
kb-remove-word-back: "Control+Alt+h,Control+BackSpace";
kb-remove-word-forward: "Control+Alt+d";
kb-remove-char-forward: "Delete,Control+d";
kb-remove-char-back: "BackSpace,Shift+BackSpace,Control+h";
kb-remove-to-eol: "Control+k";
kb-remove-to-sol: "Control+u";
kb-accept-entry: "Control+j,Control+m,Return,KP_Enter";
kb-accept-custom: "Control+Return";
kb-accept-custom-alt: "Control+Shift+Return";
kb-accept-alt: "Shift+Return";
kb-delete-entry: "Shift+Delete";
kb-mode-next: "Shift+Right,Control+Tab";
kb-mode-previous: "Shift+Left,Control+ISO_Left_Tab";
kb-mode-complete: "Control+l";
kb-row-left: "Control+Page_Up";
kb-row-right: "Control+Page_Down";
kb-row-down: "Down,Control+n";
kb-page-prev: "Page_Up";
kb-page-next: "Page_Down";
kb-row-first: "Home,KP_Home";
kb-row-last: "End,KP_End";
kb-row-select: "Control+space";
kb-screenshot: "Alt+S";
kb-ellipsize: "Alt+period";
kb-toggle-case-sensitivity: "grave,dead_grave";
kb-toggle-sort: "Alt+grave";
kb-cancel: "Escape,Control+g,Control+bracketleft";
me-select-entry: "MousePrimary";
me-accept-entry: "MouseDPrimary";
me-accept-custom: "Control+MouseDPrimary";

}

,* {
border-colour:               @bg-tag;
handle-colour:               @fg-region;
background-colour:           @bg-main;
foreground-colour:           @fg-main;
alternate-background:        @bg-dim;
normal-background:           @bg-main;
normal-foreground:           @fg-main;
urgent-background:           @verbatim;
urgent-foreground:           @bg-main;
active-background:           @fg-dim;
active-foreground:           @bg-main;
selected-normal-background:  @fg-region;
selected-normal-foreground:  @bg-main;
selected-urgent-background:  @fg-dim;
selected-urgent-foreground:  @bg-main;
selected-active-background:  @verbatim;
selected-active-foreground:  @fg-main;
alternate-normal-background: @bg-main;
alternate-normal-foreground: @fg-main;
alternate-urgent-background: @verbatim;
alternate-urgent-foreground: @fg-main;
alternate-active-background: @bg-dim;
alternate-active-foreground: @fg-main;
}

window {
transparency:                "real";
location:                    center;
anchor:                      center;
fullscreen:                  false;
width:                       50%;
height:			     60%;
x-offset:                    0px;
y-offset:                    0px;

enabled:                     true;
margin:                      0px;
padding:                     0px;
border:                      2px solid;
border-radius:               20px;
border-color:                @border-colour;
cursor:                      "default";
background-color:            @background-colour;

/* Angle Linear Gradient */
// background-image:          linear-gradient(45, #eb0, #ebe, indigo);
}

mainbox {
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     40px;
border:                      0px solid;
border-radius:               0px 0px 0px 0px;
border-color:                @border-colour;
background-color:            transparent;
children:                    [ "inputbar", "message", "listview", "mode-switcher" ];
}

inputbar {
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
children:                    [ "prompt", "textbox-prompt-colon", "entry" ];
}

prompt {
enabled:                     true;
background-color:            inherit;
text-color:                  inherit;
}
textbox-prompt-colon {
enabled:                     true;
expand:                      false;
str:                         "::";
background-color:            inherit;
text-color:                  inherit;
}
entry {
enabled:                     true;
background-color:            inherit;
text-color:                  inherit;
cursor:                      text;
placeholder:                 "Search...";
placeholder-color:           inherit;
}
num-filtered-rows {
enabled:                     true;
expand:                      false;
background-color:            inherit;
text-color:                  inherit;
}
textbox-num-sep {
enabled:                     true;
expand:                      false;
str:                         "/";
background-color:            inherit;
text-color:                  inherit;
}
num-rows {
enabled:                     true;
expand:                      false;
background-color:            inherit;
text-color:                  inherit;
}
case-indicator {
enabled:                     true;
background-color:            inherit;
text-color:                  inherit;
}

listview {
enabled:                     true;
columns:                     2;
lines:                       10;
cycle:                       true;
dynamic:                     true;
scrollbar:                   false;
layout:                      vertical;
reverse:                     false;
fixed-height:                false;
fixed-columns:               false;

spacing:                     5px;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
cursor:                      "default";
}
scrollbar {
handle-width:                10px ;
handle-color:                @handle-colour;
border-radius:               10px;
background-color:            @alternate-background;
}

element {
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     5px 10px;
border:                      0px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
cursor:                      pointer;
}
element normal.normal {
background-color:            var(normal-background);
text-color:                  var(normal-foreground);
}
element normal.urgent {
background-color:            var(urgent-background);
text-color:                  var(urgent-foreground);
}
element normal.active {
background-color:            var(active-background);
text-color:                  var(active-foreground);
}
element selected.normal {
background-color:            var(selected-normal-background);
text-color:                  var(selected-normal-foreground);
}
element selected.urgent {
background-color:            var(selected-urgent-background);
text-color:                  var(selected-urgent-foreground);
}
element selected.active {
background-color:            var(selected-active-background);
text-color:                  var(selected-active-foreground);
}
element alternate.normal {
background-color:            var(alternate-normal-background);
text-color:                  var(alternate-normal-foreground);
}
element alternate.urgent {
background-color:            var(alternate-urgent-background);
text-color:                  var(alternate-urgent-foreground);
}
element alternate.active {
background-color:            var(alternate-active-background);
text-color:                  var(alternate-active-foreground);
}
element-icon {
background-color:            transparent;
text-color:                  inherit;
size:                        24px;
cursor:                      inherit;
}
element-text {
background-color:            transparent;
text-color:                  inherit;
highlight:                   inherit;
cursor:                      inherit;
vertical-align:              0.5;
horizontal-align:            0.0;
}

mode-switcher{
enabled:                     true;
spacing:                     10px;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
}
button {
padding:                     5px 10px;
border:                      0px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            @alternate-background;
text-color:                  inherit;
cursor:                      pointer;
}
button selected {
background-color:            var(selected-normal-background);
text-color:                  var(selected-normal-foreground);
}

message {
enabled:                     true;
margin:                      0px;
padding:                     0px;
border:                      0px solid;
border-radius:               0px 0px 0px 0px;
border-color:                @border-colour;
background-color:            transparent;
text-color:                  @foreground-colour;
}
textbox {
padding:                     5px 10px;
border:                      0px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            @alternate-background;
text-color:                  @foreground-colour;
vertical-align:              0.5;
horizontal-align:            0.0;
highlight:                   none;
placeholder-color:           @foreground-colour;
blink:                       true;
markup:                      true;
}
error-message {
padding:                     10px;
border:                      2px solid;
border-radius:               20px;
border-color:                @border-colour;
background-color:            @background-colour;
text-color:                  @foreground-colour;
}

#+end_src
*** grid.rasi
#+begin_src conf :tangle gdk/configs/rofi/grid.rasi
@import				 "config.rasi"
window {
location:                    center;
anchor:                      center;
fullscreen:                  true;
width:                       80%;
height:			     80%;
}

listview {
enabled:                     true;
columns:                     14;
lines:                       20;
}
#+end_src
*** list.rasi
#+begin_src conf :tangle gdk/configs/rofi/list.rasi
@import				 "config.rasi"
window {
location:                    center;
anchor:                      center;
fullscreen:                  false;
width:                       85%;
height:			     80%;
}

listview {
enabled:                     true;
columns:                     1;
lines:                       22;
}

#+end_src
*** smenu.rasi
#+begin_src conf :tangle gdk/configs/rofi/smenu.rasi
@import				 "config.rasi"
window {
location:                    center;
anchor:                      center;
fullscreen:                  false;
width:                       50%;
height:			     60%;
}

listview {
enabled:                     true;
columns:                     2;
lines:                       20;
}

#+end_src
** sioyek
- the best pdf reader
#+begin_src nix
programs.sioyek = {
  enable = true;
  bindings = {
    "move_up" = "k";
    "move_down" = "j";
    "move_left" = "h";
    "move_right" = "l";
    "screen_down" = [ "d" "" ];
    "screen_up" = [ "u" "" ];
    "fit_to_page_width" = "<f9>";
    "fit_to_page_width_smart" = "<f10>";
    "toggle_fullscreen" = [ "f" "<f11>"  ];
    "quit" = "q";
    "toggle_custom_color" = "<f8>";
    "toggle_highlight" = "<f1>";
    "command" = "<A-x>";
    "toggle_dark_mode" = "i";
    "toggle_presentation_mode" = "<f5>";
    "toggle_statusbar" = "B";
  };

  config = {
    "background_color" = "0.0 0.0 0.0";
    "dark_mode_background_color" = "0.0 0.0 0.0";
    "custom_background_color" = "0.180 0.204 0.251";
    "custom_text_color" = "0.847 0.871 0.914";
    "dark_mode_contrast" = "0.8";
    "text_highlight_color" = "1.0 1.0 0.0";
    "search_url_s" = "https://scholar.google.com/scholar?q";
    "search_url_l" = "http://gen.lib.rus.ec/scimag/?q";
    "search_url_g" = "https://www.google.com/search?q";
    "middle_click_search_engine" = "s";
    "shift_middle_click_search_engine" = "l";
    "zoom_inc_factor" = "1.2";
    "flat_toc" = "0";
    "should_launch_new_instance" = "1";
    "should_launch_new_window" = "1";
    "default_dark_mode" = "1";
    "sort_bookmarks_by_location" = "1";
    "ui_font" = "'Code D Haki'";
    "font_size" = "24";
    "wheel_zoom_on_cursor" = "1";
    "status_bar_font_size" = "22";
    "collapsed_toc" = "1";
    "ruler_mode" = "1";
    "single_click_selects_words" = "1";
    "item_list_prefix" = ">";
    "#ignore_whitespace_in_presentation_mode" = "0";
    "prerender_next_page_presentation" = "1";
  };
};
#+end_src
** qt
- kdeconnect
#+begin_src nix
qt = {
  enable = true;
  platformTheme = "gtk3";
  style.name = "adwaita-dark";
};

services.kdeconnect.enable = true;

#+end_src
** xdg user config
#+begin_src nix
xdg = {
  enable = true;
  cacheHome = config.home.homeDirectory + "/.local/cache";

  mimeApps = let
    browser = ["d-stuff.desktop"];
  in {
    enable = true;

    defaultApplications = {
      "application/x-extension-htm" = browser;
      "application/x-extension-html" = browser;
      "application/x-extension-shtml" = browser;
      "application/x-extension-xht" = browser;
      "application/x-extension-xhtml" = browser;
      "application/xhtml+xml" = browser;
      "text/html" = browser;
      "x-scheme-handler/about" = browser;
      "x-scheme-handler/chrome" = ["chromium-browser.desktop"];
      "x-scheme-handler/ftp" = browser;
      "x-scheme-handler/http" = browser;
      "x-scheme-handler/https" = browser;
      "x-scheme-handler/unknown" = browser;

      "audio/*" = ["mpv.desktop"];
      "video/*" = ["mpv.dekstop"];
      "image/*" = ["imv.desktop"];
      "application/json" = browser;
      "application/pdf" = ["sioyek.desktop"];
      "x-scheme-handler/magnet" = ["d-stuff.desktop"];
      "application/epub+zip" = ["sioyek.desktop"];
      "application/zip" = ["sioyek.desktop"];
      "application/x.bittorrent" = ["d-stuff.desktop"];
    };

    associations.added = {
      "x-scheme-handler/magnet" = ["d-stuff.desktop"];
    };
  };

  userDirs = {
    enable = true;
    createDirectories = true;
    documents =  "${config.home.homeDirectory}/docs";
    download = "${config.home.homeDirectory}/dloads";
    videos = "${config.home.homeDirectory}/vids";
    music = "${config.home.homeDirectory}/music";
    pictures = "${config.home.homeDirectory}/pics";
    extraConfig = {
      XDG_SCREENSHOTS_DIR = "${config.xdg.userDirs.pictures}/sshots";
    };
  };

};

xdg.dataFile."applications/d-stuff.desktop".text = ''
  [Desktop Entry]
  Type=Application
  Name=Stuff Handler
  Exec=d-stuff %U
  '';

#+end_src
** EOF
#+begin_src nix
# NEVER EVER TOUCH IT ⚠️
home.stateVersion = "23.05"; # OR CRY WITH BROKE SYS
}

# configuration.nix ends here
#+end_src
