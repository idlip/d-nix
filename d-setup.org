#+DATE: <2023-02-22 Wed>
#+TITLE: D Nixyfied Flaky Station
#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil
#+PROPERTY: :tangle yes :noweb yes header-args :tangle-mode (identity #o444) :mkdirp yes
#+auto_tangle: t



* Description
--------
This file is organized configuration for whole system, where you can write everything for Nixos and Home-manager configuration.
This might only make sense if you use emacs, or else nixos modular flakes is a better choice, but there you one advantage of either including or excluding a file, here you have to uncomment blocks to remove a section.

I was using modular setup before, but it is painful to manage directory and remember what all file were there.

The advantage of this setup is, you can add TODO and document everything here, so org stands for its name ==> *Organize Life*

Also, the tangled files are in read-only mode, so you can avoid editing it, unless you were trying/testing something.

* System Configuration
:PROPERTIES:
:header-args: :tangle-mode (identity #o444) :tangle ./gdk/configuration.nix :mkdir yes
:END:
     # FIXME edit 'gdk' to your HOSTNAME. configuration.nix will be created in HOSTNAME directory (will be created as you tangle)

Machine a.k.a Host (if you manage multi hosts or PC) specific setup and configuration goes
here.

** Preamble
*** Tangled File Warning
Places a warning at the top of the target file.
#+begin_src nix
  # WARNING : This file was generated by d-org.org
  # DO NOT MODIFY THIS FILE!
  # Any changes made here will be overwritten.
#+end_src
*** Inherited Sources
#+begin_src nix
  { inputs, lib, self, config, pkgs, ... }:

#+end_src
** Main Body
*** Opening Statement
Opening brace that contains the rest of the configuration file.
#+begin_src nix
  {
#+end_src
*** Imports
Copy your system hardware-configuration file to #FIXME  HOSTNAME/hardware-configuration.nix. 
It will be usually the /etc/nixos/hardware-configuration.nix  
It will be generated when you do while first install ~sudo nixos-generate-config~
#+begin_src nix
  imports = [
    ./hardware-configuration.nix
  ];
#+end_src
*** System core
#+begin_src nix
  # Should move this line probably, it only does make use of starship to bash shell init
  programs = {
    bash.promptInit = ''eval "$(${pkgs.starship}/bin/starship init bash)"'';
  };

  # compresses half the ram for use as swap
  zramSwap = {
    enable = true;
    memoryPercent = 50 ;
    algorithm = "zstd";
  };
   # As the name suggest.
  sound = {
    enable = true;
    mediaKeys.enable = true;
  };

  # obviously your timezone here. Have a nice day or good night sleep ;)
  # Don't waste more time on nixos lol, be healthy and have some sleep. Stay helathy!
  time.timeZone = "Asia/Kolkata";

  # This code is from nixos wiki for Btrfs. Depends on which file system you use.
  # Refer nixos wiki once.
  fileSystems = {
    "/".options = [ "compress=zstd" ];
    "/home".options = [ "compress=zstd" ];
    "/nix".options = [ "compress=zstd" "noatime" ];
  };  

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
  # Sets big font for bootloader, as I have small laptop. You can remove font and packages line to have default vanilla font.
  console = {
    earlySetup = true;
    font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
    packages = with pkgs; [ terminus_font ];
    keyMap = "us";
  };


#+end_src
*** Nix Settings
#+begin_src nix
  environment = {
    # set channels (backwards compatibility)
    etc = {
      "nix/flake-channels/nixpkgs".source = inputs.nixpkgs;
      "nix/flake-channels/home-manager".source = inputs.home-manager;
    };
  };

  # As name implies, allows Unfree packages. You can enable in case you wanna install non-free tools (eg: some fonts lol)
  nixpkgs = {
    config = {
      allowUnfree = true;
      allowBroken = false;
    };

  };

  # faster rebuilding
  documentation = {
    enable = true;
    doc.enable = false;
    man.enable = true;
    dev.enable = false;
  };

  # Collect garbage and delete generation every 6 day. Will help to get some storage space.
  # Better to atleast keep it for few days, as you do major update (unstable), if something breaks you can roll back.
  nix = {
    gc = {
      automatic = true;
      dates = "daily";
      options = "--delete-older-than 6d";
    };

    # pin the registry to avoid downloading and evaling a new nixpkgs version every time
    registry = lib.mapAttrs (_: v: {flake = v;}) inputs;

    # set the path for channels compat
    nixPath = [
      "nixpkgs=/etc/nix/flake-channels/nixpkgs"
      "home-manager=/etc/nix/flake-channels/home-manager"
    ];

    # Free up to 1GiB whenever there is less than 100MiB left.
    extraOptions = ''
      experimental-features = nix-command flakes
      keep-outputs = true
      warn-dirty = false
      keep-derivations = true
      min-free = ${toString (100 * 1024 * 1024)}
      max-free = ${toString (1024 * 1024 * 1024)}
    '';

    # substituters are cachix domain, where some package binaries are available (eg : Hyprland & Emacs 30)
    # NOTE : You should do a simple rebuild with these substituters line and then install packages from there, as a rebuild will register these cachix into /etc/nix/nix.conf file. If you continue without rebuild, Hyprland and Emacs will start compiling. So rebuild and make sure you see these substituters in /etc/nix/nix.conf and then add packages.
    settings = {
      auto-optimise-store = true;
      builders-use-substitutes = true;
      trusted-users = ["root" "@wheel"];
      max-jobs = "auto";
      # use binary cache, its not gentoo
      substituters = [
        "https://cache.nixos.org"
        "https://nixpkgs-wayland.cachix.org"
        "https://nix-community.cachix.org"
        "https://hyprland.cachix.org"
      ];
      # Keys for the sustituters cachix
      trusted-public-keys = [
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        "nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="
      ];
    };
  };
  system.autoUpgrade.enable = false;
  system.stateVersion = "22.11"; # DONT TOUCH THIS (See about state version on nixos manual)

#+end_src
*** Boot loader
Configure the boot loader to use UEFI.
#FIXME Use grub if you prefer that.
#+begin_src nix
  boot = {
    cleanTmpDir = true;
    # Uses bleeding edge latest kernel. 
    kernelPackages = pkgs.linuxPackages_latest;

    loader = {
      # FIXME change first line if you want to use Grub
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
      timeout = 5;
    };
  };
#+end_src
*** Network
#+begin_src nix
  networking = {
    # #FIXME Change it your choice of HOSTNAME
    hostName = "gdk";
    # dns
    networkmanager = {
      enable = true;
      unmanaged = ["docker0" "rndis0"];
      wifi.macAddress = "random";
    };

    # Killer feature, Its a must these days.
    # Adblocker!! It uses steven black hosts.
    stevenBlackHosts = {
      enable = true;
      blockFakenews = true;
      blockGambling = true;
      blockPorn = true;
      blockSocial = false;
    };

    # Firewall uses iptables underthehood
    # Rules are for syncthing
    firewall = {
      enable = true;
      # For syncthing
      allowedTCPPorts = [8384 22000];
      allowedUDPPorts = [22000 21027];
      allowPing = false;
      logReversePathDrops = true;
    };
  };
  # Avoid slow boot time
  systemd.services.NetworkManager-wait-online.enable = false;
#+end_src
*** Secure core
Some security features which are good enough to have.
I use ~doas~ replacing ~sudo~. Even if you type sudo in terminal it will use doas
#+begin_src nix
  security.rtkit.enable = true;
  security.polkit.enable = true;
  security.sudo.enable = false;
  # Configure doas
  security.doas = {
    enable = true;
    extraRules = [{
      users = [ "i" ];
      keepEnv = true;
      persist = true;  
    }];
  };
#+end_src
*** Services
Certain services, just enable = true; gets the work done for most of the stuffs.
#+begin_src nix
  services = {
    dbus = {
      packages = with pkgs; [dconf udisks2 gcr];
      enable = true;
    };
    # udev.packages = with pkgs; [gnome.gnome-settings-daemon];

    journald.extraConfig = ''
      SystemMaxUse=50M
      RuntimeMaxUse=10M
    '';
    # To mount drives with udiskctl command
    udisks2.enable = true;
    gnome.at-spi2-core.enable = true;

    tlp.enable = true;                      # TLP and auto-cpufreq for power management
    auto-cpufreq.enable = true;

    # For Laptop, make lid close and power buttom click to suspend
    logind = {
      lidSwitch = "suspend";
      extraConfig = ''
    HandlePowerKey = suspend
    '';
    };

    # See if you want bluetooth setup
    # blueman.enable = true;

    # For android file transfer via usb, or better check on KDE connect 
    gvfs.enable = true;

    # configuring syncthing
    syncthing = {
      enable = true;
      user = "i";
      configDir = "/home/i/.config/syncthing";
      overrideDevices = true;     # overrides any devices added or deleted through the WebUI
      overrideFolders = true;     # overrides any folders added or deleted through the WebUI
      devices = {
        "realme" = { id = "JAJECCB-UC73TPE-KJFHYK4-KZT2A74-BEQSYVG-LAKP34N-V2G5E6X-TH2ZQQQ"; };
        #"device2" = { id = "DEVICE-ID-GOES-HERE"; };
      };
      folders = {
        "music-jazz" = {        # Name of folder in Syncthing, also the folder ID
          path = "/home/i/music";    # Which folder to add to Syncthing
          devices = [ "realme" ];      # Which devices to share the folder with
        };
        "syncs" = {
          path = "/home/i/sync";
          devices = [ "realme" ];
          ignorePerms = false; 
        };
        "essentials" = {
          path = "/home/i/d/Essentials";
          devices = [ "realme" ];
        };
      };
    };

    fstrim.enable = true;

    # This makes the user 'i' to autologin in all tty
    # Depends on you if you want login manager or prefer entering password manually
    # FIXME Change 'i' to your USERNAME
    getty.autologinUser = "i" ;

    atd.enable = true;

    # Pipewire setup, just these lines enought to make sane default for it
    pipewire = {
      enable = true;
      alsa = {
        enable = true;
      };
      wireplumber.enable = true;
      pulse.enable = true;
    };
  };


#+end_src
**** Systemd
Make systemd services if required
#+begin_src nix

  systemd.services = {
    seatd = {
      enable = true;
      description = "Seat management daemon";
      script = "${pkgs.seatd}/bin/seatd -g wheel";
      serviceConfig = {
        Type = "simple";
        Restart = "always";
        RestartSec = "1";
      };
      wantedBy = ["multi-user.target"];
    };
  };

#+end_src
*** System Packages
Install packages need by all users system wide.
#+begin_src nix
  environment.systemPackages = with pkgs; [
    firefox
    gitFull
    ntfs3g
    neovim
  ];
#+end_src

*** Overlay
Use overlay for emacs and Nix user repo (firefox extensions)
You can add your choice of overlay (eg: Discord, helix...)
#+begin_src nix
  # Add other overlays here
  nixpkgs.overlays = with inputs; [emacs-overlay.overlay  ];
#+end_src
*** Opengl Hardware
To use Opengl hardware acceleration using VAAPI.
Useful to use in firefox and mpv.
#+begin_src nix
  nixpkgs.config.packageOverrides = pkgs: {
    vaapiIntel = pkgs.vaapiIntel.override { enableHybridCodec = true; };
  };
  hardware = {
    opengl = {
      enable = true;
      extraPackages = with pkgs; [
        vaapiVdpau
        libvdpau-va-gl
        intel-media-driver
        vaapiIntel
      ];
    };
  };
#+end_src
*** System Fonts
Enables additional fonts system wide
#+begin_src nix
  fonts = {
    fonts = with pkgs; [
      emacs-all-the-icons-fonts
      #material-icons comic-mono material-design-icons
      # weather-icons font-awesome
      symbola iosevka-comfy.comfy noto-fonts-emoji comic-mono
      (nerdfonts.override {fonts = ["VictorMono" "FiraCode" "IBMPlexMono" "JetBrainsMono"];})
    ];

    enableDefaultFonts = false;

    # this fixes emoji stuff
    fontconfig = {
      defaultFonts = {
        monospace = [
          "ComicCodeLigatures"
          "FiraCode Nerd Font"
          "JetBrainsMono Nerd Font"
          "Noto Color Emoji"
        ];
        sansSerif = ["Iosevka Comfy" "BlexMono Nerd Font"];
        serif = ["VictorMono Nerd Font" "BlexMono Nerd Font"];
        emoji = ["Noto Color Emoji" "Symbola" "Fira Code Nerd Font" ];
      };
    };
  };
#+end_src
*** Env
#+begin_src nix
  environment = {

    variables = {
      NIXOS_OZONE_WL = "1";
      EDITOR = "nvim";
      BROWSER = "firefox";
      MOZ_ENABLE_WAYLAND = "1";

    };

  };

#+end_src
*** System Alias's
Adds command alias's to the system interactive shell
#+begin_src nix
  environment.interactiveShellInit = ''
                                   
  '';
#+end_src
*** System Users
**** i
Configure system permission for the primary user
#+begin_src nix
  # FIXME Change 'i' to your USERNAME
    users.users.i = {
    isNormalUser = true;
    extraGroups = [
      "wheel"
      "gitea"
      "docker"
      "systemd-journal"
      "audio"
      "plugdev"
      "wireshark"
      "video"
      "input"
      "lp"
      "networkmanager"
      "power"
      "nix"
    ];
    uid = 1000;
    # Use fish if you prefer it
    shell = pkgs.zsh;

    # Or else login to root (which you will create while rebuilding) and run passwd USERNAME 
    # initialPassword = "changeme";
  };


#+end_src
*** Closing Statement
End of Nix Configuration block
#+begin_src nix
  }
#+end_src
* User Configurations
User specific configuration
** i-home
My personal user configuration.
*** Nix Home-Manger
:PROPERTIES:
:header-args: :tangle ./gdk/i-home/homeman.nix :tangle-mode (identity #o444) :mkdirp yes
:END:
#FIXME Under :tangle ... Change 'gdk' to your HOSTNAME and name directory i-home/homeman.nix as you want.
**** Default-nix
#+begin_src nix :tangle ./gdk/i-home/default.nix :tangle-mode  (identity #o444) :mkdirp yes
  # FIXME Chaneg hostname and directory under :tangle ...
  {
    inputs, pkgs, config, lib, self, ...}:

  {
    config.home.stateVersion = "22.11";
    config.home.extraOutputsToInstall = ["doc" "devdoc"];
    imports = [
      ./homeman.nix
      inputs.hyprland.homeManagerModules.default
      # inputs.nur.nixosModules.nur
    ];
  }

#+end_src
**** Preamble
***** Tangled File Warning
Places a warning at the top of the target file.
#+begin_src nix
  # WARNING : This file was generated by d-setup.org
  # DO NOT MODIFY THIS FILE!
  # Any changes made here will be overwritten.
#+end_src
***** Inherited Sources
#+begin_src nix
  { inputs, pkgs, self, lib, config, ... }:
#+end_src
**** Main Body
***** Opening Statement
Opening brace that contains the rest of the configuration file.
#+begin_src nix
  {
#+end_src
***** Shell Configuration
****** System Shell
#+begin_src nix
  home.sessionVariables.STARSHIP_CACHE = "${config.xdg.cacheHome}/starship";
  programs = {
    exa.enable = true;
    starship = {
      enable = true;
      enableZshIntegration = true;
      settings = {
        add_newline = true;
        scan_timeout = 5;
        character = {
          error_symbol = " [](#df5b61)";
          success_symbol = "[](#6791c9)";
          vicmd_symbol = "[](bold yellow)";
          format = "[   $directory$all$character  ](bold)";
        };
        git_commit = {commit_hash_length = 4;};
        line_break.disabled = false;
        lua.symbol = "[](blue) ";
        python.symbol = "[](blue) ";
        directory.read_only = " ";
        nix_shell.symbol = " ";
        hostname = {
          ssh_only = true;
          format = "[$hostname](bold blue) ";
          disabled = false;
        };
      };
    };

    fish = {
      enable = true;
      shellInit = ''
      starship init fish | source
      '';
      plugins = with pkgs; [
        {
          name = "autopair.fish";
          src = fishPlugins.autopair-fish;
        }
      ];
    };

    zsh = {
      enable = true;
      enableCompletion = true;
      enableAutosuggestions = true;
      enableSyntaxHighlighting = true;
      autocd = true;
      dotDir = ".config/shell";
      sessionVariables = {
        LC_ALL = "en_US.UTF-8";
        ZSH_AUTOSUGGEST_USE_ASYNC = "true";
        BEMENU_OPTS = "-i -l 10 -p '  Apps : ' -c -B 2 -W 0.5 --hp 15 --fn 'ComicCodeLigatures 20' --nb '#00000099' --ab '#00000099' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#fff0f5' --hf '#000000' --fb '#00000099' --ff '#a6e3a1' --tb '#00000099' --tf '#f9e2af' ";
        NIXOS_OZONE_WL = "1";
        BROWSER = "librewolf";
        MOZ_ENABLE_WAYLAND = "1";
      };
      completionInit = ''
        eval "$(starship init zsh)"

        autoload -U colors && colors	# Load colors
        setopt autocd		# Automatically cd into typed directory.
        stty stop undef		# Disable ctrl-s to freeze terminal.
        setopt interactive_comments

        export PATH="$PATH:$HOME/.local/bin"
        export PATH="$PATH:$HOME/.DLIP/BIN"

        export STARDICT_DATA_DIR="$HOME/.local/share/stardict"

        # Basic auto/tab complete:
        autoload -U compinit
        zstyle ':completion:*' menu select
        zmodload zsh/complist
        compinit
        _comp_options+=(globdots)		# Include hidden files.


        # Use vim keys in tab complete menu:
        bindkey -M menuselect 'h' vi-backward-char
        bindkey -M menuselect 'k' vi-up-line-or-history
        bindkey -M menuselect 'l' vi-forward-char
        bindkey -M menuselect 'j' vi-down-line-or-history
        bindkey -v '^?' backward-delete-char

        bindkey -e

      '';
      envExtra = ''
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
  export PATH="$PATH:$HOME/.DLIP/BIN"
  export PATH="$PATH:$HOME/.local/bin/d"
  export EDITOR="emacsclient -nw -a 'nvim'"
  export VISUAL=$EDITOR
  export GRIM_DEFAULT_DIR="/home/i/pics/sshots/"

      if [ -z $DISPLAY ] && [ "$(tty)" = "/dev/tty1" ]; then
        exec Hyprland
      fi

      '';
      initExtra = ''

        function ytdl() {
            yt-dlp --embed-metadata --embed-subs -f 22 "$1"
        }

        function run() {
          nix run nixpkgs#$@
        }

        command_not_found_handler() {
          printf 'Command not found ->\033[01;32m %s\033[0m \n' "$0" >&2
          return 127
                                                        }

        clear
      '';
      history = {
        save = 1000;
        size = 1000;
        expireDuplicatesFirst = true;
        ignoreDups = true;
        ignoreSpace = true;
      };

      dirHashes = {
        docs = "$HOME/docs";
        notes = "$HOME/docs/notes";
        dotfiles = "$HOME/dotfiles";
        dl = "$HOME/dloads";
        vids = "$HOME/vids";
        music = "$HOME/music";
        media = "/run/media/$USER";
      };

      shellAliases = let
        # for setting up license in new projects

      in
        with pkgs; {
          rebuild = "doas nix-store --verify; pushd ~dotfiles && doas nixos-rebuild switch --flake .# && notify-send \"Done\"&& bat cache --build; popd";
          cleanup = "doas nix-collect-garbage --delete-older-than 7d";
          bloat = "nix path-info -Sh /run/current-system";
          ytmp3 = ''
            ${lib.getExe yt-dlp} -x --continue --add-metadata --embed-thumbnail --audio-format mp3 --audio-quality 0 --metadata-from-title="%(artist)s - %(title)s" --prefer-ffmpeg -o "%(title)s.%(ext)s"'';
          cat = "${lib.getExe bat} --style=plain";
          grep = lib.getExe ripgrep;
          du = lib.getExe du-dust;
          ps = lib.getExe procs;
          m = "mkdir -p";
          fcd = "cd $(find -type d | fzf)";
          ls = "${lib.getExe exa} -h --git --icons --color=auto --group-directories-first -s extension";
          l = "ls -lF --time-style=long-iso --icons";
          la = "${lib.getExe exa} -lah --tree";
          tree = "${lib.getExe exa} --tree --icons --tree";
          http = "${lib.getExe python3} -m http.server";
          burn = "pkill -9";
          diff = "diff --color=auto";
          kys = "doas shutdown now";
          killall = "pkill";
          ".1" = "cd ..";
          ".2" = "cd ../..";
          ".3" = "cd ../../..";
          c = "clear";
          # helix > nvim
          v = "nvim";
          emd = "pkill emacs; emacs --daemon";
          ytdl = "yt-dlp -f 22";
          e = "emacsclient -t";
          cp="cp -iv";
          mv="mv -iv";
          rm="rm -vI";
          bc="bc -ql";
          mkd="mkdir -pv";
          ytfzf="ytfzf -Df";
          hyprcaps="hyprctl keyword input:kb_options caps:caps";
          gc = "git clone --depth=1";
          sudo = "doas";
        };

      plugins = with pkgs; [
        {
          name = "zsh-nix-shell";
          src = zsh-nix-shell;
          file = "share/zsh-nix-shell/nix-shell.plugin.zsh";
        }

        {
          name = "zsh-autopair";
          file = "zsh-autopair.plugin.zsh";
          src = fetchFromGitHub {
            owner = "hlissner";
            repo = "zsh-autopair";
            rev = "34a8bca0c18fcf3ab1561caef9790abffc1d3d49";
            sha256 = "1h0vm2dgrmb8i2pvsgis3lshc5b0ad846836m62y8h3rdb3zmpy1";
          };
        }
      ];
    };
  };

#+end_src
***** User Packages
Installs packages for this user only.
****** Opening Statement
#+begin_src nix
  home.packages = with pkgs; [
#+end_src
****** Wayland
#+begin_src nix
  # wayland
  libnotify libsixel wofi seatd bemenu
  wf-recorder brightnessctl pamixer slurp grim
  wl-clipboard rofi-wayland cliphist wtype swaybg swayidle gammastep
#+end_src
****** Media
#+begin_src nix
  # media
  mpc_cli playerctl pavucontrol pulsemixer imv 
#+end_src
****** Nameit
#+begin_src nix
  # cli tools
  cached-nix-shell pcmanfm yt-dlp fzf neovim btop

    unzip aspell aspellDicts.en
    ripgrep nitch libreoffice transmission pandoc
    rsync  ffmpeg sdcv imagemagick groff
    # texlive.combined.scheme-full
    fd ncdu mu isync ts  syncthing 
    jq keepassxc figlet keepassxc dconf gcc
#+end_src
****** Themes
#+begin_src nix
  # themes
  gruvbox-gtk-theme
  orchis-theme
  bibata-cursors
  papirus-icon-theme
#+end_src
****** Web-DL
#+begin_src nix
  # dl media
  deluged yt-dlp jq ytfzf ani-cli 
#+end_src
****** Browsers
#+begin_src nix
  # pioneer of web
  firefox librewolf brave ungoogled-chromium hugo
#+end_src
****** LSP -IDE
#+begin_src nix
  nodePackages_latest.bash-language-server
  nodePackages_latest.vscode-langservers-extracted
 # python39Packages.python-lsp-server
  python3
  marksman nil 
  tree-sitter-grammars.tree-sitter-bash
#+end_src
****** Closing Statement
#+begin_src nix
  ];
#+end_src
***** Package Specific Configurations
Additional Setting for individual applications.
You can copy and use your old config file only, no need to tweak nix way.
There will be not much difference.

****** Gtk Theme
#+begin_src nix

  gtk = {
    enable = true;
    theme = {
      name = "Gruvbox-Dark-B";
    };
    iconTheme = {
      name = "Papirus";
    };
    font = {
      name = "ComicCodeLigatures";
      size = 17;
    };
    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
    };
    gtk2.extraConfig = ''
      gtk-xft-antialias=1
      gtk-xft-hinting=1
      gtk-xft-hintstyle="hintslight"
      gtk-xft-rgba="rgb"
    '';
  };

  # cursor theme
  home.pointerCursor = {
    name = "Bibata-Modern-Classic";
    package = pkgs.bibata-cursors;
    size = 24;
    gtk.enable = true;
  };


#+end_src
****** Aria
#+begin_src nix
  programs = {
    aria2 = {
      enable = true;
      settings = {
	      dir = "/home/i/dloads";
	      file-allocation = "none";
	      log-level = "warn";
	      split = "10";
	      max-connection-per-server = 6;
	      min-split-size = "5M";
	      on-download-complete = "exit";
      };
    };
  };
#+end_src
****** Bottom
#+begin_src nix

    programs.bottom = {
    enable = true;
    settings = {
      flags.group_processes = true;
      row = [
        {
          ratio = 2;
          child = [
            {type = "cpu";}
            {type = "mem";}
          ];
        }
        {
          ratio = 3;
          child = [
            {
              type = "proc";
              ratio = 1;
              default = true;
            }
          ];
        }
      ];
    };
  };
#+end_src
****** Btop
#+begin_src nix
    home.file.".config/btop/btop.conf".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/btop.conf";
#+end_src
******* btop-config
#+begin_src nix :tangle ./gdk/i-home/configs/btop.conf
      color_theme = "Default"
      theme_background = False
      vim_keys = True
      shown_boxes = "proc cpu"
      rounded_corners = True 
      graph_symbol = "block"
      proc_sorting = "memory"
      proc_reversed = False
      proc_gradient = True
#+end_src
****** Colorscheme
# #+begin_src nix :noweb

  scheme = {
    doom = {
      scheme    = "Doom One Dark";
      black     = "000000";
      red       = "ff6c6b";
      orange    = "da8548";
      yellow    = "ecbe7b";
      green     = "95be65";
      teal      = "4db5bd";
      blue      = "6eaafb";
      dark-blue = "2257a0";
      magenta   = "c678dd";
      violet    = "a9a1e1";
      cyan      = "6cdcf7";
      dark-cyan = "5699af";
      emphasis  = "50536b";
      text      = "dfdfdf";
      text-alt  = "b2b2b2";
      fg        = "abb2bf";
      bg        = "282c34";
    };

    dracula = {
      scheme = "Dracula";
      base00 = "282936"; #background
      base01 = "3a3c4e";
      base02 = "4d4f68";
      base03 = "626483";
      base04 = "62d6e8";
      base05 = "e9e9f4"; #foreground
      base06 = "f1f2f8";
      base07 = "f7f7fb";
      base08 = "ea51b2";
      base09 = "b45bcf";
      base0A = "00f769";
      base0B = "ebff87";
      base0C = "a1efe4";
      base0D = "62d6e8";
      base0E = "b45bcf";
      base0F = "00f769";
    };
  };

#+end_src
****** Dunst
#+begin_src nix

  services.dunst = {
    enable = true;
    iconTheme = {
      package = pkgs.papirus-icon-theme;
      name = "Papirus";
    };
    settings = {
      global = {
        monitor = 0;
        background = "#1e1e2e";
        frame_color = "#89AAEB";
        transparency = 0;
        follow = "none";
        width = 900;
        height = 900;
        idle_threshold = 120;
        origin = "top-right";
        offset = "10x50";
        scale = 0;
        notification_limit = 0;
        progress_bar = "true";
        alignment = "center";
        progress_bar_height = 10;
        progress_bar_frame_width = 1;
        progress_bar_min_width = 150;
        progress_bar_max_width = 500;
        indicate_hidden = "yes";
        separator_height = 2;
        padding = 20;
        horizontal_padding = 12;
        text_icon_padding = 8;
        frame_width = 3;
        separator_color = "frame";
        sort = "yes";
        font = "ComicCodeLigatures 20";
        line_height = 0;
        markup = "full";
        stack_duplicates = "true";
        format = "<b>%s</b>\n%b";
        vertical_alignment = "center";
        show_age_threshold = 60;
        ellipsize = "middle";
        ignore_newline = "no";
        show_indicators = "yes";
        icon_position = "left";
        max_icon_size = 32;
        sticky_history = "yes";
        history_length = 20;
        browser = "/home/i/.DLIP/BIN/d-stuff";
        always_run_script = "true";
        title = "Dunst";
        class = "Dunst";
        corner_radius = 20;
        ignore_dbusclose = false;
        force_xwayland = "false";
        mouse_left_click = "do_action";
        mouse_middle_click = "do_action";
        mouse_right_click = "close_all";
        };

        reminder = {
         category = "reminder";
         background = "#33333390";
         foreground = "#ffffff";
         timeout = 0;
         script="d-notif";
      };

      fullscreen_delay_everything.fullscreen = "delay";
      urgency_low = {
        background = "#1e1e2e";
        foreground = "#cdd6f4";
        timeout = 5;
      };
      urgency_normal = {
        background = "#1e1e2e";
        foreground = "#cdd6f4";
        timeout = 6;
      };
      urgency_critical = {
        background = "#1e1e2e";
        foreground = "#cdd6f4";
        frame_color = "#f38ba8";
        timeout = 0;
      };
    };
  };
#+end_src
****** Foot
#+begin_src nix

  programs.foot = {
    enable = true;
    # doesnt work properly
    server.enable = false;
    settings = {
      main = {
        term = "xterm-256color";
        font = "ComicCodeLigatures:size=12";
        font-bold = "Fira Code Nerd Font:size=12";
        letter-spacing = "1";
         box-drawings-uses-font-glyphs = "no";
      };
      scrollback = {
        lines = "1000";
      };
      key-bindings = {
        clipboard-copy = "Control+Shift+c Control+w";
        clipboard-paste = "Control+Shift+v Control+y";
        primary-paste = "Shift+Insert";

      };
      colors = {
       background="000000";
       foreground="ffffff";
       regular0="000000";
       regular1="ff8059";
       regular2="44bc44";
       regular3="d0bc00";
       regular4="2fafff";
       regular5="feacd0";
       regular6="00d3d0";
       regular7="bfbfbf";
       bright0="595959";
       bright1="ef8b50";
       bright2="70b900";
       bright3="c0c530";
       bright4="79a8ff";
       bright5="b6a0ff";
       bright6="6ae4b9";
       bright7="ffffff";
        alpha= "0.8";
      };
      mouse = {
        hide-when-typing = "yes";
      };
    };
  };
#+end_src
****** Hyprland
#+begin_src nix
  wayland.windowManager.hyprland = {
    enable = true;
    # extraConfig = builtins.readFile ./hyprland.conf;
  };

  xdg.configFile."hypr/hyprland.conf" = { source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/hyprland.conf"; };

#+end_src
******** Hyprland config
#+begin_src conf :tangle ./gdk/i-home/configs/hyprland.conf
   monitor=,preferred,auto,1
   workspace=DP-1,1

   # ---- Autostart Apps ----

   exec-once=waybar
   # exec-once=dunst
   # #exec-once=exec xrdb -load ~/.config/X11/Xresources
   exec-once=systemctl --user import-environment DISPLAY WAYLAND_DISPLAY SWAYSOCK
   exec-once=wl-paste -t text --watch clipman store
   # #exec-once=swaybg -i ~/.local/share/bg.jpg
   # exec-once=hyprctl setcursor Bibata-Modern-Classic
   exec-once=swayidle timeout 150 'hyprctl dispatch dpms off' resume 'hyprctl dispatch dpms on'
   exec-once=gammastep -l 19:72 -t 6500:4100
   # exec-once=pkill -SIGKILL Xwayland
   exec-once=d-walls
   exec-once=foot --server

   input {
   kb_layout=us
   kb_options=caps:ctrl_modifier
   follow_mouse=1
   #    repeat_delay=250

   touchpad {
   natural_scroll=no
   disable_while_typing=0
   clickfinger_behavior=1
   middle_button_emulation=1
   tap-to-click=1
   }

   sensitivity=0 # -1.0 - 1.0, 0 means no modification.
   }

   device:at-translated-set-2-keyboard {
   enabled=false
   }

   general {
   gaps_in=5
   gaps_out=15
   border_size=2
   col.active_border=rgb(ffe4b5)
   col.inactive_border=rgb(313244)
   col.active_border = rgba(cba6f7ff) rgba(89b4faff) rgba(94e2d5ff) 10deg
   col.active_border = rgb(bcd2ee) rgb(fff0f5) rgb(ffe4e1) 10degg
   no_border_on_floating = true
   }

   misc {
   disable_hyprland_logo = true
   disable_splash_rendering = true
   mouse_move_enables_dpms = true
   # no_vfr = false
   enable_swallow = true
   swallow_regex = ^(foot)$
   }

   decoration {
   rounding=16
   multisample_edges = true
   inactive_opacity=0.9
   active_opacity=0.95
  # fullscreen_opacity=0.9
   dim_inactive = false
   dim_strength = 0.05
   blur=true
   blur_size=5
   blur_passes=4
   blur_new_optimizations=1
   }

   animations {
   enabled=1
   animation=border,1,5,default
   animation=fade,1,3,default
   # animation=workspaces,1,4,default
   # animation=windows,1,8,default,popin 10%
   # bezier = smoothOut, 0.36, 0, 0.66, -0.56
   # bezier = smoothIn, 0.25, 1, 0.5, 1
   # bezier = overshot, 0.4, 0.8, 0.2, 1.2

   # animation = windows, 1, 4, overshot, slide
   # animation = windowsOut, 1, 4, smoothOut, slide
   # animation = border, 1, 10, default
   # animation = fade, 1, 10, smoothIn
   # animation = fadeDim, 1, 10, smoothIn
   # animation=workspaces,1,4,overshot,slidevert

   }

   dwindle {
   pseudotile=0 # enable pseudotiling on dwindle
   preserve_split=true
   }

   master {
   new_is_master=false
   new_on_top=true
   }

   gestures {
   workspace_swipe=1
   workspace_swipe_distance=400
   workspace_swipe_invert=1
   workspace_swipe_min_speed_to_force=30
   workspace_swipe_cancel_ratio=0.5
   }

   # example window rules
   #windowrule=move 69 420,abc
   #windowrule=size 420 69,abc
   #windowrule=tile,xyz
   #windowrule=float,abc
   #windowrule=pseudo,abc
   #windowrule=monitor 0,xyz
   #--------window rules---------
   windowrule=float,rofi
   windowrule=float,ncmpcpp
   windowrule=float,viewnior
   windowrule=float,feh

   windowrule=float,mpv
   windowrule=opaque,mpv
   windowrule=noanim,mpv
   windowrule=noblur,mpv

   windowrulev2 = float, class:^(firefox)$, title:^(Firefox — Sharing Indicator)$
   windowrule=opaque,imv
   windowrule=opacity 0.95,foot
   windowrule=opacity 0.8,pcmanfm
   windowrule=opacity 0.95,firefox
   windowrule=fullscreen,emacs

   #blurls=waybar
   blurls=wofi
   blurls=rofi
   blurls=menu
   blurls=gtk-layer-shell
   blurls=notifications

   # some nice mouse binds
   bindm=SUPER,mouse:272,movewindow
   bindm=SUPER,mouse:273,resizewindow

   # example binds
   bind=SUPER,RETURN,exec,emacsclient -c -e "(vterm 1)"
   bind=SUPERSHIFT,RETURN,exec,footclient
   bind=SUPERSHIFT,Q,killactive,
   bind=SUPERSHIFT,R,exec,hyprctl reload
   bind=SUPERCONTROL,Q,exit,
   bind=SUPER,F12,exec,uxterm
   bind=SUPER,SPACE,togglefloating,
   bind=SUPER,d,exec,bemenu-run
   bind=SUPER,b,exec,pkill -SIGUSR1 waybar
   bind=SUPER,P,pseudo,
   bind=SUPER,F,fullscreen,
   #bind=SUPER,x,exec d-power
   #bind=SUPER,o,exec d-menu
   #bind=SUPER,p,exec d-apps
   #bind=SUPER, ,d-


   bind=,Print,exec,d-sshot
   bind=CONTROL,Insert,exec,d-sshot

   bind=SUPER,left,movefocus,l
   bind=SUPER,right,movefocus,r
   bind=SUPER,up,movefocus,u
   bind=SUPER,down,movefocus,d

   bind=SUPERCONTROL,left,splitratio,-0.1
   bind=SUPERCONTROL,right,splitratio,+0.1

   bind=SUPERCONTROL,h,splitratio,-0.1
   bind=SUPERCONTROL,l,splitratio,+0.1
   bind=SUPER,1,workspace,1
   bind=SUPER,2,workspace,2
   bind=SUPER,3,workspace,3
   bind=SUPER,4,workspace,4
   bind=SUPER,5,workspace,5
   bind=SUPER,6,workspace,6
   bind=SUPER,7,workspace,7
   bind=SUPER,8,workspace,8
   bind=SUPER,9,workspace,9
   bind=SUPER,0,workspace,10
   bind=SUPERSHIFT,z,movetoworkspace,special
   bind=SUPER,z,togglespecialworkspace,

   bind=SUPER,1,movetoworkspace,1
   bind=SUPER,2,movetoworkspace,2
   bind=SUPER,3,movetoworkspace,3
   bind=SUPER,4,movetoworkspace,4
   bind=SUPER,5,movetoworkspace,5
   bind=SUPER,6,movetoworkspace,6
   bind=SUPER,7,movetoworkspace,7
   bind=SUPER,8,movetoworkspace,8
   bind=SUPER,9,movetoworkspace,9
   bind=SUPER,0,movetoworkspace,10

   bind=SUPERSHIFT,1,movetoworkspacesilent,1
   bind=SUPERSHIFT,2,movetoworkspacesilent,2
   bind=SUPERSHIFT,3,movetoworkspacesilent,3
   bind=SUPERSHIFT,4,movetoworkspacesilent,4
   bind=SUPERSHIFT,5,movetoworkspacesilent,5
   bind=SUPERSHIFT,6,movetoworkspacesilent,6
   bind=SUPERSHIFT,7,movetoworkspacesilent,7
   bind=SUPERSHIFT,8,movetoworkspacesilent,8
   bind=SUPERSHIFT,9,movetoworkspacesilent,9
   bind=SUPERSHIFT,0,movetoworkspacesilent,10

   bind=SUPER,h,movefocus,l
   bind=SUPER,l,movefocus,r
   bind=SUPER,k,movefocus,u
   bind=SUPER,j,movefocus,d
   bind=SUPER,mouse_down,workspace,e+1
   bind=SUPER,mouse_up,workspace,e-1
   bind=,XF86AudioRaiseVolume,exec,pamixer -ui 5
   bind=,XF86AudioLowerVolume,exec,pamixer -ud 5
   bind=,XF86AudioMute,exec,pamixer -t


   # Chords
   bind=SUPER,period,submap,Wordz
   submap=Wordz
   bind=,d,exec,d-dict
   bind=,d,submap,reset

   bind=,a,exec,d-vocab
   bind=,a,submap,reset

   bind=,v,exec,wtype "$(cat ~/.local/share/dict/myglossary | bemenu -W 0.8 | awk '{print $1}')"
   bind=,v,submap,reset

   bind=,escape,submap,reset
   bind=CONTROL,g,submap,reset
   submap=reset


   bind=SUPER,O,submap,Scripts
   submap=Scripts
   bind=,o,exec,d-menu
   bind=,o,submap,reset

   bind=,i,exec,d-stuff
   bind=,i,submap,reset

   bind=,p,exec,d-apps
   bind=,p,submap,reset

   bind=,x,exec,d-power
   bind=,x,submap,reset

   bind=,escape,submap,reset
   bind=CONTROL,g,submap,reset
   submap=reset

   bind=SUPER,P,submap,Apps
   submap=Apps

   bind=,p,exec,sioyek
   bind=,p,submap,reset

   bind=,f,exec,firefox
   bind=,f,submap,reset

   bind=,b,exec,brave
   bind=,b,submap,reset

   bind=,w,exec,librewolf
   bind=,w,submap,reset

   bind=,c,exec,chromium
   bind=,c,submap,reset

   bind=,e,exec,emacsclient -c
   bind=,e,submap,reset

   bind=,escape,submap,reset
   bind=CONTROL,g,submap,reset
   submap=reset

   # bind=SUPER,e,exec,d-emwhere
   bind=SUPER,x,exec,d-power
   # bind=SUPER,period,exec,d-dict
   bind=SUPERSHIFT,b,exec,d-bookmark
   bind=SUPER,m,exec,d-urls
   bind=SUPER,Insert,exec,d-urls

   bind=SUPER,grave,exec,d-unicodes
   bind=SUPER,Delete,exec,pkill -INT wf-recorder

   bind=CONTROL,F1,exec,hyprctl dispatch dpms on                               
   bind=SUPER,F1,exec,d-keys
   bind=SUPER,F2,exec,brightnessctl set 2%-
   bind=SUPER,F3,exec,brightnessctl set +2%
   bind=SUPER,F4,exec,d-record
   bind=SUPER,F5,exec,d-walls
   bind=SUPER,F8,exec,mpv --untimed --geometry=35%-30-30 --no-cache --no-osc --no-input-default-bindings --profile=low-latency --input-conf=/dev/null --title=webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)
   bind=SUPER,F11,exec,d-mpdplay
   bind=SUPER,F10,exec,mpc prev
   bind=SUPER,F12,exec,mpc next

   bind=SUPER,e,exec,d-emwhere
   bind=SUPER,y,exec,ytfzf -Df

#+end_src
****** Sway
Its more mature than hyprland. So... better to have it!
#+begin_src nix
  wayland.windowManager.sway = {
    enable = true;
    config = null;
    extraConfig = ''
      # user config directory
  include $HOME/.config/sway/config.d/*

  # only enable this if every app you use is compatible with wayland
  xwayland disable
           '';
     wrapperFeatures.gtk = true;
  };
#+end_src
****** Emacs
#+begin_src nix
  home.file.".config/emacs/early-init.el".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/early-init.el";
  home.file.".config/emacs/init.el".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/init.el";
  home.file.".config/emacs/elfeed.org".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/d-rss.org";

  programs.emacs = {
    enable = true;
    package = pkgs.emacsPgtk;
    extraPackages = (epkgs: (with epkgs; [
      vterm undo-tree flycheck helpful ox-pandoc
      no-littering rainbow-delimiters rainbow-mode vertico 
      orderless consult marginalia embark embark-consult org olivetti org-modern corfu
      cape markdown-mode nix-mode rust-mode lua-mode
      all-the-icons all-the-icons-dired async dired-hide-dotfiles dired-single
      reddigg mingus pdf-tools which-key magit aria2 webpaste org-present
      org-mime corfu-terminal beframe denote tempel tempel-collection
      sdcv elfeed elfeed-org link-hint general powerthesaurus
      doom-modeline org-auto-tangle el-fetch ox-hugo htmlize
    ])
    );
  };
#+end_src
****** FireFox
******* initial set
beginning of the FireFox configuration block
#+begin_src nix
  programs.firefox = {
    enable = true;
    
#+end_src
******* User Profiles
******** Opening Statement
creates profile settings specific to a user, and sets my profile as the default
#+begin_src nix
  profiles.ihome = {
    isDefault = true;
    # extensions = with pkgs.nur.repos.rycee.firefox-addons; [
    #   #bypass-paywalls-clean
    #   cookies-txt
    #   ff2mpv
    #   vimium
    #   languagetool
    #   ublock-origin
    #   darkreader
    #   libredirect
    #   multi-account-containers
    # ];

#+end_src
******** Setting/Config
#+begin_src nix
  settings = {
    "app.update.auto" = false;
    "browser.startup.homepage" = "about:blank";
    "browser.urlbar.placeholderName" = "DuckDuckGo";
    "privacy.webrtc.legacyGlobalIndicator" = true;
    "gfx.webrender.all" = true;
    "gfx.webrender.enabled" = true;
    "media.av1.enabled" = false;
    "media.ffmpeg.vaapi.enabled" = true;
    "media.hardware-video-decoding.force-enabled" = true;
    "media.navigator.mediadatadecoder_vpx_enabled" = true;
    "signon.rememberSignons" = false;
    "app.normandy.api_url" = "";
    "app.normandy.enabled" = false;
    "app.shield.optoutstudies.enabled" = false;
    "beacon.enabled" = false;
    "breakpad.reportURL" = "";
    "browser.aboutConfig.showWarning" = false;
    "browser.cache.offline.enable" = false;
    "browser.crashReports.unsubmittedCheck.autoSubmit" = false;
    "browser.crashReports.unsubmittedCheck.autoSubmit2" = false;
    "browser.crashReports.unsubmittedCheck.enabled" = false;
    "browser.disableResetPrompt" = true;
    "browser.newtab.preload" = false;
    "browser.newtabpage.activity-stream.section.highlights.includePocket" = false;
    "extensions.pocket.enabled" = false;

    "browser.newtabpage.enhanced" = false;
    "browser.newtabpage.introShown" = true;
    "browser.safebrowsing.appRepURL" = "";
    "browser.safebrowsing.blockedURIs.enabled" = false;
    "browser.safebrowsing.downloads.enabled" = false;
    "browser.safebrowsing.downloads.remote.enabled" = false;
    "browser.safebrowsing.downloads.remote.url" = "";
    "browser.safebrowsing.enabled" = false;
    "browser.safebrowsing.malware.enabled" = false;
    "browser.safebrowsing.phishing.enabled" = false;
    "browser.selfsupport.url" = "";
    "browser.send_pings" = false;
    "browser.sessionstore.privacy_level" = 2;
    "browser.startup.homepage_override.mstone" = "ignore";
    "browser.tabs.crashReporting.sendReport" = false;
    "browser.urlbar.groupLabels.enabled" = false;
    "browser.urlbar.quicksuggest.enabled" = false;
    "browser.urlbar.speculativeConnect.enabled" = false;
    "datareporting.healthreport.service.enabled" = false;
    "datareporting.healthreport.uploadEnabled" = false;
    "datareporting.policy.dataSubmissionEnabled" = false;
    "device.sensors.ambientLight.enabled" = false;
    "device.sensors.enabled" = false;
    "device.sensors.motion.enabled" = false;
    "device.sensors.orientation.enabled" = false;
    "device.sensors.proximity.enabled" = false;
    "dom.battery.enabled" = false;
    "dom.event.clipboardevents.enabled" = true;
    "dom.webaudio.enabled" = false;
    "experiments.activeExperiment" = false;
    "experiments.enabled" = false;
    "experiments.manifest.uri" = "";
    "experiments.supported" = false;
    "extensions.getAddons.cache.enabled" = false;
    "extensions.getAddons.showPane" = false;
    "extensions.greasemonkey.stats.optedin" = false;
    "extensions.greasemonkey.stats.url" = "";
    "extensions.shield-recipe-client.api_url" = "";
    "extensions.shield-recipe-client.enabled" = false;
    "extensions.webservice.discoverURL" = "";
    "fission.autostart" = true;
    "media.autoplay.default" = 1;
    "media.autoplay.enabled" = false;
    "media.eme.enabled" = false;
    "media.gmp-widevinecdm.enabled" = false;
    "media.navigator.enabled" = false;
    "media.video_stats.enabled" = false;
    "network.IDN_show_punycode" = true;
    "network.allow-experiments" = false;
    "network.captive-portal-service.enabled" = false;
    "network.cookie.cookieBehavior" = 1;
    "network.dns.disablePrefetch" = true;
    "network.dns.disablePrefetchFromHTTPS" = true;
    "network.http.referer.spoofSource" = true;
    "network.http.speculative-parallel-limit" = 0;
    "network.predictor.enable-prefetch" = false;
    "network.predictor.enabled" = false;
    "network.prefetch-next" = false;
    "network.trr.mode" = 5;
    "privacy.donottrackheader.enabled" = true;
    "privacy.donottrackheader.value" = 1;
    "privacy.firstparty.isolate" = true;
    "privacy.trackingprotection.cryptomining.enabled" = true;
    "privacy.trackingprotection.enabled" = true;
    "privacy.trackingprotection.fingerprinting.enabled" = true;
    "privacy.trackingprotection.pbmode.enabled" = true;
    "privacy.usercontext.about_newtab_segregation.enabled" = true;
    "security.ssl.disable_session_identifiers" = true;
    "services.sync.prefs.sync.browser.newtabpage.activity-stream.showSponsoredTopSite" = false;
    "browser.newtabpage.activity-stream.showSponsored" = false;
    "signon.autofillForms" = false;
    "toolkit.telemetry.archive.enabled" = false;
    "toolkit.telemetry.bhrPing.enabled" = false;
    "toolkit.telemetry.cachedClientID" = "";
    "toolkit.telemetry.enabled" = false;
    "toolkit.telemetry.firstShutdownPing.enabled" = false;
    "toolkit.telemetry.hybridContent.enabled" = false;
    "toolkit.telemetry.newProfilePing.enabled" = false;
    "toolkit.telemetry.prompted" = 2;
    "toolkit.telemetry.rejected" = true;
    "toolkit.telemetry.reportingpolicy.firstRun" = false;
    "toolkit.telemetry.server" = "";
    "toolkit.telemetry.shutdownPingSender.enabled" = false;
    "toolkit.telemetry.unified" = false;
    "toolkit.telemetry.unifiedIsOptIn" = false;
    "toolkit.telemetry.updatePing.enabled" = false;
    "webgl.disabled" = true;
    "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
    "webgl.renderer-string-override" = " ";
    "webgl.vendor-string-override" = " ";
  };

#+end_src

******** userCSS
Chose t user css to make firefox elegant!
#+begin_src nix
  userChrome = ''
	       /* Base color for the theme, dependent on whether it's a light theme or not */
  @media (prefers-color-scheme: dark) {
      :root {
	  --lwt-accent-color: #1c1b22;
      }
  }

  @media (prefers-color-scheme: light) {
      :root {
	  --lwt-accent-color: #FAFAFC;
      }
  }

  /*====== Aesthetics ======*/

  #navigator-toolbox {
      border-bottom: none !important;
  }

  #titlebar {
      background: var(--lwt-accent-color) !important;
  }

  /* Sets the toolbar color */
  toolbar#nav-bar {
      background: var(--lwt-accent-color) !important;
      box-shadow: none !important;
  }

  /* Sets the URL bar color */
  #urlbar {
      background: var(--lwt-accent-color) !important;
  }

  #urlbar-background {
      background: var(--lwt-accent-color) !important;
      border: none !important;
  }

  #urlbar-input-container {
      border: none !important;
  }

  /*====== UI Settings ======*/

  :root {
      --navbarWidth: 475px; /* Set width of navbar */
  }

  /* If the window is wider than 1000px, use flex layout */
  @media (min-width: 1000px) {
      #navigator-toolbox {
	  display: flex;
	  flex-wrap: wrap;
  }

      /*  Url bar  */
      #nav-bar {
	  order: 1;
	  width: var(--navbarWidth);
      }

      /* Tab bar */
      #titlebar {
	  order: 2;
	  width: calc(100vw - var(--navbarWidth) - 1px);
      }

      /* Bookmarks bar */
      #PersonalToolbar {
	  order: 3;
	  width: 100%;
      }
    
      /* Fix urlbar sometimes being misaligned */
      :root[uidensity="compact"] #urlbar {
	  --urlbar-toolbar-height: 39.60px !important;
      }

      :root[uidensity="touch"] #urlbar {
	  --urlbar-toolbar-height: 49.00px !important;
      }
  }

  /*====== Simplifying interface ======*/

  /* Autohide back button when disabled */
  #back-button, #forward-button {
      transform: scale(1, 1) !important;
      transition: margin-left 150ms var(--animation-easing-function), opacity 250ms var(--animation-easing-function), transform 350ms var(--animation-easing-function) !important;
  }

  #back-button[disabled="true"], #forward-button[disabled="true"] {
      margin-left: -34px !important;
      opacity: 0 !important;
      transform: scale(0.8, 0.8) !important;
      pointer-events: none !important;
  }

  /* Remove UI elements */
  #identity-box, /* Site information */
  #tracking-protection-icon-container, /* Shield icon */
  #page-action-buttons > :not(#urlbar-zoom-button, #star-button-box), /* All url bar icons except for zoom level and bookmarks */
  #urlbar-go-button, /* Search URL magnifying glass */
  #alltabs-button, /* Menu to display all tabs at the end of tabs bar */
  .titlebar-buttonbox-container /* Minimize, maximize, and close buttons */ {
      display: none !important;
  }

  #nav-bar {
      box-shadow: none !important;
  }

  /* Remove "padding" left and right from tabs */
  .titlebar-spacer {
      display: none !important;
  }

  /* Fix URL bar overlapping elements */
  #urlbar-container {
      min-width: initial !important;
  }

  /* Remove gap after pinned tabs */
  #tabbrowser-tabs[haspinnedtabs]:not([positionpinnedtabs])
  > #tabbrowser-arrowscrollbox
  > .tabbrowser-tab[first-visible-unpinned-tab] {
      margin-inline-start: 0 !important;
  }

  /* Hide the hamburger menu */
  #PanelUI-menu-button { 
      padding: 0px !important;
  }

  #PanelUI-menu-button .toolbarbutton-icon { 
      width: 1px !important; 
  }

  #PanelUI-menu-button .toolbarbutton-badge-stack {
      padding: 0px !important; 
  }
	       '';
#+end_src

******** Closing Statement
Closes the User Profiles Code block
#+begin_src nix
  };
#+end_src
******* Closing Statement
Closes FireFox Block
#+begin_src nix
  };
#+end_src
****** Newsboat
#+begin_src nix
  
  # xdg.configFile."newsboat".source = ./configs/.;
  
  home.file.".config/newsboat".recursive = true;
  home.file.".config/newsboat".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/newsboat";

#+end_src
******* News config
#+begin_src conf :tangle ./gdk/i-home/configs/newsboat/config
#show-read-feeds no
#auto-reload yes

reload-time 120
always-display-description true
reload-threads 40



bind-key j down
bind-key k up
bind-key j next articlelist
bind-key k prev articlelist
bind-key J next-feed articlelist
bind-key K prev-feed articlelist
bind-key G end
bind-key g home
bind-key d pagedown
bind-key u pageup
bind-key l open
bind-key h quit
bind-key a toggle-article-read
bind-key n next
bind-key p prev
bind-key D pb-download
bind-key U show-urls
bind-key x pb-delete

color listnormal cyan default
color listfocus black yellow standout bold
color listnormal_unread blue default
color listfocus_unread yellow default bold
color info red black bold
color article white default bold

browser "d-stuff"

#bind-key \ macro-prefix
macro , open-in-browser ; set browser d-stuff
macro d set browser "d-stuff" ; open-in-browser ; set browser linkhandler
macro c set browser "echo %u | xclip -r -sel c" ; open-in-browser ; set browser linkhandler
macro o set browser "d-stuff" ; open-in-browser ;
macro m pipe-to "grep -o 'http.*mp3' | xargs tsp mpv " ; toggle-article-read "read"

macro v set browser "tsp mpv %u"; open-in-browser ;set browser linkhandler

macro t pipe-to "grep -o 'http.*torrent' | xclip -selection clipboard"; 

highlight all "---.*---" yellow
highlight feedlist ".*(0/0))" black
highlight article "(^Feed:.*|^Title:.*|^Author:.*)" cyan default bold
highlight article "(^Link:.*|^Date:.*)" default default
highlight article "https?://[^ ]+" green default
highlight article "^(Title):.*$" blue default
highlight article "\\[[0-9][0-9]*\\]" magenta default bold
highlight article "\\[image\\ [0-9]+\\]" green default bold
highlight article "\\[embedded flash: [0-9][0-9]*\\]" green default bold
highlight article ":.*\\(link\\)$" cyan default
highlight article ":.*\\(image\\)$" blue default
highlight article ":.*\\(embedded flash\\)$" magenta default

#+end_src
******* News Urls
#+begin_src conf :tangle ./gdk/i-home/configs/newsboat/urls
# queries

# unread articles tagged newcastle
"query:Newcastle:unread = \"yes\" and tags # \"newcastle\""

# unread articles tagged general
"query:General:unread = \"yes\" and tags # \"general\""

# unread articles tagged linux
"query:Linux:unread = \"yes\" and tags # \"linux\""

# unread articles tagged emacs
"query:Emacs:unread = \"yes\" and tags # \"emacs\""


# newcastle

# magpie channel
https://www.youtube.com/feeds/videos.xml?channel_id=UCzbwOixfdDkOEl4c2Gy1Xow newcastle "~The Magpie Channel" 

# robenstein
https://www.youtube.com/feeds/videos.xml?channel_id=UC2WTz3aJZ65nN3p5_LMJAzg newcastle "~Roobenstein" 

# adam pearson
https://www.youtube.com/feeds/videos.xml?channel_id=UCbXlSJHSuY1nNHoxSElKiIA newcastle "~Adam Pearson" 

# newcastle united
https://www.youtube.com/feeds/videos.xml?channel_id=UCywGl_BPp9QhD0uAcP2HsJw newcastle "~Newcastle United" 


# tech

# gotbletu
https://www.youtube.com/feeds/videos.xml?channel_id=UCkf4VIqu3Acnfzuk3kRIFwA linux "~gotbletu" 


# general

# A Closer Look
https://www.youtube.com/feeds/videos.xml?playlist_id=PLJaq64dKJZoqsh7PGGUi-SARV4wUz_lVa general "~A Closer Look" 

# David Pakman
https://www.youtube.com/feeds/videos.xml?channel_id=UCvixJtaXuNdMPUGdOPcY8Ag general "~David Pakman" 

# Maximilien Robespierre
https://www.youtube.com/feeds/videos.xml?channel_id=UCSiYkMylC3F_eQfIodMHkOw general "~Maximilien Robespierre" 

# emacs

# System Crafters
https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ emacs "~System Crafters"

#+end_src
****** Media
#+begin_src nix
  services.mpd = {
    enable = true;
    network = {
      listenAddress = "any";
      port = 6600;
    };
    extraConfig = ''
        audio_output {
          type    "pipewire"
          name    "pipewire"
        }
        auto_update "yes"
      '';
  };

  programs.ncmpcpp = {
    enable = true;
    package = pkgs.ncmpcpp;
    settings = {
      ncmpcpp_directory = "/home/i/.config/ncmpcpp";
      mpd_crossfade_time = 2;
      lyrics_directory = "/home/i/.cache/lyrics";
      progressbar_elapsed_color = 5;
      progressbar_color = "black";
      media_library_primary_tag = "album_artist";
      follow_now_playing_lyrics = "yes";
      connected_message_on_startup = "no";
      ignore_leading_the = "yes";
      screen_switcher_mode = "playlist, media_library";
      song_columns_list_format = "(50)[]{t|fr:Title} (0)[blue]{a}";
      song_list_format = "$8%a - %t$R  %l";
      song_library_format = "{{%a - %t} (%b)}|{%f}";
      song_status_format = "$7%t";
      song_window_title_format = "Now Playing ..";
      now_playing_prefix = "$b$6 ";
      now_playing_suffix = "  $/b$8";
      current_item_prefix = "$b$6$/b$6";
      current_item_suffix = "  $8";
      statusbar_color = "white";
      color1 = "white";
      color2 = "blue";
      header_visibility = "no";
      statusbar_visibility = "no";
      titles_visibility = "no";
      enable_window_title = "yes";
      cyclic_scrolling = "yes";
      mouse_support = "yes";
      mouse_list_scroll_whole_page = "yes";
      lines_scrolled = "1";
      message_delay_time = "1";
      playlist_shorten_total_times = "yes";
      playlist_display_mode = "columns";
      browser_display_mode = "columns";
      search_engine_display_mode = "columns";
      playlist_editor_display_mode = "columns";
      autocenter_mode = "yes";
      centered_cursor = "yes";
      user_interface = "classic";
      locked_screen_width_part = "50";
      ask_for_locked_screen_width_part = "yes";
      display_bitrate = "no";
      external_editor = "hx";
      main_window_color = "default";
      startup_screen = "playlist";
      visualizer_data_source = "/tmp/mpd.fifo";
      visualizer_output_name = "Visualizer";
      visualizer_in_stereo = "no";
      visualizer_type = "ellipse";
      visualizer_fps = "60";
      visualizer_look = "●▮";
      visualizer_color = "33,39,63,75,81,99,117,153,189";
    };
    bindings = [
      {
        key = "j";
        command = "scroll_down";
      }
      {
        key = "k";
        command = "scroll_up";
      }
      {
        key = "J";
        command = ["select_item" "scroll_down"];
      }
      {
        key = "K";
        command = ["select_item" "scroll_up"];
      }
    ];
  };

  programs = {
    mpv = {
      enable = true;
      # scripts = with pkgs.mpvScripts; [ thumbnail sponsorblock];
      bindings = {
        "l" = "seek 5";
        "h" = "seek -5";
        "j" = "seek -30";
        "k" = "seek 30";
        "J" = "cycle sub";
        "K" = "cycle sub down";
      };
      config = {
        hwdec="vaapi";
        gpu-hwdec-interop="vaapi";
        vo="gpu";
        profile="gpu-hq";
        gpu-context="wayland";
        force-window=true;
        osc=false;
        sub-border-size="3.0";
        sub-auto="fuzzy";
        msg-level="all=warn";
        ytdl-format="[height<1080]";
        save-position-on-quit=true;
        slang="eng,en,Eng,English";
        alang="jp,jpn,en,eng";
        sub-font="ComicCodeLigatures";
        autofit="50%";
        sub-font-size="38";
      };
    };
  };
#+end_src
****** Sioyek
#+begin_src nix
  programs.sioyek = {
    enable = true;

    config = {
      
	"background_color" =  "0.0 0.0 0.0";
	"dark_mode_background_color"  =  "0.0 0.0 0.0";
	"custom_background_color" =  "0.180 0.204 0.251";
	"custom_text_color" =  "0.847 0.871 0.914";
	
	"dark_mode_contrast" =			"0.8";
	"text_highlight_color" =     "1.0 1.0 0.0";
	"search_url_s" = 	"https://scholar.google.com/scholar?q=";
	"search_url_l" = 	"http://gen.lib.rus.ec/scimag/?q=";
	"search_url_g" =	"https://www.google.com/search?q=";
	"middle_click_search_engine" = "s";
	"shift_middle_click_search_engine" = 	"l";
	"zoom_inc_factor" =         "1.2";
	"flat_toc" =                            "0";
	"should_launch_new_instance"		=		"1";
	
	"should_launch_new_window"		=		"1";
	
	"default_dark_mode" =	"1";
	"sort_bookmarks_by_location" = 	"1";
	"ui_font" = "ComicCodeLigatures";
	"font_size" =  "24";
	"wheel_zoom_on_cursor" =  "1";
	"status_bar_font_size" = "22";
	"collapsed_toc" = "1";
	"ruler_mode" = "1";
	
	"single_click_selects_words" =  "1";
	
	
	"item_list_prefix" =  ">";
	
	"#ignore_whitespace_in_presentation_mode" = "0";
	
	"prerender_next_page_presentation" = "1";
	
    };

    bindings = {
      "fit_to_page_width" =  "<f9>";
      "fit_to_page_width_smart" =  "<f10>";

       " quit"	= "q";
        "toggle_custom_color"  =   "<f8>";
        "toggle_fullscreen" =   "<f11>";
        "toggle_highlight" =   "<f1>";
        "command" =             "<A-x>";
        "toggle_dark_mode" =	"i";
        "toggle_presentation_mode" =	"<f5>";
        "toggle_statusbar" = "<S-b>";
    };
  };
#+end_src
****** Mime Tools
#+begin_src nix
  services = {
    # udiskie = {
    # enable = true;
    # automount = true;
    # };
    gpg-agent = {
      enable = true;
      pinentryFlavor = "gnome3";
      enableSshSupport = true;
      enableZshIntegration = true;
    };
  };
  programs = {
    gpg.enable = true;
    man.enable = true;
    #  direnv = {
    #    enable = true;
    #    nix-direnv.enable = true;
    #  };
    #  tealdeer = {
    #    enable = true;
    #    settings = {
    #      display = {
    #        compact = false;
    #        use_pager = true;
    #      };
    #      updates = {
    #        auto_update = true;
    #      };
    #    };
    #  };
    bat = {
      enable = true;
    };
  };
  xdg = {
    userDirs = {
      enable = true;
      documents = "$HOME/docs";
      download = "$HOME/dloads";
      videos = "$HOME/vids";
      music = "$HOME/music";
      pictures = "$HOME/pics";
      desktop = "$HOME/other";
      publicShare = "$HOME/other";
      templates = "$HOME/other";
    };
    mimeApps.enable = true;
    mimeApps.associations.added = {
      "text/html" = ["firefox.desktop"];
      "x-scheme-handler/http" = ["firefox.desktop"];
      "x-scheme-handler/https" = ["firefox.desktop"];
      "x-scheme-handler/ftp" = ["firefox.desktop"];
      "x-scheme-handler/about" = ["firefox.desktop"];
      "x-scheme-handler/unknown" = ["firefox.desktop"];
      "application/x-extension-htm" = ["firefox.desktop"];
      "application/x-extension-html" = ["firefox.desktop"];
      "application/x-extension-shtml" = ["firefox.desktop"];
      "application/xhtml+xml" = ["firefox.desktop"];
      "application/x-extension-xhtml" = ["firefox.desktop"];
      "application/x-extension-xht" = ["firefox.desktop"];

      "audio/*" = ["mpv.desktop"];
      "video/*" = ["mpv.dekstop"];
      "image/*" = ["imv.desktop"];
      "application/json" = ["firefox.desktop"];
      "application/pdf" = ["sioyek.desktop"];
      "x-scheme-handler/magnet" = ["d-stuff.desktop"];
      "application/epub+zip" = ["sioyek.desktop"];
      "application/zip" = ["sioyek.desktop"];
      "application/x.bittorrent" = ["d-stuff.desktop"];
    };
    mimeApps.defaultApplications = {
      "text/html" = ["firefox.desktop"];
      "x-scheme-handler/http" = ["firefox.desktop"];
      "x-scheme-handler/https" = ["firefox.desktop"];
      "x-scheme-handler/ftp" = ["firefox.desktop"];
      "x-scheme-handler/about" = ["firefox.desktop"];
      "x-scheme-handler/unknown" = ["firefox.desktop"];
      "application/x-extension-htm" = ["firefox.desktop"];
      "application/x-extension-html" = ["firefox.desktop"];
      "application/x-extension-shtml" = ["firefox.desktop"];
      "application/xhtml+xml" = ["firefox.desktop"];
      "application/x-extension-xhtml" = ["firefox.desktop"];
      "application/x-extension-xht" = ["firefox.desktop"];

      "audio/*" = ["mpv.desktop"];
      "video/*" = ["mpv.dekstop"];
      "image/*" = ["imv.desktop"];
      "application/json" = ["firefox.desktop"];
      "application/pdf" = ["sioyek.desktop"];
      "x-scheme-handler/magnet" = ["d-stuff.desktop"];
      "application/epub+zip" = ["sioyek.desktop"];
      "application/zip" = ["sioyek.desktop"];
      "application/x.bittorrent" = ["d-stuff.desktop"];
    };
  };
#+end_src
****** Waybar
#+begin_src nix
  home.file.".config/waybar/style.css".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/style.css";
  programs.waybar = {
    enable = true;
    package = pkgs.waybar.overrideAttrs (oldAttrs: {
      mesonFlags = oldAttrs.mesonFlags ++ ["-Dexperimental=true"];
    });

    settings = {
      mainBar = {
        layer = "top";
        position = "top";
        height = 20;
        spacing = 7;
        fixed-center = true;
        exclusive = true;
        modules-left = [
          "custom/launcher"
          "wlr/workspaces"
          "hyprland/window"
          "hyprland/submap"
        ];
        modules-center = [
          "clock"
        ];
        modules-right = ["network" "battery" "memory" "pulseaudio" "custom/power"];
        "wlr/workspaces" = {
          format = "{icon}";
          active-only = false;
          on-click = "activate";
          format-icons = {
            active = "";
            default = "";
            "1" = "1";
            "2" = "2";
            "3" = "3";
            "4" = "4";
            "5" = "5";
            "6" = "6";
          };
        };

        "hyprland/window" = {
          "format" = "🧬 {}";
          "separate-outputs" = true;
        };

        "hyprland/submap" = {
          "format" = " {}";
          "max-length" = 14;
          "tooltip" = false;
        };

        "custom/launcher" = {
          format = " ";
          tooltip = false;
          on-click = "bemenu-run";
        };

        "battery" =  {
          "bat" =  "BAT0";
          "interval" =  30;
          "states" =  {
            "warning" =  50;
            "critical" =  30;
          };
          "format" =  "{capacity}% {icon} ";
          "format-icons" =  ["" "" "" "" ""];
          "max-length" =  25;
        };

        "custom/power" = {
          "format" = " ";
          "on-click" = "d-power";
          "tooltip" = false;
        };
        "clock" = {
          "tooltip-format" = "{:%A %B %d %Y | %H:%M}";
          "format-alt" = " {:%a %d %b  %I:%M %p}";
          "format" = " {:%H:%M} ";
          ##"timezones" = [ "Kolkata" ];
          ##"max-length" = 200;
          "interval" = 1;
        };
        "cpu" = {
          "format" = "﬙ {usage: >3}%";
          "on-click" = "footclient -e htop";
        };
        "memory" = {
          "format" = " {: >3}%";
          "on-click" = "foot -e btop";
        };
        "network" = {
          "interface" = "wlp2s0";
          "format" = "⚠ Disabled";
          "format-wifi" = " {bandwidthDownBytes}  {bandwidthUpBytes}";
          "format-ethernet" = " {ifname}: {ipaddr}/{cidr}";
          "format-disconnected" = "⚠ Disconnected";
          "on-click" = "foot -e nmtui";
          "interval" = 2;
        };
        "pulseaudio" = {
          "scroll-step" = 2;
          "format" = "{icon} {volume: >3}%";
          "format-bluetooth" = "{icon} {volume: >3}%";
          "format-muted" =" muted";
          "on-click" = "pamixer -t";
          "format-icons" = {
            "headphones" = "";
            "handsfree" = "";
            "headset" = "";
            "phone" = "";
            "portable" = "";
            "car" = "";
            "default" = ["" ""];
          };
        };
      };
    };
  };

#+end_src
******* Style.css
#+begin_src css :tangle ./gdk/i-home/configs/style.css
  ,*{
      color: #ffffff;
      border: 0;
      border-radius: 10px;
      padding: 0 0;
      font-family:ComicCodeLigatures Bold;
      font-size: 24px;
      margin-right: 5px;
      margin-left: 5px;
      padding-bottom:3px;
      min-height: 45px;
  }

  window#waybar {
      background: transparent;
      background: rgba(00, 00, 00, 0.0);
  }

  #workspaces button {
      border-radius: 20px;
      background-color: #11111b;
      color: #ffff00;

  }

  #workspaces button.active {
      border-color: #89DCEB ;
      padding-bottom:5px ;
  }

  #mode {
      color: #ebcb8b;
  }

  #battery, #mpd,#workspaces, #submap, #clock, #cpu, #memory,#network, #pulseaudio, #window,#custom-launcher,#custom-power{
      padding: 0 3px;
      border-bottom: 2px;
      border-style: solid;
      border-radius: 15px 15px 15px 15px;
      background-color: #11111b;
      margin-top: 3px;
      padding-top: 1px;
      padding-left: 13px;
      padding-right: 3px;
      opacity: 1.0;
      font-size: 20px;
  }

  #window {
      border-radius: 20px;
      padding-left: 10px;
      padding-right: 10px;
      color:#ffd700;
      margin-top:1px;
      border-color:#ffd700;
  }

  #clock {
      color:#89b4fa;
  }

  #mpd {
      color: #cdd6f4;
  }


  #cpu {
      color:#a6e3a1;
  }


  #memory {
      color: #94e2d5;
      color: #cba6f7;
  }

  #network.disabled {
      color:#bf616a;
  }

  #network{
      color:#f9e2af;
  }

  #battery {
      color:#ee9572;
  }

  #network.disconnected {
      color: #bf616a;
  }

  #pulseaudio {
      color: #a6e3a1;
  }

  #pulseaudio.muted {
      color: #3b4252;
  }

  #custom-launcher {
      font-family:Fira Code Nerd Font;
      font-size:40px;
      color:#000000;
      border-color: #121212;
      border-radius: 20px 20px 20px 20px;
      background: linear-gradient(90deg, #bcd2ee 28%, #fff0f5 85%, #ffe4e1 100%);

  }

  #custom-power {
      font-family: Fira Code Nerd Font;
      font-size: 22px;
      color:#f38ba8;
      border-radius: 30px 30px 30px 30px;

  }

  #submap {
      color:#eb9;
  }
  #mode{
      margin-bottom:3px;
  }


#+end_src
****** Wofi
#+begin_src nix
  home.file.".config/wofi".recursive = true;
  home.file.".config/wofi".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/wofi";
#+end_src
******* Wofi-config
#+begin_src conf :tangle ./gdk/i-home/configs/wofi/config
  width=35%
  height=50%
  allow_images=true
  hide_scroll=true
  matching=multi-contains
  insensitive=true
  location=center
  #halign=center
  image_size=45
  key_forward=Control_L-n
  key_backward=Control_R-p
  key_paste=Control_L-y
  dynamic_lines=true
  allow_markup=true
  prompt=  Apps
#+end_src
******* Wofi-style
#+begin_src css :tangle ./gdk/i-home/configs/wofi/style.css
 *{
    border: 0px;
    font-family:ComicCodeLigatures Medium;
    font-size: 30px;

}
#window {
    margin: 0px;
    background-color: #000000;
    border-radius: 30px;
    border: 2px solid #f5c2e7;
    background: rgba(00, 00, 00, 0.2);
}

#input {
    margin: 5px;
    border: 2px solid #f9e2af;
    color: #FFFFFF;
    background-color: #000000;
    border-radius: 40px;
    background: rgba(00, 00, 00, 0.2);
}

#inner-box {
    margin: 5px;
    border: none;
    background-color: #000000;
    border-radius: 30px;
    background: rgba(00, 00, 00, 0.2);
    
}

#outer-box {
    margin: 15px;
    border: none;
    background-color: #000000;
    background: rgba(00, 00, 00, 0.2);
}

#scroll {
    margin: 0px;
    border: none;
}

#text {
    margin: 5px;
    border: none;
    color: #ffffff;
} 

#text:selected {
	background-color: inherit;
	color: #161322;
	font-weight: normal;
}

#entry:selected  {
    background-color: #1A73E8;
    background: linear-gradient(90deg, #cba6f7 0%, #94e2d5 100%);
    background: linear-gradient(90deg, rgba(201,203,255,1) 28%, rgba(245,224,220,1) 85%, rgba(242,205,205,1) 100%);
    background: linear-gradient(90deg, #89b4fa 28%, #fff0f5 85%, #ffe4e1 100%);
    border-radius: 20px;
    outline: none;
}


#+end_src
****** Ytfzf
#+begin_src nix
  home.file.".config/ytfzf/conf.sh".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.DLIP/SETUP/gdk/i-home/configs/conf.sh";
#+end_src
******* ytfzf-config
#+begin_src conf :tangle ./gdk/i-home/configs/conf.sh
#video_pref="248+bestaudio/best"
video_pref="[height<=1080]"
#scrape 1 video link per channel instead of the default 2
sub_link_count=1
show_thumbnails=0
##}}}

external_menu () {
    #use rofi instead of dmenu
#    rofi -dmenu -i -theme-str '@import "menu.rasi" window {height:60%;width: 70%;}' -p "$1"
    # rofi -dmenu -i -config ~/.config/rofi/list.rasi -p "Search for :->"
    # wofi -dib -W 90% -H 80% 
     bemenu -W 0.98
#    dmenu -i -l 20
}

thumbnail_quality=high
scrape=youtube
#is_sort=1
#search_sort_by=upload_date

#+end_src
***** System Files
Creates files in the user environment to be used by other Applications
***** Closing Statement
Closes the Main Body Block
#+begin_src nix
  }
#+end_src

* Additional FIles
Don't worry about this, there is nothing from here.

Its just custom instructions
** First Time Set Up Script
:PROPERTIES:
:header-args: :tangle ./gdk/init-setup.sh
:END:
*** Configure file as a script
Enables file as  shell script
#+begin_src sh
  #! /bin/bash
#+end_src
*** Install System Flake

#+begin_src sh
  echo "Installing System Flake"
  sudo cp -f /etc/nixos/hardware-configuration.nix ~/.DLIP/SETUP/gdk/hardware-configuration.nix
  cd ~/.DLIP/SETUP
  sudo nixos-rebuild switch --flake .#gdk
#+end_src
*** Create SSH Key
Creates a SSH Key for Git and then copies it to a named file on the Desktop
#+begin_src sh
  echo "Creating SSH Key"
  ssh-keygen -f /home/que/.ssh/id_rsa -q -N ""
  cp ~/.ssh/id_rsa.pub ~/ssh-key
#+end_src
**** TODO Find a way to copy contents of a file to clipboard from CLI
*** Copy First Time Installation Checklist
Places a copy of =manual-init-steps.org= in the home directory
#+begin_src sh
  echo "Copying Installation Checklist"
  cp ./gdk/manual-init-steps.org ~/manual-init-steps.org
#+end_src
*** Restart System
#+begin_src sh
  echo "Restarting System"
  reboot
#+end_src
** Manual Set Up Instructions
:PROPERTIES:
:header-args: :tangle ./gdk/manual-init-steps.org
:END:
*** File Description
#+begin_src txt
This file describes steps that need to be taken during the first time set up of the computer after a new installation of NixOS
#+end_src
*** Configure FireFox
#+begin_src txt
- Log into FireFox and Sync Settings
   - Open 'about:config' as  a URL
   - Search for "legacy"
   - Toggle "toolkit.legacyUserProfileCustomizations.stylesheets" to true
- Log into Password Manager
- Log into Google
#+end_src
*** Configure Git
#+begin_src txt
- Add SSH Key from ~/ssh-key to GitHub
- run =ssh -T git@github.com= and accept the new key token.
#+end_src
