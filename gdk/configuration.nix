# WARNING : This file was generated by d-org.org
# DO NOT MODIFY THIS FILE!
# Any changes made here will be overwritten.

{ inputs, lib, self, config, pkgs, ... }:

{

imports = [
  ./hardware-configuration.nix
];

programs = {
  bash.promptInit = ''eval "$(${pkgs.starship}/bin/starship init bash)"'';
};

# compresses half the ram for use as swap
zramSwap = {
  enable = true;
  memoryPercent = 50 ;
  algorithm = "zstd";
};

sound = {
  enable = true;
  mediaKeys.enable = true;
};

time.timeZone = "Asia/Kolkata";

fileSystems = {
  "/".options = [ "compress=zstd" ];
  "/home".options = [ "compress=zstd" ];
  "/nix".options = [ "compress=zstd" "noatime" ];
};  

# Select internationalisation properties.
i18n.defaultLocale = "en_US.UTF-8";
console = {
  earlySetup = true;
  font = "${pkgs.terminus_font}/share/consolefonts/ter-132n.psf.gz";
  packages = with pkgs; [ terminus_font ];
  keyMap = "us";
};

environment = {
  # set channels (backwards compatibility)
  etc = {
    "nix/flake-channels/nixpkgs".source = inputs.nixpkgs;
    "nix/flake-channels/home-manager".source = inputs.home-manager;
  };
};

nixpkgs = {
  config = {
    allowUnfree = true;
    allowBroken = false;
  };

};

# faster rebuilding
documentation = {
  enable = true;
  doc.enable = false;
  man.enable = true;
  dev.enable = false;
};

nix = {
  gc = {
    automatic = true;
    dates = "daily";
    options = "--delete-older-than 9d";
  };

  # pin the registry to avoid downloading and evaling a new nixpkgs version every time
  registry = lib.mapAttrs (_: v: {flake = v;}) inputs;

  # set the path for channels compat
  nixPath = [
    "nixpkgs=/etc/nix/flake-channels/nixpkgs"
    "home-manager=/etc/nix/flake-channels/home-manager"
  ];

  # Free up to 1GiB whenever there is less than 100MiB left.
  extraOptions = ''
    experimental-features = nix-command flakes
    keep-outputs = true
    warn-dirty = false
    keep-derivations = true
    min-free = ${toString (100 * 1024 * 1024)}
    max-free = ${toString (1024 * 1024 * 1024)}
  '';
  settings = {
    auto-optimise-store = true;
    builders-use-substitutes = true;
    trusted-users = ["root" "@wheel"];
    max-jobs = "auto";
    # use binary cache, its not gentoo
    substituters = [
      "https://cache.nixos.org"
      "https://nixpkgs-wayland.cachix.org"
      "https://nix-community.cachix.org"
      "https://hyprland.cachix.org"
    ];

    trusted-public-keys = [
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      "nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA="
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
      "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="
    ];
  };
};
system.autoUpgrade.enable = false;
system.stateVersion = "22.11"; # DONT TOUCH THIS

boot = {
  cleanTmpDir = true;
  kernelPackages = pkgs.linuxPackages_latest;

  loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
    timeout = 5;
  };
};

networking = {
  hostName = "gdk";
  # dns
  networkmanager = {
    enable = true;
    unmanaged = ["docker0" "rndis0"];
    wifi.macAddress = "random";
  };
  firewall = {
    enable = true;
    # For syncthing
    allowedTCPPorts = [8384 22000];
    allowedUDPPorts = [22000 21027];
    allowPing = false;
    logReversePathDrops = true;
  };
};
# slows down boot time
systemd.services.NetworkManager-wait-online.enable = false;

security.rtkit.enable = true;
security.polkit.enable = true;
security.sudo.enable = false;
# Configure doas
security.doas = {
  enable = true;
  extraRules = [{
    users = [ "i" ];
    keepEnv = true;
    persist = true;  
  }];
};

services = {
  # dbus = {
  # packages = with pkgs; [dconf udisks2];
  # enable = true;
  # };
  # udev.packages = with pkgs; [gnome.gnome-settings-daemon];

  journald.extraConfig = ''
    SystemMaxUse=50M
    RuntimeMaxUse=10M
  '';
  udisks2.enable = true;

  tlp.enable = true;                      # TLP and auto-cpufreq for power management
  logind = {
    lidSwitch = "suspend";
    extraConfig = ''
  HandlePowerKey = suspend
  '';
  };
  auto-cpufreq.enable = true;
  # blueman.enable = true;

  gvfs.enable = true;
  syncthing = {
    enable = true;
    user = "i";
    configDir = "/home/i/.config/syncthing";
    overrideDevices = true;     # overrides any devices added or deleted through the WebUI
    overrideFolders = true;     # overrides any folders added or deleted through the WebUI
    devices = {
      "realme" = { id = "JAJECCB-UC73TPE-KJFHYK4-KZT2A74-BEQSYVG-LAKP34N-V2G5E6X-TH2ZQQQ"; };
      #"device2" = { id = "DEVICE-ID-GOES-HERE"; };
    };
    folders = {
      "music-jazz" = {        # Name of folder in Syncthing, also the folder ID
        path = "/home/i/music";    # Which folder to add to Syncthing
        devices = [ "realme" ];      # Which devices to share the folder with
      };
      "syncs" = {
        path = "/home/i/sync";
        devices = [ "realme" ];
        ignorePerms = false; 
      };
      "essentials" = {
        path = "/home/i/d/Essentials";
        devices = [ "realme" ];
      };
    };
  };

  fstrim.enable = true;
  getty.autologinUser = "i" ;
  atd.enable = true;

  pipewire = {
    enable = true;
    alsa = {
      enable = true;
      support32Bit = true;
    };
    wireplumber.enable = true;
    pulse.enable = true;
    jack.enable = true;
  };
};

environment.systemPackages = with pkgs; [
  firefox
  gitFull
  ntfs3g
  neovim
  fira-code
];

nixpkgs.overlays = with inputs; [emacs-overlay.overlay nur.overlay ];

nixpkgs.config.packageOverrides = pkgs: {
  vaapiIntel = pkgs.vaapiIntel.override { enableHybridCodec = true; };
};
hardware = {
  opengl = {
    enable = true;
    extraPackages = with pkgs; [
      vaapiVdpau
      libvdpau-va-gl
      intel-media-driver
      vaapiIntel
    ];
  };
  pulseaudio.support32Bit = true;
};

fonts = {
  fonts = with pkgs; [
    emacs-all-the-icons-fonts
    material-icons
    material-design-icons
    noto-fonts-emoji
    weather-icons
    font-awesome
    symbola
  ];

  enableDefaultFonts = false;

  # this fixes emoji stuff
  fontconfig = {
    defaultFonts = {
      monospace = [
        "ComicCodeLigatures"
        "Fira Code Nerd Font"
        "JetBrains Mono Nerd Font"
        "Noto Color Emoji"
      ];
      sansSerif = ["Fira Code Nerd Font" "ComicCodeLigatures"];
      serif = ["Noto Serif" "Fira Code Nerd Font"];
      emoji = ["Noto Color Emoji" "all-the-icons" "FontAwesome" "Material Icons" "symbola" "Material Design Icons" ];
    };
  };
};

environment = {
  loginShellInit = ''
    dbus-update-activation-environment --systemd DISPLAY

  '';

  variables = {
    NIXOS_OZONE_WL = "1";
    EDITOR = "nvim";
    BROWSER = "firefox";
    __GL_GSYNC_ALLOWED = "0";
    __GL_VRR_ALLOWED = "0";
    _JAVA_AWT_WM_NONEREPARENTING = "1";
    SSH_AUTH_SOCK = "/run/user/1000/keyring/ssh";
    DISABLE_QT5_COMPAT = "0";
    ANKI_WAYLAND = "1";
    DIRENV_LOG_FORMAT = "";
    WLR_DRM_NO_ATOMIC = "1";
    QT_AUTO_SCREEN_SCALE_FACTOR = "1";
    QT_QPA_PLATFORM = "wayland";
    QT_QPA_PLATFORMTHEME = "qt5ct";
    QT_STYLE_OVERRIDE = "kvantum";
    MOZ_ENABLE_WAYLAND = "1";
    WLR_NO_HARDWARE_CURSORS = "1";
    GTK_THEME = "Catppuccin-Mocha-Standard-Rosewater-Dark";
    WLR_DRM_DEVICES = "/dev/dri/card1:/dev/dri/card0";

  };

};

environment.interactiveShellInit = ''

'';

users.users.i = {
  isNormalUser = true;
  extraGroups = [
    "wheel"
    "gitea"
    "docker"
    "systemd-journal"
    "audio"
    "plugdev"
    "wireshark"
    "video"
    "input"
    "lp"
    "networkmanager"
    "power"
    "nix"
  ];
  uid = 1000;
  shell = pkgs.zsh;
  # initialPassword = "changeme";
};

}
