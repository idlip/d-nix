{pkgs, lib, config, vars, inputs, ...}:
{
  # WARNING : This file was generated by d-setup.org
  # DO NOT MODIFY THIS FILE!
  # Any changes made here will be overwritten.

  imports = [

{
  services = {
    gpg-agent = {
      enable = true;
      enableSshSupport = true;
      enableZshIntegration = true;
      pinentryFlavor = "gnome3";
    };
  };
}

{
  services= {
    wlsunset = {
      enable = true;
      latitude = "19.0";
      longitude = "72.0";
      temperature.day = 6500;
      temperature.night = 4000;
      systemdTarget = "graphical-session.target";
    };
  };
}

{
  services.kdeconnect.enable = true;
}

{
  xdg = {
    enable = true;
    cacheHome = config.home.homeDirectory + "/.local/cache";

    mimeApps = let
      browser = ["d-stuff.desktop"];
    in {
      enable = true;

      defaultApplications = {
        "application/x-extension-htm" = browser;
        "application/x-extension-html" = browser;
        "application/x-extension-shtml" = browser;
        "application/x-extension-xht" = browser;
        "application/x-extension-xhtml" = browser;
        "application/xhtml+xml" = browser;
        "text/html" = browser;
        "x-scheme-handler/about" = browser;
        "x-scheme-handler/chrome" = ["chromium-browser.desktop"];
        "x-scheme-handler/ftp" = browser;
        "x-scheme-handler/http" = browser;
        "x-scheme-handler/https" = browser;
        "x-scheme-handler/unknown" = browser;

        "audio/*" = ["mpv.desktop"];
        "video/*" = ["mpv.dekstop"];
        "image/*" = ["imv.desktop"];
        "application/json" = browser;
        "application/pdf" = ["sioyek.desktop"];
        "x-scheme-handler/magnet" = ["d-stuff.desktop"];
        "application/epub+zip" = ["sioyek.desktop"];
        "application/zip" = ["sioyek.desktop"];
        "application/x.bittorrent" = ["d-stuff.desktop"];
      };

      associations.added = {
        "x-scheme-handler/magnet" = ["d-stuff.desktop"];
      };
    };

    userDirs = {
      enable = true;
      createDirectories = false;
      documents =  "${config.home.homeDirectory}/docs";
      download = "${config.home.homeDirectory}/dloads";
      videos = "${config.home.homeDirectory}/vids";
      music = "${config.home.homeDirectory}/music";
      pictures = "${config.home.homeDirectory}/pics";
      extraConfig = {
        xdg_screenshots_dir = "${config.xdg.userDirs.pictures}/sshots";
      };
    };

  };

  xdg.dataFile."applications/d-stuff.desktop".text = ''
  [desktop entry]
  type=application
  name=stuff handler
  exec=d-stuff %u
  '';

}

{
  imports = [
    inputs.nix-index-db.hmModules.nix-index
  ];
  programs.nix-index.enable = true;
}

{
  programs.man = {
    enable = true;
    generateCaches = true; # will take little time
  };
}

{
  programs = {

    gpg = {
      enable = true;
      homedir = "${config.xdg.dataHome}/gnupg";
    };

    tealdeer = {
      enable = true;
      settings = {
        display = {
	        compact = false;
	        use_pager = true;
        };
        updates = {
	        auto_update = true;
        };
      };
    };
  };
}

{
  programs.git = {
    enable = true;
    package = pkgs.gitFull;

    delta = {
      enable = true;
      # TODOTHIS
      # options.map-styles = "bold purple => syntax ${default.xcolors.mauve}, bold cyan => syntax ${default.xcolors.blue}";
    };

    extraConfig = {
      diff.colorMoved = "default";
      merge.conflictstyle = "diff3";
    };

    aliases = {
      a = "add";
      b = "branch";
      c = "commit";
      ca = "commit --amend";
      cm = "commit -m";
      cho = "checkout";
      d = "diff";
      ds = "diff --staged";
      p = "push";
      pf = "push --force-with-lease";
      pl = "pull";
      l = "log";
      r = "rebase";
      s = "status --short";
      ss = "status";
      forgor = "commit --amend --no-edit";
      graph = "log --all --decorate --graph --oneline";
      logrep = "log --decorate --oneline --grep=";
      oops = "checkout --";
    };

    ignores = ["*~" "*.swp" "*result*" ".direnv" "node_modules"];

    # signing = {
    #   key = "";
    #   signByDefault = true;
    # };

    userEmail = "igoldlip@gmail.com";
    userName = "Dilip";
    # editor = "";
  };

}

{
  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;
    enableZshIntegration = true;
  };
}

{
  programs.foot = {
    enable = true;

    # doesnt work properly; Enable it in hyprland or sway config
    server.enable = false;

    settings = {
      main = {
        term = "xterm-256color";
        font = "Code D OnePiece:size=12, Noto Color Emoji:size=15";
        font-bold = "Code D Lip:size=12, Noto Color Emoji:size=15";
        letter-spacing = "1";
        box-drawings-uses-font-glyphs = "no";
        pad = "0x0center";
        notify = "notify-send -a \${app-id} -i \${app-id} \${title} \${body}";
        selection-target = "clipboard";
	      dpi-aware = "true";
      };

      scrollback = {
        lines = 10000;
        multiplier = 3;
      };

      url = {
        launch = "d-stuff \${url}";
        label-letters = "sadfjklewcmpgh";
        osc8-underline = "url-mode";
        protocols = "http, https, ftp, ftps, file";
        uri-characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.,~:;/?#@!$&%*+=\"'()[]";
      };

      key-bindings = {
        clipboard-copy = "Control+Shift+c";
        clipboard-paste = "Control+Shift+v Control+y";
        primary-paste = "Shift+Insert";

      };

      colors = {
        background = "050505";
        foreground = "ffffff";
        regular0 = "030303";
        regular1 = "ff8059";
        regular2 = "44bc44";
        regular3 = "d0bc00";
        regular4 = "2fafff";
        regular5 = "feacd0";
        regular6 = "00d3d0";
        regular7 = "bfbfbf";
        bright0 = "595959";
        bright1 = "ef8b50";
        bright2 = "70b900";
        bright3 = "c0c530";
        bright4 = "79a8ff";
        bright5 = "b6a0ff";
        bright6 = "6ae4b9";
        bright7 = "ffffff";
        alpha = "0.9";
      };

      mouse = {
        hide-when-typing = "yes";
      };

    };
  };
}

{
  programs.zellij = {
    enable = true;
    settings = {

    };
  };
}

{
  # does not read local path properly. so ~/.local/bin does not work
  # services.emacs = {
  #   enable = true;
  #   socketactivation.enable = true;
  # };

  programs.emacs = {
    enable = true;
    package = pkgs.emacs29-pgtk;
    extraPackages = (epkgs: (with epkgs; [
      treesit-grammars.with-all-grammars
      eat vundo undo-fu-session flycheck helpful flycheck-languagetool
      no-littering rainbow-delimiters rainbow-mode
      vertico orderless consult marginalia embark org-modern corfu cape corfu-terminal
      org olivetti nerd-icons nerd-icons-completion nerd-icons-dired async dirvish
      embark-consult consult-eglot consult-flycheck markdown-mode nix-mode
      reddigg hnreader howdoyou mingus magit webpaste org-present
      shrface shr-tag-pre-highlight nov devdocs-browser reformatter
      beframe denote tempel tempel-collection avy
      sdcv elfeed elfeed-org powerthesaurus jinx meow
      doom-modeline el-fetch ox-hugo envrc dashboard
      ement kind-icon speed-type vc-backup aria2
      ess org-re-reveal auctex julia-mode
      toc-org el-patch disable-mouse org-ql
    ])
    );
  };

  xdg.configFile."emacs/init.el".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/d-emacs/init.el";

  xdg.configFile."emacs/early-init.el".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/d-emacs/early-init.el";

}

{
  programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;
    vimdiffAlias = true;
  };
}

{
  programs.helix = {
    enable = true;

    settings = {
      theme = "gruvbox_dark_hard";

      keys.normal = {
        "{" = "goto_prev_paragraph";
        "}" = "goto_next_paragraph";
        "X" = "extend_line_above";
        "esc" = ["collapse_selection" "keep_primary_selection"];
        space.space = "file_picker";
        space.w = ":w";
        space.q = ":bc";
        "C-q" = ":xa";
        space.u = {
          f = ":format"; # format using LSP formatter
          w = ":set whitespace.render all";
          W = ":set whitespace.render none";
        };
      };

      keys.insert = {
        A-x = "normal_mode";
        j = { k = "normal_mode"; };
      };

      keys.select = {
        "%" = "match_brackets";
      };

      editor = {
        line-number = "relative";
        cursorline = true;
        auto-completion = true;
        auto-format = true;
        mouse = true;
        color-modes = true;
        idle-timeout = 1;
        scrolloff = 5;
        bufferline = "always";
        true-color = true;
        rulers = [80];
        indent-guides = {
          render = true;
        };
        gutters = ["diagnostics" "line-numbers" "spacer" "diff"];

        statusline = {
          separator = "";
          left = ["mode" "selections" "spinner" "file-name" "total-line-numbers"];
          center = [];
          right = ["diagnostics" "file-encoding" "file-line-ending" "file-type" "position-percentage" "position"];
          mode = {
            normal = "NORMAL";
            insert = "INSERT";
            select = "SELECT";
          };
        };

        whitespace.characters = {
          space = "·";
          nbsp = "⍽";
          tab = "→";
          newline = "⤶";
        };

        cursor-shape = {
          insert = "bar";
          normal = "block";
          select = "block";
        };

        auto-pairs = {
          "(" = ")";
          "{" = "}";
          "[" = "]";
          "\"" = "\"";
          "`" = "`";
          "<" = ">";
        };

        lsp = {
          enable = true;
          display-messages = true;
          display-inlay-hints = true;
          snippets = true;
        };

      };
    };

  };
}

{
  home.packages = with pkgs; [
    # better to manage it via development shell

    ##### shell #####
    nodePackages.bash-language-server shellcheck

    ##### core comp ####
    gcc gnumake tree-sitter
    parallel
  ];
}

{
  home.packages = with pkgs; [
    ### python
    # python311packages.python-lsp-server
    # nodePackages.pyright
    ruff
    (python311.withPackages(ps: with ps; [
      python-lsp-server
      biopython
      python-lsp-black
      python-lsp-ruff
    ]))
  ];
}

{
  home.packages = with pkgs; [
    # r
    (rWrapper.override {
      packages = with rPackages; [
        ggplot2
        # dplyr
        # tidyverse # set of 9 packages
        languageserver
        lintr
        styler
        # stringr
        BiocManager
        # httr
        # ggvis
        # shiny
        # rio
        # rmarkdown
      ]; })
  ];
}

{
  home.packages = with pkgs; [
    # basic stack
    # nodepackages.vscode-langservers-extracted
    hugo monolith
  ];
}

{
  home.packages = with pkgs; [
    ##### science ####
    # blast ncbi sra_toolkit
    julia
  ];
}

{
  home.packages = with pkgs; [
    texlive.combined.scheme-full
  ];
}

{
  programs.sioyek = {
    enable = true;
    bindings = {
      "move_up" = "k";
      "move_down" = "j";
      "move_left" = "h";
      "move_right" = "l";
      "screen_down" = [ "d" "" ];
      "screen_up" = [ "u" "" ];
      "fit_to_page_width" = "<f9>";
      "fit_to_page_width_smart" = "<f10>";
      "toggle_fullscreen" = [ "f" "<f11>"  ];
      "quit" = "q";
      "toggle_custom_color" = "<f8>";
      "toggle_highlight" = "<f1>";
      "command" = "<A-x>";
      "toggle_dark_mode" = "i";
      "toggle_presentation_mode" = "<f5>";
      "toggle_statusbar" = "B";
    };

    config = {
      "background_color" = "0.0 0.0 0.0";
      "dark_mode_background_color" = "0.0 0.0 0.0";
      "custom_background_color" = "0.180 0.204 0.251";
      "custom_text_color" = "0.847 0.871 0.914";
      "dark_mode_contrast" = "0.8";
      "text_highlight_color" = "1.0 1.0 0.0";
      "search_url_s" = "https://scholar.google.com/scholar?q";
      "search_url_l" = "http://gen.lib.rus.ec/scimag/?q";
      "search_url_g" = "https://www.google.com/search?q";
      "middle_click_search_engine" = "s";
      "shift_middle_click_search_engine" = "l";
      "zoom_inc_factor" = "1.2";
      "flat_toc" = "0";
      "should_launch_new_instance" = "1";
      "should_launch_new_window" = "1";
      "default_dark_mode" = "1";
      "sort_bookmarks_by_location" = "1";
      "ui_font" = "'Code D Haki'";
      "font_size" = "24";
      "wheel_zoom_on_cursor" = "1";
      "status_bar_font_size" = "22";
      "collapsed_toc" = "1";
      "ruler_mode" = "1";
      "single_click_selects_words" = "1";
      "item_list_prefix" = ">";
      "#ignore_whitespace_in_presentation_mode" = "0";
      "prerender_next_page_presentation" = "1";
    };
  };
}

{
  home.packages = with pkgs; [
    mupdf poppler_utils ghostscript # for doc-view
  ];
}

{
  programs = {

    firefox = {
      enable = true;
      # package = pkgs.firefox-wayland; # is there difference?
      profiles.ihome = {
        isDefault = true;
        # extensions = with pkgs.nur.repos.rycee.firefox-addons; [
        #   ff2mpv
        #   vimium
        #   languagetool
        #   ublock-origin
        #   darkreader
        #   libredirect
        #   multi-account-containers
        #   vertical-tabs-reloaded
        # ];

        settings = {
          "browser.startup.homepage" = "about:blank";
          "browser.urlbar.placeholderName" = "Time to get Productive...";
          "gfx.webrender.all" = true;
          "gfx.webrender.enabled" = true;
          "media.av1.enabled" = false;
          "media.ffmpeg.vaapi.enabled" = true;
          "media.hardware-video-decoding.force-enabled" = true;
          "media.navigator.mediadatadecoder_vpx_enabled" = true;
          "signon.rememberSignons" = false;
          "app.normandy.api_url" = "";
          "app.normandy.enabled" = false;
          "app.shield.optoutstudies.enabled" = false;
          "beacon.enabled" = false;
          "breakpad.reportURL" = "";
          "browser.aboutConfig.showWarning" = false;
          "browser.cache.offline.enable" = false;
          "browser.crashReports.unsubmittedCheck.autoSubmit" = false;
          "browser.crashReports.unsubmittedCheck.autoSubmit2" = false;
          "browser.crashReports.unsubmittedCheck.enabled" = false;
          "browser.disableResetPrompt" = true;
          "browser.newtab.preload" = false;
          "browser.newtabpage.activity-stream.section.highlights.includePocket" = false;
          "extensions.pocket.enabled" = false;
          "browser.newtabpage.enhanced" = false;
          "browser.newtabpage.introShown" = true;
          "browser.safebrowsing.appRepURL" = "";
          "browser.safebrowsing.blockedURIs.enabled" = false;
          "browser.safebrowsing.downloads.enabled" = false;
          "browser.safebrowsing.downloads.remote.enabled" = false;
          "browser.safebrowsing.downloads.remote.url" = "";
          "browser.safebrowsing.enabled" = false;
          "browser.safebrowsing.malware.enabled" = false;
          "browser.safebrowsing.phishing.enabled" = false;
          "browser.selfsupport.url" = "";
          "browser.send_pings" = false;
          "browser.sessionstore.privacy_level" = 2;
          "browser.startup.homepage_override.mstone" = "ignore";
          "browser.tabs.crashReporting.sendReport" = false;
          "browser.urlbar.groupLabels.enabled" = false;
          "browser.urlbar.quicksuggest.enabled" = false;
          "browser.urlbar.speculativeConnect.enabled" = false;
          "datareporting.healthreport.service.enabled" = false;
          "datareporting.healthreport.uploadEnabled" = false;
          "datareporting.policy.dataSubmissionEnabled" = false;
          "device.sensors.ambientLight.enabled" = false;
          "device.sensors.enabled" = false;
          "device.sensors.motion.enabled" = false;
          "device.sensors.orientation.enabled" = false;
          "device.sensors.proximity.enabled" = false;
          "dom.battery.enabled" = false;
          "dom.event.clipboardevents.enabled" = true;
          "dom.webaudio.enabled" = false;
          "experiments.activeExperiment" = false;
          "experiments.enabled" = false;
          "experiments.manifest.uri" = "";
          "experiments.supported" = false;
          "extensions.getAddons.cache.enabled" = false;
          "extensions.getAddons.showPane" = false;
          "extensions.greasemonkey.stats.optedin" = false;
          "extensions.greasemonkey.stats.url" = "";
          "extensions.shield-recipe-client.api_url" = "";
          "extensions.shield-recipe-client.enabled" = false;
          "extensions.webservice.discoverURL" = "";
          "fission.autostart" = true;
          "media.autoplay.default" = 1;
          "media.autoplay.enabled" = false;
          "media.eme.enabled" = false;
          "media.gmp-widevinecdm.enabled" = false;
          "media.navigator.enabled" = false;
          "media.video_stats.enabled" = false;
          "network.IDN_show_punycode" = true;
          "network.allow-experiments" = false;
          "network.captive-portal-service.enabled" = false;
          "network.cookie.cookieBehavior" = 1;
          "network.dns.disablePrefetch" = true;
          "network.dns.disablePrefetchFromHTTPS" = true;
          "network.http.referer.spoofSource" = true;
          "network.http.speculative-parallel-limit" = 0;
          "dom.security.https_only_mode" = true;
          "network.predictor.enable-prefetch" = false;
          "network.predictor.enabled" = false;
          "network.prefetch-next" = false;
          "network.trr.mode" = 5;
          "privacy.donottrackheader.enabled" = true;
          "privacy.donottrackheader.value" = 1;
          "privacy.firstparty.isolate" = true;
          "privacy.trackingprotection.cryptomining.enabled" = true;
          "privacy.trackingprotection.enabled" = true;
          "privacy.trackingprotection.fingerprinting.enabled" = true;
          "privacy.trackingprotection.pbmode.enabled" = true;
          "privacy.usercontext.about_newtab_segregation.enabled" = true;
          "security.ssl.disable_session_identifiers" = true;
          "services.sync.prefs.sync.browser.newtabpage.activity-stream.showSponsoredTopSite" = false;
          "browser.newtabpage.activity-stream.showSponsored" = false;
          "signon.autofillForms" = false;
          "toolkit.telemetry.archive.enabled" = false;
          "toolkit.telemetry.bhrPing.enabled" = false;
          "toolkit.telemetry.cachedClientID" = "";
          "toolkit.telemetry.enabled" = false;
          "toolkit.telemetry.firstShutdownPing.enabled" = false;
          "toolkit.telemetry.hybridContent.enabled" = false;
          "toolkit.telemetry.newProfilePing.enabled" = false;
          "toolkit.telemetry.prompted" = 2;
          "toolkit.telemetry.rejected" = true;
          "toolkit.telemetry.reportingpolicy.firstRun" = false;
          "toolkit.telemetry.server" = "";
          "toolkit.telemetry.shutdownPingSender.enabled" = false;
          "toolkit.telemetry.unified" = false;
          "toolkit.telemetry.unifiedIsOptIn" = false;
          "toolkit.telemetry.updatePing.enabled" = false;
          "webgl.disabled" = true;
          "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
          "webgl.renderer-string-override" = " ";
          "webgl.vendor-string-override" = " ";
          "browser.urlbar.update2.engineAliasRefresh" = true;
          "signon.passwordEditCapture.enabled" = false;
          "browser.search.hiddenOneOffs" = "Google,Yahoo,Bing,Amazon.com,Twitter";
          "browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts" = false;
          "browser.urlbar.trimURLs" = false;
          "findbar.modalHighlight" = true;
          "browser.fullscreen.autohide" = true;
          "browser.newtabpage.activity-stream.topSitesRows" = 0;
          "browser.urlbar.quickactions.enabled" = true;
          "pdfjs.annotationEditorMode" = 0;
          "pdfjs.annotationmode" = 2;
          "layers.acceleration.force-enabled" = true;
          "layout.css.backdrop-filter.enabled" = true;
          "svg.context-properties.content.enabled" = true;
        };

        search = {
          default = "DuckDuckGo";
          force = true;
          engines = {
            "Nixpkgs-Package Search" = {
              urls = [{ template = "https://search.nixos.org/packages?channel=unstable&size=250&sort=relevance&type=packages&query={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@nps" ];
            };

            "Nixpkgs-Modules Search" = {
              urls = [{ template = "https://search.nixos.org/options?channel=unstable&size=200&sort=relevance&query={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@nms" ];
            };

            "NixOS-Wiki Search" = {
              urls = [{ template = "https://nixos.wiki/index.php?search={searchTerms}&go=Go"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@nws" ];
            };

            "Home-Manager Search" = {
              urls = [{ template = "https://mipmip.github.io/home-manager-option-search/?query={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@hms" ];
            };

            "GitHub-Code Search" = {
              urls = [{ template = "https://github.com/search?q={searchTerms}&type=code"; }];
              iconUpdateURL = "https://github.githubassets.com/favicons/favicon-dark.svg";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@gcs" ];
            };

            "Noogle.dev Search" = {
              urls = [{ template = "https://noogle.dev/?term=%22{searchTerms}%22"; }];
              iconUpdateURL = "https://noogle.dev/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@ngd" "@nog" ];
            };

            "Nixpkgs PRs" = {
              urls = [{ template = "https://nixpk.gs/pr-tracker.html?pr={searchTerms}"; }];
              iconUpdateURL = "https://nixos.org/favicon.png";
              updateInterval = 24 * 60 * 60 * 1000; # every day
              definedAliases = [ "@npr" ];
            };
          };

          order = [
            "DuckDuckGo"
          ];
        };

        userChrome = builtins.readFile ./configs/userChrome.css;

      };
    };

    librewolf = {
      enable = true;
      settings = {
        "gfx.webrender.all" = true;
        "gfx.webrender.enabled" = true;
        "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
        "layers.acceleration.force-enabled" = true;
        "layout.css.backdrop-filter.enabled" = true;
        "media.av1.enabled" = false;
        "media.ffmpeg.vaapi.enabled" = true;
        "media.hardware-video-decoding.force-enabled" = true;
      };
    };

    chromium = {
      enable = true;
      package = pkgs.brave;
      commandLineArgs = ["--enable-features=TouchpadOverscrollHistoryNavigation"];
      extensions = [
        {id = "cjpalhdlnbpafiamejdnhcphjbkeiagm";} # ublock origin
        {id = "dbepggeogbaibhgnhhndojpepiihcmeb";} # vimium
        {id = "eimadpbcbfnmbkopoojfekhnkhdbieeh";} # dark-reader
        {id = "lljedihjnnjjefafchaljkhbpfhfkdic";} # jiffy reader
        {id = "mnjggcdmjocbbbhaepdhchncahnbgone";} # sponsorblock
      ];
    };
  };
}

{
  services = {
    mpd = {
      enable = true;
      musicDirectory = config.xdg.userDirs.music;
      network = {
        listenAddress = "127.0.0.1";
        port = 6600;
        startWhenNeeded = true;
      };
      extraConfig = ''
      audio_output {
        type            "pipewire"
        name            "pipewire sound server"
      }
      auto_update "yes"
    '';
    };

    playerctld.enable = true;

  };

  # if mpd not working, check here
  # home.sessionvariables.mpd_host = config.services.mpd.network.listenaddress;
}

{
  programs = {
    ncmpcpp = {
      enable = true;

      settings = {
        ncmpcpp_directory = "${config.xdg.configHome}/ncmpcpp";
        lyrics_directory = "${config.xdg.dataHome}/lyrics";
        message_delay_time = "1";
        song_list_format = "{$4%a - }{%t}|{$8%f$9}$r{$3(%l)$9}";
        song_status_format = "$b{{$8'%t'}} $3by {$4%a{ $3in $7%b{ (%y)}} $3}|{$8%f}";
        song_library_format = "{%n - }{%t}|{%f}";
        alternative_header_first_line_format = "$b$1$aqqu$/a$9 {%t}|{%f} $1$atqq$/a$9$/b";
        alternative_header_second_line_format = "{{$4$b%a$/b$9}{ - $7%b$9}{ ($4%y$9)}}|{%d}";
        current_item_prefix = "$(cyan)$r$b";
        current_item_suffix = "$/r$(end)$/b";
        current_item_inactive_column_prefix = "$(magenta)$r";
        current_item_inactive_column_suffix = "$/r$(end)";
        playlist_display_mode = "columns";
        browser_display_mode = "columns";
        progressbar_look = "->";
        media_library_primary_tag = "album_artist";
        media_library_albums_split_by_date = "no";
        startup_screen = "media_library";
        display_volume_level = "no";
        ignore_leading_the = "yes";
        external_editor = "nvim";
        use_console_editor = "yes";
        empty_tag_color = "magenta";
        main_window_color = "white";
        progressbar_color = "black:b";
        progressbar_elapsed_color = "blue:b";
        statusbar_color = "red";
        statusbar_time_color = "cyan:b";
      };

      bindings =
        [
          { key = "k"; command = [ "select_item" "scroll_up" ]; }
          { key = "+"; command = "show_clock"; }
          { key = "="; command = "volume_up"; }
          { key = "j"; command = "scroll_down"; }
          { key = "k"; command = "scroll_up"; }
          { key = "ctrl-u"; command = "page_up"; }
          { key = "ctrl-d"; command = "page_down"; }
          { key = "u"; command = "page_up"; }
          { key = "d"; command = "page_down"; }
          { key = "h"; command = [ "previous_column" "jump_to_parent_directory" ]; }
          { key = "l"; command = [ "next_column" "enter_directory" "run_action" "play_item" ]; }
          { key = "."; command = "show_lyrics"; }
          { key = "n"; command = "next_found_item"; }
          { key = "n"; command = "previous_found_item"; }
          { key = "j"; command = "move_sort_order_down"; }
          { key = "k"; command = "move_sort_order_up"; }
          { key = "m"; command = [ "show_media_library" "toggle_media_library_columns_mode" ]; }
          { key = "t"; command = "show_tag_editor"; }
          { key = "v"; command = "show_visualizer"; }
          { key = "g"; command = "move_end"; }
          { key = "g"; command = "move_home"; }
          { key = "u"; command = "update_database"; }
          { key = "s"; command = [ "reset_search_engine" "show_search_engine" ]; }
          { key = "f"; command = [ "show_browser" "change_browse_mode" ]; }
          { key = "x"; command = "delete_playlist_items"; }
          { key = "p"; command = "show_playlist"; }
        ];

    };
  };
}

{
  programs = {
    mpv = {
      enable = true;
      scripts = with pkgs.mpvScripts; [ mpris ];

      bindings = {
        l = "seek  5";
        h = "seek -5";
        k = "seek  30";
        j = "seek -30";
        J = "cycle sub";
        K = "cycle sub down";
      };

      config = {
        force-window = true;
        osc = true;
        hwdec = "auto-safe";
        vo = "gpu";
        profile = "gpu-hq";
        gpu-context = "wayland";
        sub-border-size = 4.0;
        sub-shadow-color = "0.0/0.0/0.0";
        sub-shadow-offset = 1;
        sub-auto = "fuzzy";
        msg-level = "all=error";
        # ytdl-format = "bestvideo[height<=?1080]+bestaudio/best";
        ytdl-format = "best";
        save-position-on-quit = true;
        slang = "eng,en,eng,english";
        alang = "jp,jpn,en,eng";
        sub-font = "impress bt";
        autofit = "50%";
        sub-font-size = "48";
        speed = "1.5";
      };
    };
  };
}

{
  programs = {
    yt-dlp = {
      enable = true;
      settings = {
        embed-thumbnail = true;
        embed-metadata = true;
        embed-subs = true;
        sub-langs = "all";
      };
    };
  };
}

{
  xdg.configFile."ytfzf/conf.sh".text = ''
      #video_pref="248+bestaudio/best"
      video_pref="[height<=1080]"
      sub_link_count=1
      show_thumbnails=0
      invidious_instance="https://vid.puffyan.us"
      external_menu () {
           #bemenu -w 0.98 -l 24 -p '  play '
           rofi -dmenu -i -config ~/.config/rofi/list.rasi -p '󰑈  play'
      }

      thumbnail_quality=high
      scrape=youtube
      #is_sort=1
      #search_sort_by=upload_date

    '';
}

{
  programs = {
    imv = {
      enable = true;
      settings = {
        # check man imv(5)
        options.background = "050505";
        aliases.x = "close";
        binds = {
          p = "prev";
          n = "next";
          "<Shift+d>" = "exec rm \"$imv_current_file\"; close";
          r = "exec mogrify -rotate 90 \"$imv_current_file\"";
        };
      };
    };
  };
}

{
  home.packages = with pkgs; [
    # audio control
    pavucontrol
    playerctl
    pulsemixer
    pamixer
    transmission_4-gtk

    mpc_cli
    ytfzf ani-cli ytmdl freetube
    mangal
  ];
}

{
  # the thing is you won't get xdg-portal-hyprland
  # refer: https://github.com/nix-community/home-manager/issues/1167
  # # enable hyprland
  wayland.windowManager.hyprland = {
    enable = true;
    systemd.enable = true;

    extraConfig = ''
    source					= ~/.config/hypr/hyprsea.conf
    '';

    settings = {

      decoration = {
        rounding = 10;
        inactive_opacity = 0.8;
        active_opacity = 0.9;
        fullscreen_opacity = 1.0;
        dim_inactive = false;
        shadow_offset = "0 5";
        "col.shadow" = "rgba(00000099)";

        blur = {
          enabled = 1;
          size = 6;
          passes = 3;
          new_optimizations = true;
          ignore_opacity = true;
        };
      };

      "$mod" = "super";

      input = {
        kb_layout = "us";
        kb_options = "ctrl:nocaps";
        follow_mouse = 0;
        sensitivity = 0.1;
        #    repeat_delay = 250

        touchpad = {
          natural_scroll = "no";
          disable_while_typing = 1;
          clickfinger_behavior = 0; # double tap > right click
          middle_button_emulation = 1;
          tap-to-click = 1;
        };
      };

      "device:at-translated-set-2-keyboard" = {
        enabled=true;
      };

      general  =  {
        gaps_in = 5;
        gaps_out = 15;
        border_size = 2;
        "col.active_border"  =  "rgba(e5b9c6ff) rgba(c293a3ff) 45deg";
        "col.inactive_border"  =  "0xff382d2e";
        no_border_on_floating  =  false; # enable border on float window
        layout  =  "dwindle";
        no_cursor_warps  =  false;
      };

      misc = {
        disable_hyprland_logo = true;
        disable_splash_rendering = true;
        mouse_move_enables_dpms = true;
        enable_swallow = true;
        swallow_regex = "^(foot)$";
        vrr = false;
      };

      animations = {
        enabled = true;
      };

      dwindle = {
        pseudotile = true;
        preserve_split = true;
        force_split = true;
        no_gaps_when_only = false;
        default_split_ratio = 1.0;
        smart_split = false;
      };

      master = {
        new_is_master = false;
        new_on_top = false;
        allow_small_split = true;
        no_gaps_when_only = false;
      };

      gestures  =  {
        workspace_swipe = 1;
        workspace_swipe_distance = 400;
        workspace_swipe_invert = 1;
        workspace_swipe_min_speed_to_force = 30;
        workspace_swipe_cancel_ratio = 0.5;
      };

      bindm = [
        # mouse movements
        "$mod, mouse:272, movewindow"
        "$mod, mouse:273, resizewindow"
        "$mod alt, mouse:272, resizewindow"
      ];


    };
  };

  # naming it main.conf becuase hm writes hyprland.conf, so just as an import
  xdg.configFile."hypr/hyprsea.conf".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/hyprsea.conf";
}

{
  home.packages = with pkgs; [
    # screenshot
    grim
    slurp

    libnotify libsixel bemenu
    brightnessctl
    wtype swaybg swayidle gtklock
    rofi-wayland

    # utils
    # ocrscript
    wl-screenrec
    wl-clipboard
  ];
}

{
  # cursor theme
  home.pointerCursor = {
    name = "Bibata-Modern-Classic";
    package = pkgs.bibata-cursors;
    size = 24;
    gtk.enable = true;
  };

  gtk = {
    enable = true;

    theme = {
      name = "adw-gtk3-dark";
      package = pkgs.adw-gtk3;
    };

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    font = {
      name = "Code D Haki";
      size = 17;
    };

    gtk2.configLocation = "${config.xdg.configHome}/gtk-2.0/gtkrc";

    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
    };

    gtk2.extraConfig = ''
    gtk-xft-antialias=1
    gtk-xft-hinting=1
    gtk-xft-hintstyle="hintslight"
    gtk-xft-rgba="rgb"
    '';

  };
}

{
  qt = {
    enable = true;
    platformTheme = "gtk3";
    style.name = "adwaita-dark";
  };
}

{
  programs.waybar = {
    enable = true;

    settings = {
      mainBar = {
        layer = "top";
        position = "top";
        # height = 15;
        # spacing = 7;
        fixed-center = true;
        exclusive = true;

        modules-left = [
	        "custom/launcher"
	        "hyprland/workspaces"
          "wlr/taskbar"
	        "hyprland/window"
	        "hyprland/submap"
        ];

        modules-center = [
	        "custom/recorder" "clock" "mpd" "mpris"
        ];

        modules-right = [ "tray" "network" "battery" "memory" "pulseaudio" "custom/power" ];

        "hyprland/workspaces" = {
	        format = "{icon}";
          disable-scroll = true;
          all-outputs = true;
	        active-only = false;
          show-special = true;
	        on-click = "activate";
	        format-icons = {
		        active = "";
		        default = "";
		        "1" = "1";
		        "2" = "2";
		        "3" = "3";
		        "4" = "4";
		        "5" = "5";
		        "6" = "6";
	        };
        };

        "hyprland/window" = {
	        "format" = "{}";
	        "separate-outputs" = true;
          "max-length" = 35;
	        "rewrite" = {
		        "(.*) - Mozilla Firefox" = "🦊 $1";
		        "(.*) - LibreWolf" = "🐺 $1";
		        "(.*) - Brave" = "🦁 $1";
		        "(.*) - GNU Emacs (.*)" = " $1";
		        "(.*).epub(.*)" = "󰂽 $1";
		        "(.*)foot" = " Terminal $1";
	        };
        };

        "hyprland/submap" = {
	        "format" = " {}";
	        "max-length" = 14;
	        "tooltip" = false;
        };

	      "wlr/taskbar"=  {
		      "format"=  "{icon}";
		      "icon-size"=  18;
          "spacing"=  0;
		      "tooltip-format"=  "{title}";
		      "on-click"=  "activate";
		      "on-click-middle"=  "close";
	      };


        "custom/launcher" = {
	        "format" = "";
	        "tooltip" = false;
	        "on-click" = "rofi -show drun";
          "interval" = 86400;
        };

        "battery" =  {
	        "bat" =  "BAT1";
	        "interval" =  60;
	        "states" =  {
            "good" = 95;
		        "warning" = 40;
		        "critical" = 20;
	        };
	        "max-length" =  25;
          "format" = "{icon} {capacity}%";
          "format-charging" = " {capacity}%";
          "format-plugged" = " {capacity}%";
          "format-alt" = "{time} {icon}";
          "format-icons" = ["󰂎" "󰁺" "󰁻" "󰁼" "󰁽" "󰁾" "󰁿" "󰂀" "󰂁" "󰂂" "󰁹"];

        };

        "mpd" = {
	        "format" = "{stateIcon} {title}  ";
	        "format-disconnected" = "  ";
	        "format-stopped" = "  ";
	        "title-len" = 20;
	        "interval" = 10;
	        "on-click" = "mpc toggle";
	        "state-icons" = {
		        "paused" = "";
		        "playing" = "";
	        };
	        "tooltip-format" = "Mpd Connected";
	        "tooltip-format-disconnected" = "";
        };

        "mpris" = {
	        "format" = " {player_icon} {dynamic}";
	        "format-paused" = "{status_icon} <i>{dynamic}</i>";
	        "player-icons" = {
		        "default" = "▶";
		        "mpv" = "🎵";
	        };
	        "status-icons" = {
		        "paused" = "⏸";
	        };
	        "max-length" = 20;
        };

	      "custom/power" = {
	        "format" = "⏻";
	        "on-click" = "d-power";
	        "tooltip" = false;
          "interval" = 86400;
        };

        "clock" = {
	        "tooltip-format" = "{:%A %B %d %Y | %H:%M}";
	        "format-alt" = " {:%a %d %b  %I:%M %p}";
	        "format" = " {:%H:%M}";
	        ##"timezones" = [ "Kolkata" ];
	        ##"max-length" = 200;
	        "interval" = 1;
        };

        "tray" = {
          "icon-size" = 23;
          "spacing" = 10;
        };

        "cpu" = {
	        "format" = "﬙ {usage: >3}%";
	        "on-click" = "footclient -e btop";
        };

        "memory" = {
	        "on-click" = "foot -e btop";
          "interval" = 30;
          "format" = "󰾆 {percentage}%";
          "format-alt" = "󰾅 {used}GB";
          "max-length" = 10;
        };

        "network" = {
	        # "interface" = "wlp2s0";
	        "format" = "⚠ Disabled";
	        "format-wifi" = " {bandwidthDownBytes}  {bandwidthUpBytes}";
          "format-ethernet" = " {bandwidthDownBytes}  {bandwidthUpBytes}";
	        "format-disconnected" = "⚠ Disconnected";
	        "on-click" = "d-wifi";
	        "interval" = 2;
        };

        "pulseaudio" = {
	        "scroll-step" = 2;
	        "format" = "{icon} {volume: >3}%";
	        "format-bluetooth" = "{icon} {volume: >3}%";
	        "format-muted" =" muted";
	        "on-click" = "pamixer -t";
	        "format-icons" = {
		        "headphones" = "";
		        "handsfree" = "";
		        "headset" = "";
		        "phone" = "";
		        "portable" = "";
		        "car" = "";
		        "default" = ["" ""];
	        };
        };

        "custom/recorder" = {
		      "format" = "{}";
		      "interval" = "once";
		      "exec" = "echo ' '";
		      "tooltip" = "false";
		      "exec-if" = "pgrep wl-screenrec";
		      "on-click" = "exec d-record";
		      "signal" = 8;
	      };

      };
    };
  };

  home.file.".config/waybar/style.css".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/style.css";

}

{
  programs = {
    eza = {
      enable = true;
      extraOptions = ["--group-directories-first" "--header"];
      icons = true;
      enableAliases = false;
    };

    ripgrep = {
      enable = true;
      arguments = [
        "--max-columns-preview"
        "--colors=line:style:bold"
        "--ignore-case"
      ];
    };

    btop = {
      enable = true;
      settings = {
        color_theme = "default";
        theme_background = false;
        vim_keys = true;
        shown_boxes = "proc cpu";
        rounded_corners = true ;
        graph_symbol = "block";
        proc_sorting = "memory";
        proc_reversed = false;
        proc_gradient = true;
      };
    };

    bat = {
      enable = true;
      extraPackages = with pkgs.bat-extras; [ batdiff batman batgrep batwatch ];
      config = {
        pager = "less -fr";
        theme = "TwoDark";
      };
    };

    ssh.enable = true;

    skim = {
      enable = true;
      enableZshIntegration = true;
      defaultCommand = "rg --files --hidden";
      changeDirWidgetOptions = [
        "--preview 'eza --icons --git --color always -T -L 3 {} | head -200'"
        "--exact"
      ];
    };
  };
}

{
  # symlink normal shell file to source for zsh
  home.file.".config/shell/source.sh".source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/source.sh";

  programs.zsh = {
    enable = true;
    dotDir = ".config/shell";
    autocd = true;
    enableCompletion = true;
    enableAutosuggestions = true;
    history.extended = true;

    dirHashes = {
      dl = "$HOME/dloads";
      docs = "$HOME/docs";
      code = "$HOME/d-git/codes";
      dots = "$HOME/d-git/d-nix";
      pics = "$HOME/pics";
      vids = "$HOME/vids";
      nixpkgs = "$HOME/d-git/forks/nixpkgs";
    };

    envExtra = ''
    export PATH="$PATH:$HOME/d-git/d-bin/bin:$HOME/.local/bin"
  	export EDITOR="emacsclient -nw -a 'nvim'"
    export BEMENU_OPTS="-i -s -l 10 -R 20 -p ' ' -c -B 2 -W 0.5 --hp 15 --fn 'Code D Ace 16' --nb '#121212' --ab '#121212' --bdr '#c6daff' --nf '#ffffff' --af '#ffffff' --hb '#9aff9a' --hf '#121212' --fb '#121212' --ff '#a6e3a1' --tb '#121212' --tf '#f9e2af' ";
    export VISUAL=$EDITOR
    export STARDICT_DATA_DIR="$HOME/.local/share/stardict"
    export GRIM_DEFAULT_DIR="$HOME/pics/sshots/"

    	#if [ -z $DISPLAY ] && [ "$(tty)" = "/dev/tty1" ]; then
      #  exec Hyprland
     	#fi
  	'';

    initExtra = ''
	source ~/.config/shell/source.sh

	source "${pkgs.zsh-syntax-highlighting}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
	source "${pkgs.zsh-history-substring-search}/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
	source "${pkgs.zsh-autosuggestions}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
	source "${pkgs.nix-zsh-completions}/share/zsh/plugins/nix/nix-zsh-completions.plugin.zsh"
	source "${pkgs.zsh-nix-shell}/share/zsh-nix-shell/nix-shell.plugin.zsh"
	source "${pkgs.zsh-autopair}/share/zsh/zsh-autopair/autopair.zsh"

	'';

    history = {
      save = 10000;
      size = 10000;
      expireDuplicatesFirst = true;
      ignoreDups = true;
      path = "${config.xdg.configHome}/shell/zsh_history";
    };
  };
}

{
  home.packages = with pkgs; [
    # archives
    zip
    unzip

    fzf
    # wonderful spells

    ffmpeg-full sdcv nq
    # utils
    file
    du-dust
    fd
    wget
  ];
}

{
  programs.aria2 = {
    enable = true;
    settings = {
      dir = "/home/idlip/dloads";
      file-allocation = "none";
      log-level = "warn";
      split = "10";
      max-connection-per-server = 10;
      min-split-size = "5m";
      bt-max-peers = "0";
      bt-request-peer-speed-limit = "0";
      max-overall-upload-limit = "512k";
      bt-external-ip = "127.0.0.1";
      dht-listen-port = "6882";
      enable-dht = "true";
      enable-peer-exchange = "true";
      listen-port = "6881";
      bt-force-encryption = "true";
      bt-min-crypto-level = "arc4";
      bt-require-crypto = "true";
      follow-torrent = "mem";
      seed-ratio = "100";
      seed-time = "0";
      socket-recv-buffer-size = "1m";
      event-poll = "epoll";
      realtime-chunk-checksum = "true";
      allow-overwrite = "true";
      always-resume = "true";
      auto-file-renaming = "false";
      continue = "true";
      rpc-save-upload-metadata = "false";
    };
  };
}

{
  services.dunst = {
    enable = true;
    iconTheme = {
      package = pkgs.papirus-icon-theme;
      name = "Papirus";
    };
    settings = {
      global = {
        monitor = 0;
        background = "#050505";
        frame_color = "#2e8b57";
        transparency = 0;
        follow = "none";
        width = 400;
        height = 900;
        idle_threshold = 120;
        origin = "top-right";
        offset = "10x50";
        scale = 0;
        notification_limit = 0;
        progress_bar = "true";
        alignment = "center";
        progress_bar_height = 10;
        progress_bar_frame_width = 1;
        progress_bar_min_width = 150;
        progress_bar_max_width = 500;
        indicate_hidden = "yes";
        separator_height = 2;
        padding = 10;
        horizontal_padding = 5;
        text_icon_padding = 4;
        frame_width = 3;
        separator_color = "frame";
        sort = "yes";
        font = "Code D Ace 16";
        line_height = 0;
        markup = "full";
        stack_duplicates = "true";
        vertical_alignment = "center";
        show_age_threshold = 60;
        ellipsize = "middle";
        ignore_newline = "no";
        show_indicators = "yes";
        icon_position = "left";
        max_icon_size = 32;
        sticky_history = "yes";
        history_length = 20;
        browser = "d-stuff";
        always_run_script = "true";
        title = "Dunst";
        class = "Dunst";
        corner_radius = 20;
        ignore_dbusclose = false;
        force_xwayland = "false";
        layer = "overlay";
        mouse_left_click = "do_action";
        mouse_middle_click = "do_action";
        mouse_right_click = "close_all";
      };

      reminder = {
        category = "reminder";
        background = "#33333390";
        foreground = "#ffffff";
        timeout = 0;
        script="d-notif";
      };

      urgency_low = {
        background = "#050505";
        foreground = "#ffffff";
        timeout = 5;
      };
      urgency_normal = {
        background = "#050505";
        foreground = "#ffffff";
        timeout = 6;
      };
      urgency_critical = {
        background = "#050505";
        foreground = "#ffffff";
        frame_color = "#f38ba8";
        timeout = 0;
      };
    };
  };
}

{
  home.packages = with pkgs; [
    openttd
    zeroad
    superTux
    # supertuxkart
  ];
}

{
  xdg.configFile."rofi" = {
    recursive = true;
    source = config.lib.file.mkOutOfStoreSymlink "/home/${vars.username}/d-git/d-nix/gdk/configs/rofi";
  };
}

{
  home.packages = with pkgs; [
    # misc
    libnotify
    # xdg-utils

    pcmanfm
    libreoffice
    # pandoc
    groff mupdf
    keepassxc

    # pioneer of web
    # mullvad-browser
    ungoogled-chromium
  ];
}

{
  home.packages = with pkgs; [
    languagetool
    aspell aspellDicts.en-science aspellDicts.en nuspell
    hunspell hunspellDicts.en-us
  ];
}

];

  # NEVER EVER TOUCH IT ⚠️
  home.stateVersion = "23.05"; # refer manual !

  # home configuration ends here
}
